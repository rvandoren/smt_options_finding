(set-option :produce-models true)
(set-logic all)
(define-fun s11 () int 1)
(define-fun s12 () int 0)
(define-fun s14 () int 2)
(define-fun s17 () int 3)
(define-fun s20 () int 4)
(define-fun s23 () int 5)
(define-fun s26 () int 6)
(define-fun s29 () int 7)
(define-fun s32 () int 8)
(define-fun s35 () int 9)
(define-fun s38 () int 10)
(declare-fun s0 () bool)
(declare-fun s1 () bool)
(declare-fun s2 () bool)
(declare-fun s3 () bool)
(declare-fun s4 () bool)
(declare-fun s5 () bool)
(declare-fun s6 () bool)
(declare-fun s7 () bool)
(declare-fun s8 () bool)
(declare-fun s9 () bool)
(define-fun s10 () bool ((_ pble 7 1 2 3 4 5 6 7 8 9 10) s0 s1 s2 s3 s4 s5 s6 s7 s8 s9))
(define-fun s13 () int (ite s0 s11 s12))
(define-fun s15 () int (ite s1 s14 s12))
(define-fun s16 () int (+ s13 s15))
(define-fun s18 () int (ite s2 s17 s12))
(define-fun s19 () int (+ s16 s18))
(define-fun s21 () int (ite s3 s20 s12))
(define-fun s22 () int (+ s19 s21))
(define-fun s24 () int (ite s4 s23 s12))
(define-fun s25 () int (+ s22 s24))
(define-fun s27 () int (ite s5 s26 s12))
(define-fun s28 () int (+ s25 s27))
(define-fun s30 () int (ite s6 s29 s12))
(define-fun s31 () int (+ s28 s30))
(define-fun s33 () int (ite s7 s32 s12))
(define-fun s34 () int (+ s31 s33))
(define-fun s36 () int (ite s8 s35 s12))
(define-fun s37 () int (+ s34 s36))
(define-fun s39 () int (ite s9 s38 s12))
(define-fun s40 () int (+ s37 s39))
(define-fun s41 () bool (<= s40 s29))
(define-fun s42 () bool (= s10 s41))
(assert s42)
(check-sat)