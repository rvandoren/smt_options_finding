(set-option :produce-proofs true)
(declare-datatypes () ((num$ (one$) (bit0$ (select$ num$)) (bit1$ (selecta$ num$)))))
(declare-fun divide$ (int int) int)
(declare-fun modulo$ (int int) int)
(assert (! (not (= (divide$ 0 5) 0)) :named a0))
(assert (! (forall ((?v0 int) (?v1 int)) (= (divide$ ?v0 ?v1) (ite (= ?v1 0) 0 (ite (< 0 ?v1) (div ?v0 ?v1) (div (- ?v0) (- ?v1)))))) :named a1))
(assert (! (forall ((?v0 int) (?v1 int)) (= (modulo$ ?v0 ?v1) (ite (= ?v1 0) ?v0 (ite (< 0 ?v1) (mod ?v0 ?v1) (- (mod (- ?v0) (- ?v1))))))) :named a2))
(check-sat)
(get-proof)