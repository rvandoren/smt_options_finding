(set-option :model false)
(set-option :proof true)
(set-option :rewriter.arith_ineq_lhs true)
(set-option :smt.phase_selection 5)
(set-option :smt.random_seed 1)
(declare-fun a () real) (declare-fun b () real) (declare-fun c () real) (declare-fun d () real)
(declare-fun e () real) (declare-fun f () real) (declare-fun g () real) (declare-fun h () real)
(declare-fun i () real) (declare-fun j () real) (declare-fun k () real) (declare-fun l () real)
(declare-fun m () real) (declare-fun n () real) (declare-fun o () real) (declare-fun aaa () real)
(declare-fun bbb () real) (declare-fun v1 () real) (declare-fun a () real) (declare-fun v2 () real)
(declare-fun i1 () real) (declare-fun i2 () real) (declare-fun x2 () real) (declare-fun x1 () real)
(declare-fun xi1 () real) (declare-fun xi2 () real) (declare-fun v () real) (declare-fun aa () real)
(declare-fun bb () real) (declare-fun cc () real) (declare-fun ep () real) (declare-fun dd () real)
(declare-fun ee () real) (declare-fun ff () real) (declare-fun gg () real)  (declare-fun ccc () real)
(declare-fun ddd () real) (declare-fun eee () real) (declare-fun kk () real)
(declare-fun fff () real)
(declare-fun ll () real)
(declare-fun ggg () real)
(declare-fun hhh () real)
(declare-fun mm () real)
(declare-fun kkk () real)
(declare-fun lll () real)
(assert (not (=> (and (or (or (and (and (and (and (and (and (and (and (and (and (=> (and (<= 0.0 gg kk)) (and (and (<= 0.0 (+ (+ ddd gg))) (<= (+ (div 107 ddd gg)) 0)) (<= gg (div 128 a v1)))) (<= 0.0 kk)) (distinct (- ee) 0.0)) (<= 0.0 (- k aa))) (< (- k aa) (- o dd))) (> ccc (- h xi1))) (= fff 2.0)) (< ccc lll)) (< 0.0 (- bbb ff))) (<= 0.0 (- d i1))) (<= (- d i1) (- o dd))) (< 0.0 ddd)) (< 0.0 (- o dd))) (< 0.0 (- a v1))) (<= (+ (* ddd kk) (- k aa)) (- o dd)))))
(assert (= a (+ v1 kkk)))
(assert (= b (+ a kkk)))
(assert (= c (+ v2 mm)))
(assert (distinct d (+ i1 ggg)))
(assert (distinct e (+ i2 ggg)))
(assert (= f (+ x2 kk)))
(assert (= g (+ x1 ccc)))
(assert (= h (+ xi1 ll)))
(assert (= i (+ xi2 mm)))
(assert (= j (+ v fff)))
(assert (= k (+ aa mm)))
(assert (= l (* bb lll)))
(assert (= m (- cc eee)))
(assert (= n (* ep ll)))
(assert (distinct o (+ dd hhh)))
(assert (= aaa 0))
(assert (= bbb (+ ff eee)))
(check-sat)