(set-option :produce-unsat-assumptions true)
(declare-fun mapisempty!206 () bool)
(declare-fun mapres!208 () bool)
(assert (=> mapisempty!206 mapres!208))
(declare-fun e!1449 () bool)
(declare-datatypes () ((filetype!60 (filetype!61 (partitionnumber!32 (_ bitvec 8))))))
(declare-datatypes () ((timingscet!58 (timingscet!59 (coarse!34 (_ bitvec 32)) (fine!34 (_ bitvec 16))))))
(declare-datatypes () ((filename!58 (filename!59 (filetype!36 filetype!60) (time!33 timingscet!58) (duration!37 (_ bitvec 16)) (spare!43 (_ bitvec 8))))))
(declare-datatypes () ((fileblockstatus!29 (stats_unknown!29) (stats_free!29) (stats_error!29) (stats_bad!29) (stats_file!29))))
(declare-datatypes () ((filecatalognode!58 (filecatalognode!59 (blockstatus!32 fileblockstatus!29) (filename!32 filename!58)))))
(declare-fun mapdefault!209 () filecatalognode!58)
(declare-fun inv!9 (filetype!60) bool)
(declare-fun inv!17 (timingscet!58) bool)
(assert (= e!1449 (and (inv!9 (filetype!36 (filename!32 mapdefault!209))) (inv!17 (time!33 (filename!32 mapdefault!209))))))
(declare-fun b!881 () bool)
(declare-fun e!1431 () bool)
(declare-fun mapvalue!210 () filecatalognode!58)
(assert (=> b!881 (= e!1431 (and (inv!9 (filetype!36 (filename!32 mapvalue!210))) (inv!17 (time!33 (filename!32 mapvalue!210)))))))
(declare-fun mapnonempty!206 () bool)
(declare-fun mapres!209 () bool)
(declare-fun tp!209 () bool)
(declare-fun e!1434 () bool)
(assert (=> mapnonempty!206 (= mapres!209 (and tp!209 e!1434))))
(declare-fun maprest!210 () (array (_ bitvec 32) filecatalognode!58))
(declare-fun mapkey!208 () (_ bitvec 32))
(declare-fun mapvalue!207 () filecatalognode!58)
(declare-datatypes () ((array!326 (array!327 (arr!137 (array (_ bitvec 32) (_ bitvec 16))) (size!140 (_ bitvec 32))))))
(declare-datatypes () ((hashline!58 (hashline!59 (count!42 (_ bitvec 16)) (nodeindex!40 array!326)))))
(declare-datatypes () ((array!328 (array!329 (arr!138 (array (_ bitvec 32) filecatalognode!58)) (size!141 (_ bitvec 32))))))
(declare-datatypes () ((array!330 (array!331 (arr!139 (array (_ bitvec 32) (_ bitvec 32))) (size!142 (_ bitvec 32))))))
(declare-datatypes () ((array!332 (array!333 (arr!140 (array (_ bitvec 32) hashline!58)) (size!143 (_ bitvec 32))))))
(declare-datatypes () ((filecontrolblock!58 (filecontrolblock!59 (controlblocknumber!32 (_ bitvec 32)) (initialblocknumber!44 (_ bitvec 32)) (usedatacrc!32 bool) (mostrecentlywrittenblock!44 (_ bitvec 32)) (hashextralines!32 (_ bitvec 32)) (magicvalue!32 (_ bitvec 32)) (filecatalog!44 array!328) (freeblocksbitmap!44 array!330) (hashtable!44 array!332) (initialblocknumbercopy!32 (_ bitvec 32))))))
(declare-fun mapvalue!209 () filecontrolblock!58)
(assert (=> mapnonempty!206 (= (arr!138 (filecatalog!44 mapvalue!209)) (store maprest!210 mapkey!208 mapvalue!207))))
(declare-fun b!882 () bool)
(declare-fun e!1450 () bool)
(declare-fun mapvalue!208 () hashline!58)
(declare-fun array_inv!137 (array!326) bool)
(assert (=> b!882 (= e!1450 (array_inv!137 (nodeindex!40 mapvalue!208)))))
(declare-fun e!1432 () bool)
(assert (= e!1432 e!1449))
(declare-fun e!1442 () bool)
(declare-fun e!1435 () bool)
(declare-fun b!884 () bool)
(declare-fun e!1439 () bool)
(declare-fun array_inv!138 (array!328) bool)
(declare-fun array_inv!139 (array!330) bool)
(declare-fun array_inv!140 (array!332) bool)
(assert (=> b!884 (= e!1442 (and (array_inv!138 (filecatalog!44 mapvalue!209)) e!1439 (array_inv!139 (freeblocksbitmap!44 mapvalue!209)) (array_inv!140 (hashtable!44 mapvalue!209)) e!1435))))
(declare-fun b!885 () bool)
(declare-fun e!1454 () bool)
(declare-fun mapdefault!207 () hashline!58)
(assert (=> b!885 (= e!1454 (array_inv!137 (nodeindex!40 mapdefault!207)))))
(declare-fun b!886 () bool)
(declare-fun e!1448 () bool)
(declare-fun mapdefault!210 () filecatalognode!58)
(assert (=> b!886 (= e!1448 (and (inv!9 (filetype!36 (filename!32 mapdefault!210))) (inv!17 (time!33 (filename!32 mapdefault!210)))))))
(declare-fun b!887 () bool)
(declare-fun e!1438 () bool)
(declare-fun mapvalue!206 () hashline!58)
(assert (=> b!887 (= e!1438 (array_inv!137 (nodeindex!40 mapvalue!206)))))
(declare-fun tp!210 () bool)
(declare-fun mapnonempty!207 () bool)
(declare-fun inv!11 (filecontrolblock!58) bool)
(assert (=> mapnonempty!207 (= mapres!208 (and tp!210 (inv!11 mapvalue!209) e!1442))))
(declare-fun mapkey!209 () (_ bitvec 32))
(declare-fun maprest!206 () (array (_ bitvec 32) filecontrolblock!58))
(declare-datatypes () ((array!334 (array!335 (arr!141 (array (_ bitvec 32) filecontrolblock!58)) (size!144 (_ bitvec 32))))))
(declare-fun blocks!8 () array!334)
(assert (=> mapnonempty!207 (= (arr!141 blocks!8) (store maprest!206 mapkey!209 mapvalue!209))))
(declare-fun j!42 () (_ bitvec 32))
(declare-fun i!687 () (_ bitvec 32))
(assert (and (bvsle j!42 i!687) (not (= (magicvalue!32 (select (arr!141 blocks!8) j!42)) #b10000100011001010111101001011011))))
(declare-fun b!889 () bool)
(declare-fun e!1445 () bool)
(assert (=> b!889 (= e!1439 (and e!1445 mapres!209))))
(declare-fun condmapempty!207 () bool)
(assert (=> b!889 (= condmapempty!207 (= (arr!138 (filecatalog!44 mapvalue!209)) ((as const (array (_ bitvec 32) filecatalognode!58)) mapdefault!210)))))
(declare-fun mapdefault!206 () filecontrolblock!58)
(declare-fun e!1447 () bool)
(declare-fun e!1456 () bool)
(assert (= e!1447 (and (inv!11 mapdefault!206) e!1456 mapres!208)))
(declare-fun condmapempty!208 () bool)
(assert (= condmapempty!208 (= (arr!141 blocks!8) ((as const (array (_ bitvec 32) filecontrolblock!58)) mapdefault!206))))
(declare-fun e!1455 () bool)
(declare-fun mapdefault!208 () hashline!58)
(assert (= e!1455 (array_inv!137 (nodeindex!40 mapdefault!208))))
(declare-fun e!1451 () bool)
(declare-fun mapres!206 () bool)
(assert (= e!1451 (and e!1432 mapres!206)))
(declare-fun condmapempty!210 () bool)
(assert (= condmapempty!210 (= (arr!138 (filecatalog!44 mapdefault!206)) ((as const (array (_ bitvec 32) filecatalognode!58)) mapdefault!209))))
(declare-fun mapisempty!207 () bool)
(assert (=> mapisempty!207 mapres!206))
(declare-fun mapres!210 () bool)
(declare-fun tp!206 () bool)
(declare-fun mapnonempty!208 () bool)
(declare-fun inv!10 (hashline!58) bool)
(assert (=> mapnonempty!208 (= mapres!210 (and tp!206 (inv!10 mapvalue!206) e!1438))))
(declare-fun maprest!207 () (array (_ bitvec 32) hashline!58))
(declare-fun mapkey!207 () (_ bitvec 32))
(assert (=> mapnonempty!208 (= (arr!140 (hashtable!44 mapvalue!209)) (store maprest!207 mapkey!207 mapvalue!206))))
(declare-fun e!1426 () bool)
(declare-fun mapres!207 () bool)
(assert (= e!1426 (and (inv!10 mapdefault!208) e!1455 mapres!207)))
(declare-fun condmapempty!209 () bool)
(assert (= condmapempty!209 (= (arr!140 (hashtable!44 mapdefault!206)) ((as const (array (_ bitvec 32) hashline!58)) mapdefault!208))))
(assert (= e!1456 (and (array_inv!138 (filecatalog!44 mapdefault!206)) e!1451 (array_inv!139 (freeblocksbitmap!44 mapdefault!206)) (array_inv!140 (hashtable!44 mapdefault!206)) e!1426)))
(declare-fun tp!208 () bool)
(declare-fun mapnonempty!209 () bool)
(assert (=> mapnonempty!209 (= mapres!207 (and tp!208 (inv!10 mapvalue!208) e!1450))))
(declare-fun mapkey!206 () (_ bitvec 32))
(declare-fun maprest!209 () (array (_ bitvec 32) hashline!58))
(assert (=> mapnonempty!209 (= (arr!140 (hashtable!44 mapdefault!206)) (store maprest!209 mapkey!206 mapvalue!208))))
(declare-fun mapisempty!208 () bool)
(assert (=> mapisempty!208 mapres!209))
(declare-fun mapisempty!209 () bool)
(assert (=> mapisempty!209 mapres!210))
(declare-fun mapisempty!210 () bool)
(assert (=> mapisempty!210 mapres!207))
(declare-fun b!895 () bool)
(assert (=> b!895 (= e!1445 e!1448)))
(declare-fun allgoodfrom!0 (array!334 (_ bitvec 32)) bool)
(assert (allgoodfrom!0 blocks!8 i!687))
(declare-fun b!897 () bool)
(declare-fun e!1423 () bool)
(assert (=> b!897 (= e!1434 e!1423)))
(declare-fun b!898 () bool)
(assert (=> b!898 (= e!1423 (and (inv!9 (filetype!36 (filename!32 mapvalue!207))) (inv!17 (time!33 (filename!32 mapvalue!207)))))))
(declare-fun b!899 () bool)
(assert (=> b!899 (= e!1435 (and (inv!10 mapdefault!207) e!1454 mapres!210))))
(declare-fun condmapempty!206 () bool)
(assert (=> b!899 (= condmapempty!206 (= (arr!140 (hashtable!44 mapvalue!209)) ((as const (array (_ bitvec 32) hashline!58)) mapdefault!207)))))
(assert (and (bvsle #b00000000000000000000000000000000 i!687) (bvsle i!687 j!42) (bvslt j!42 (size!144 blocks!8))))
(declare-fun array_inv!141 (array!334) bool)
(assert (and (array_inv!141 blocks!8) e!1447))
(declare-fun mapnonempty!210 () bool)
(declare-fun tp!207 () bool)
(declare-fun e!1424 () bool)
(assert (=> mapnonempty!210 (= mapres!206 (and tp!207 e!1424))))
(declare-fun maprest!208 () (array (_ bitvec 32) filecatalognode!58))
(declare-fun mapkey!210 () (_ bitvec 32))
(assert (=> mapnonempty!210 (= (arr!138 (filecatalog!44 mapdefault!206)) (store maprest!208 mapkey!210 mapvalue!210))))
(declare-fun b!900 () bool)
(assert (=> b!900 (= e!1424 e!1431)))
(assert (= condmapempty!208 mapisempty!206))
(assert (= (not condmapempty!208) mapnonempty!207))
(assert (= (and b!889 condmapempty!207) mapisempty!208))
(assert (= (and b!889 (not condmapempty!207)) mapnonempty!206))
(assert (= b!897 b!898))
(assert (= mapnonempty!206 b!897))
(assert (= b!895 b!886))
(assert (= b!889 b!895))
(assert (= b!884 b!889))
(assert (= (and b!899 condmapempty!206) mapisempty!209))
(assert (= (and b!899 (not condmapempty!206)) mapnonempty!208))
(assert (= mapnonempty!208 b!887))
(assert (= b!899 b!885))
(assert (= b!884 b!899))
(assert (= mapnonempty!207 b!884))
(assert (= condmapempty!210 mapisempty!207))
(assert (= (not condmapempty!210) mapnonempty!210))
(assert (= b!900 b!881))
(assert (= mapnonempty!210 b!900))
(assert (= condmapempty!209 mapisempty!210))
(assert (= (not condmapempty!209) mapnonempty!209))
(assert (= mapnonempty!209 b!882))
(assert (= (inv!9 (filetype!36 (filename!32 mapdefault!209))) (and (bvule #b00000000 (partitionnumber!32 (filetype!36 (filename!32 mapdefault!209)))) (bvule (partitionnumber!32 (filetype!36 (filename!32 mapdefault!209))) #b00001001))))
(assert (= (inv!17 (time!33 (filename!32 mapdefault!209))) (bvult (coarse!34 (time!33 (filename!32 mapdefault!209))) #b01111111111111111111111111111111)))
(declare-fun lt!31 () array!326)
(assert (= lt!31 (nodeindex!40 mapdefault!208)))
(assert (= (inv!10 mapdefault!208) (and (= (size!140 lt!31) #b00000000000000000000000000010100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000000000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000000001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000000010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000000011)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000000100)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000000101)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000000110)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000000111)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000001000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000001001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000001010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000001011)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000001100)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000001101)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000001110)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000001111)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000010000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000010001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000010010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!31) #b00000000000000000000000000010011)) #b00000000000000000000000000111100) (bvsgt (size!140 lt!31) ((_ zero_extend 16) (count!42 mapdefault!208))))))
(declare-fun d!118 () bool)
(assert (=> d!118 (= (inv!9 (filetype!36 (filename!32 mapvalue!207))) (and (bvule #b00000000 (partitionnumber!32 (filetype!36 (filename!32 mapvalue!207)))) (bvule (partitionnumber!32 (filetype!36 (filename!32 mapvalue!207))) #b00001001)))))
(assert (=> b!898 d!118))
(declare-fun d!120 () bool)
(assert (=> d!120 (= (inv!17 (time!33 (filename!32 mapvalue!207))) (bvult (coarse!34 (time!33 (filename!32 mapvalue!207))) #b01111111111111111111111111111111))))
(assert (=> b!898 d!120))
(declare-fun d!122 () bool)
(assert (=> d!122 (= (array_inv!137 (nodeindex!40 mapdefault!207)) (bvsge (size!140 (nodeindex!40 mapdefault!207)) #b00000000000000000000000000000000))))
(assert (=> b!885 d!122))
(declare-fun lt!34 () (_ bitvec 32))
(assert (= lt!34 (initialblocknumber!44 mapdefault!206)))
(assert (= (inv!11 mapdefault!206) (and (bvule lt!34 #b00000000000000010000000000000000) (bvule (mostrecentlywrittenblock!44 mapdefault!206) #b00000000000000000000000000111100) (bvule (bvadd lt!34 #b00000000000000000000000000111100) #b00000000000000010000000000000000) (= (size!143 (hashtable!44 mapdefault!206)) #b00000000000000000000000000000100) (= (size!141 (filecatalog!44 mapdefault!206)) #b00000000000000000000000000111100) (= (size!142 (freeblocksbitmap!44 mapdefault!206)) #b00000000000000000000000000000010))))
(declare-fun d!126 () bool)
(assert (=> d!126 (= (inv!9 (filetype!36 (filename!32 mapdefault!210))) (and (bvule #b00000000 (partitionnumber!32 (filetype!36 (filename!32 mapdefault!210)))) (bvule (partitionnumber!32 (filetype!36 (filename!32 mapdefault!210))) #b00001001)))))
(assert (=> b!886 d!126))
(declare-fun d!128 () bool)
(assert (=> d!128 (= (inv!17 (time!33 (filename!32 mapdefault!210))) (bvult (coarse!34 (time!33 (filename!32 mapdefault!210))) #b01111111111111111111111111111111))))
(assert (=> b!886 d!128))
(declare-fun d!130 () bool)
(assert (=> d!130 (= (inv!9 (filetype!36 (filename!32 mapvalue!210))) (and (bvule #b00000000 (partitionnumber!32 (filetype!36 (filename!32 mapvalue!210)))) (bvule (partitionnumber!32 (filetype!36 (filename!32 mapvalue!210))) #b00001001)))))
(assert (=> b!881 d!130))
(declare-fun d!132 () bool)
(assert (=> d!132 (= (inv!17 (time!33 (filename!32 mapvalue!210))) (bvult (coarse!34 (time!33 (filename!32 mapvalue!210))) #b01111111111111111111111111111111))))
(assert (=> b!881 d!132))
(declare-fun d!134 () bool)
(assert (=> d!134 (= (array_inv!137 (nodeindex!40 mapvalue!208)) (bvsge (size!140 (nodeindex!40 mapvalue!208)) #b00000000000000000000000000000000))))
(assert (=> b!882 d!134))
(declare-fun d!136 () bool)
(assert (=> d!136 (= (array_inv!137 (nodeindex!40 mapvalue!206)) (bvsge (size!140 (nodeindex!40 mapvalue!206)) #b00000000000000000000000000000000))))
(assert (=> b!887 d!136))
(declare-fun d!138 () bool)
(declare-fun lt!35 () array!326)
(assert (=> d!138 (= lt!35 (nodeindex!40 mapvalue!208))))
(assert (=> d!138 (= (inv!10 mapvalue!208) (and (= (size!140 lt!35) #b00000000000000000000000000010100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000000000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000000001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000000010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000000011)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000000100)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000000101)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000000110)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000000111)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000001000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000001001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000001010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000001011)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000001100)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000001101)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000001110)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000001111)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000010000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000010001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000010010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!35) #b00000000000000000000000000010011)) #b00000000000000000000000000111100) (bvsgt (size!140 lt!35) ((_ zero_extend 16) (count!42 mapvalue!208)))))))
(declare-fun bs!45 () bool)
(assert (= bs!45 d!138))
(assert (=> mapnonempty!209 d!138))
(declare-fun d!140 () bool)
(declare-fun lt!36 () array!326)
(assert (=> d!140 (= lt!36 (nodeindex!40 mapdefault!207))))
(assert (=> d!140 (= (inv!10 mapdefault!207) (and (= (size!140 lt!36) #b00000000000000000000000000010100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000000000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000000001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000000010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000000011)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000000100)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000000101)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000000110)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000000111)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000001000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000001001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000001010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000001011)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000001100)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000001101)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000001110)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000001111)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000010000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000010001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000010010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!36) #b00000000000000000000000000010011)) #b00000000000000000000000000111100) (bvsgt (size!140 lt!36) ((_ zero_extend 16) (count!42 mapdefault!207)))))))
(declare-fun bs!46 () bool)
(assert (= bs!46 d!140))
(assert (=> b!899 d!140))
(assert (= (array_inv!138 (filecatalog!44 mapdefault!206)) (bvsge (size!141 (filecatalog!44 mapdefault!206)) #b00000000000000000000000000000000)))
(assert (= (array_inv!139 (freeblocksbitmap!44 mapdefault!206)) (bvsge (size!142 (freeblocksbitmap!44 mapdefault!206)) #b00000000000000000000000000000000)))
(assert (= (array_inv!140 (hashtable!44 mapdefault!206)) (bvsge (size!143 (hashtable!44 mapdefault!206)) #b00000000000000000000000000000000)))
(declare-fun d!148 () bool)
(assert (=> d!148 (= (array_inv!138 (filecatalog!44 mapvalue!209)) (bvsge (size!141 (filecatalog!44 mapvalue!209)) #b00000000000000000000000000000000))))
(assert (=> b!884 d!148))
(declare-fun d!150 () bool)
(assert (=> d!150 (= (array_inv!139 (freeblocksbitmap!44 mapvalue!209)) (bvsge (size!142 (freeblocksbitmap!44 mapvalue!209)) #b00000000000000000000000000000000))))
(assert (=> b!884 d!150))
(declare-fun d!152 () bool)
(assert (=> d!152 (= (array_inv!140 (hashtable!44 mapvalue!209)) (bvsge (size!143 (hashtable!44 mapvalue!209)) #b00000000000000000000000000000000))))
(assert (=> b!884 d!152))
(assert (= (array_inv!141 blocks!8) (bvsge (size!144 blocks!8) #b00000000000000000000000000000000)))
(declare-fun d!156 () bool)
(declare-fun lt!37 () (_ bitvec 32))
(assert (=> d!156 (= lt!37 (initialblocknumber!44 mapvalue!209))))
(assert (=> d!156 (= (inv!11 mapvalue!209) (and (bvule lt!37 #b00000000000000010000000000000000) (bvule (mostrecentlywrittenblock!44 mapvalue!209) #b00000000000000000000000000111100) (bvule (bvadd lt!37 #b00000000000000000000000000111100) #b00000000000000010000000000000000) (= (size!143 (hashtable!44 mapvalue!209)) #b00000000000000000000000000000100) (= (size!141 (filecatalog!44 mapvalue!209)) #b00000000000000000000000000111100) (= (size!142 (freeblocksbitmap!44 mapvalue!209)) #b00000000000000000000000000000010)))))
(assert (=> mapnonempty!207 d!156))
(declare-fun res!2126 () bool)
(declare-fun e!1461 () bool)
(assert (=> res!2126 e!1461))
(assert (= res!2126 (bvsge i!687 (size!144 blocks!8))))
(assert (= (allgoodfrom!0 blocks!8 i!687) e!1461))
(declare-fun b!905 () bool)
(declare-fun e!1462 () bool)
(assert (=> b!905 (= e!1461 e!1462)))
(declare-fun res!2127 () bool)
(assert (=> b!905 (=> (not res!2127) (not e!1462))))
(assert (=> b!905 (= res!2127 (= (magicvalue!32 (select (arr!141 blocks!8) i!687)) #b10000100011001010111101001011011))))
(declare-fun b!906 () bool)
(assert (=> b!906 (= e!1462 (allgoodfrom!0 blocks!8 (bvadd i!687 #b00000000000000000000000000000001)))))
(assert (= (not res!2126) b!905))
(assert (= (and b!905 res!2127) b!906))
(declare-fun d!160 () bool)
(declare-fun lt!38 () array!326)
(assert (=> d!160 (= lt!38 (nodeindex!40 mapvalue!206))))
(assert (=> d!160 (= (inv!10 mapvalue!206) (and (= (size!140 lt!38) #b00000000000000000000000000010100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000000000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000000001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000000010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000000011)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000000100)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000000101)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000000110)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000000111)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000001000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000001001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000001010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000001011)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000001100)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000001101)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000001110)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000001111)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000010000)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000010001)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000010010)) #b00000000000000000000000000111100) (bvult ((_ zero_extend 16) (select (arr!137 lt!38) #b00000000000000000000000000010011)) #b00000000000000000000000000111100) (bvsgt (size!140 lt!38) ((_ zero_extend 16) (count!42 mapvalue!206)))))))
(declare-fun bs!47 () bool)
(assert (= bs!47 d!160))
(assert (=> mapnonempty!208 d!160))
(assert (= (array_inv!137 (nodeindex!40 mapdefault!208)) (bvsge (size!140 (nodeindex!40 mapdefault!208)) #b00000000000000000000000000000000)))
(declare-fun b!913 () bool)
(declare-fun e!1472 () bool)
(declare-fun mapvalue!213 () hashline!58)
(assert (=> b!913 (= e!1472 (array_inv!137 (nodeindex!40 mapvalue!213)))))
(declare-fun condmapempty!213 () bool)
(declare-fun mapdefault!213 () hashline!58)
(assert (=> mapnonempty!209 (= condmapempty!213 (= maprest!209 ((as const (array (_ bitvec 32) hashline!58)) mapdefault!213)))))
(declare-fun mapres!213 () bool)
(declare-fun e!1471 () bool)
(assert (=> mapnonempty!209 (= tp!208 (and (inv!10 mapdefault!213) e!1471 mapres!213))))
(declare-fun mapnonempty!213 () bool)
(declare-fun tp!213 () bool)
(assert (=> mapnonempty!213 (= mapres!213 (and tp!213 (inv!10 mapvalue!213) e!1472))))
(declare-fun mapkey!213 () (_ bitvec 32))
(declare-fun maprest!213 () (array (_ bitvec 32) hashline!58))
(assert (=> mapnonempty!213 (= maprest!209 (store maprest!213 mapkey!213 mapvalue!213))))
(declare-fun b!914 () bool)
(assert (=> b!914 (= e!1471 (array_inv!137 (nodeindex!40 mapdefault!213)))))
(declare-fun mapisempty!213 () bool)
(assert (=> mapisempty!213 mapres!213))
(assert (= (and mapnonempty!209 condmapempty!213) mapisempty!213))
(assert (= (and mapnonempty!209 (not condmapempty!213)) mapnonempty!213))
(assert (= mapnonempty!213 b!913))
(assert (= mapnonempty!209 b!914))
(declare-fun b!925 () bool)
(declare-fun e!1492 () bool)
(declare-fun e!1495 () bool)
(assert (=> b!925 (= e!1492 e!1495)))
(declare-fun b!926 () bool)
(declare-fun e!1493 () bool)
(declare-fun mapvalue!216 () filecatalognode!58)
(assert (=> b!926 (= e!1493 (and (inv!9 (filetype!36 (filename!32 mapvalue!216))) (inv!17 (time!33 (filename!32 mapvalue!216)))))))
(declare-fun mapnonempty!216 () bool)
(declare-fun mapres!216 () bool)
(declare-fun tp!216 () bool)
(declare-fun e!1494 () bool)
(assert (=> mapnonempty!216 (= mapres!216 (and tp!216 e!1494))))
(declare-fun maprest!216 () (array (_ bitvec 32) filecatalognode!58))
(declare-fun mapkey!216 () (_ bitvec 32))
(assert (=> mapnonempty!216 (= maprest!210 (store maprest!216 mapkey!216 mapvalue!216))))
(declare-fun condmapempty!216 () bool)
(declare-fun mapdefault!216 () filecatalognode!58)
(assert (=> mapnonempty!206 (= condmapempty!216 (= maprest!210 ((as const (array (_ bitvec 32) filecatalognode!58)) mapdefault!216)))))
(assert (=> mapnonempty!206 (= tp!209 (and e!1492 mapres!216))))
(declare-fun b!927 () bool)
(assert (=> b!927 (= e!1494 e!1493)))
(declare-fun b!928 () bool)
(assert (=> b!928 (= e!1495 (and (inv!9 (filetype!36 (filename!32 mapdefault!216))) (inv!17 (time!33 (filename!32 mapdefault!216)))))))
(declare-fun mapisempty!216 () bool)
(assert (=> mapisempty!216 mapres!216))
(assert (= (and mapnonempty!206 condmapempty!216) mapisempty!216))
(assert (= (and mapnonempty!206 (not condmapempty!216)) mapnonempty!216))
(assert (= b!927 b!926))
(assert (= mapnonempty!216 b!927))
(assert (= b!925 b!928))
(assert (= mapnonempty!206 b!925))
(declare-fun b!967 () bool)
(declare-fun e!1569 () bool)
(declare-fun mapvalue!228 () filecatalognode!58)
(assert (=> b!967 (= e!1569 (and (inv!9 (filetype!36 (filename!32 mapvalue!228))) (inv!17 (time!33 (filename!32 mapvalue!228)))))))
(declare-fun b!968 () bool)
(declare-fun e!1582 () bool)
(declare-fun e!1589 () bool)
(declare-fun mapres!228 () bool)
(assert (=> b!968 (= e!1582 (and e!1589 mapres!228))))
(declare-fun condmapempty!231 () bool)
(declare-fun mapvalue!231 () filecontrolblock!58)
(declare-fun mapdefault!227 () filecatalognode!58)
(assert (=> b!968 (= condmapempty!231 (= (arr!138 (filecatalog!44 mapvalue!231)) ((as const (array (_ bitvec 32) filecatalognode!58)) mapdefault!227)))))
(declare-fun b!969 () bool)
(declare-fun e!1593 () bool)
(declare-fun mapvalue!229 () hashline!58)
(assert (=> b!969 (= e!1593 (array_inv!137 (nodeindex!40 mapvalue!229)))))
(declare-fun b!970 () bool)
(declare-fun e!1577 () bool)
(declare-fun mapdefault!230 () hashline!58)
(assert (=> b!970 (= e!1577 (array_inv!137 (nodeindex!40 mapdefault!230)))))
(declare-fun mapres!229 () bool)
(declare-fun e!1590 () bool)
(declare-fun b!971 () bool)
(assert (=> b!971 (= e!1590 (and (inv!10 mapdefault!230) e!1577 mapres!229))))
(declare-fun condmapempty!227 () bool)
(assert (=> b!971 (= condmapempty!227 (= (arr!140 (hashtable!44 mapvalue!231)) ((as const (array (_ bitvec 32) hashline!58)) mapdefault!230)))))
(declare-fun mapres!227 () bool)
(declare-fun mapnonempty!227 () bool)
(declare-fun tp!229 () bool)
(declare-fun mapvalue!230 () hashline!58)
(declare-fun e!1594 () bool)
(assert (=> mapnonempty!227 (= mapres!227 (and tp!229 (inv!10 mapvalue!230) e!1594))))
(declare-fun mapdefault!229 () filecontrolblock!58)
(declare-fun maprest!227 () (array (_ bitvec 32) hashline!58))
(declare-fun mapkey!227 () (_ bitvec 32))
(assert (=> mapnonempty!227 (= (arr!140 (hashtable!44 mapdefault!229)) (store maprest!227 mapkey!227 mapvalue!230))))
(declare-fun mapnonempty!228 () bool)
(declare-fun tp!230 () bool)
(declare-fun e!1581 () bool)
(assert (=> mapnonempty!228 (= mapres!228 (and tp!230 e!1581))))
(declare-fun mapkey!230 () (_ bitvec 32))
(declare-fun maprest!230 () (array (_ bitvec 32) filecatalognode!58))
(assert (=> mapnonempty!228 (= (arr!138 (filecatalog!44 mapvalue!231)) (store maprest!230 mapkey!230 mapvalue!228))))
(declare-fun mapisempty!227 () bool)
(declare-fun mapres!230 () bool)
(assert (=> mapisempty!227 mapres!230))
(declare-fun b!972 () bool)
(declare-fun e!1583 () bool)
(assert (=> b!972 (= e!1583 (and (array_inv!138 (filecatalog!44 mapvalue!231)) e!1582 (array_inv!139 (freeblocksbitmap!44 mapvalue!231)) (array_inv!140 (hashtable!44 mapvalue!231)) e!1590))))
(declare-fun b!973 () bool)
(declare-fun e!1576 () bool)
(declare-fun e!1584 () bool)
(assert (=> b!973 (= e!1576 e!1584)))
(declare-fun mapisempty!228 () bool)
(assert (=> mapisempty!228 mapres!228))
(declare-fun mapisempty!229 () bool)
(assert (=> mapisempty!229 mapres!227))
(declare-fun b!974 () bool)
(declare-fun mapvalue!227 () filecatalognode!58)
(assert (=> b!974 (= e!1584 (and (inv!9 (filetype!36 (filename!32 mapvalue!227))) (inv!17 (time!33 (filename!32 mapvalue!227)))))))
(declare-fun b!975 () bool)
(declare-fun e!1580 () bool)
(assert (=> b!975 (= e!1589 e!1580)))
(declare-fun b!976 () bool)
(declare-fun e!1563 () bool)
(declare-fun e!1585 () bool)
(assert (=> b!976 (= e!1563 e!1585)))
(declare-fun mapnonempty!229 () bool)
(declare-fun mapres!231 () bool)
(declare-fun tp!231 () bool)
(assert (=> mapnonempty!229 (= mapres!231 (and tp!231 e!1576))))
(declare-fun maprest!231 () (array (_ bitvec 32) filecatalognode!58))
(declare-fun mapkey!231 () (_ bitvec 32))
(assert (=> mapnonempty!229 (= (arr!138 (filecatalog!44 mapdefault!229)) (store maprest!231 mapkey!231 mapvalue!227))))
(declare-fun mapisempty!230 () bool)
(assert (=> mapisempty!230 mapres!231))
(declare-fun b!977 () bool)
(assert (=> b!977 (= e!1594 (array_inv!137 (nodeindex!40 mapvalue!230)))))
(declare-fun b!978 () bool)
(declare-fun e!1587 () bool)
(assert (=> b!978 (= e!1587 (and e!1563 mapres!231))))
(declare-fun condmapempty!228 () bool)
(declare-fun mapdefault!231 () filecatalognode!58)
(assert (=> b!978 (= condmapempty!228 (= (arr!138 (filecatalog!44 mapdefault!229)) ((as const (array (_ bitvec 32) filecatalognode!58)) mapdefault!231)))))
(declare-fun b!979 () bool)
(declare-fun e!1575 () bool)
(declare-fun e!1570 () bool)
(assert (=> b!979 (= e!1570 (and (array_inv!138 (filecatalog!44 mapdefault!229)) e!1587 (array_inv!139 (freeblocksbitmap!44 mapdefault!229)) (array_inv!140 (hashtable!44 mapdefault!229)) e!1575))))
(declare-fun b!980 () bool)
(assert (=> b!980 (= e!1581 e!1569)))
(declare-fun b!981 () bool)
(assert (=> b!981 (= e!1580 (and (inv!9 (filetype!36 (filename!32 mapdefault!227))) (inv!17 (time!33 (filename!32 mapdefault!227)))))))
(declare-fun condmapempty!230 () bool)
(assert (=> mapnonempty!207 (= condmapempty!230 (= maprest!206 ((as const (array (_ bitvec 32) filecontrolblock!58)) mapdefault!229)))))
(assert (=> mapnonempty!207 (= tp!210 (and (inv!11 mapdefault!229) e!1570 mapres!230))))
(declare-fun mapdefault!228 () hashline!58)
(declare-fun e!1568 () bool)
(declare-fun b!982 () bool)
(assert (=> b!982 (= e!1575 (and (inv!10 mapdefault!228) e!1568 mapres!227))))
(declare-fun condmapempty!229 () bool)
(assert (=> b!982 (= condmapempty!229 (= (arr!140 (hashtable!44 mapdefault!229)) ((as const (array (_ bitvec 32) hashline!58)) mapdefault!228)))))
(declare-fun tp!227 () bool)
(declare-fun mapnonempty!230 () bool)
(assert (=> mapnonempty!230 (= mapres!230 (and tp!227 (inv!11 mapvalue!231) e!1583))))
(declare-fun mapkey!229 () (_ bitvec 32))
(declare-fun maprest!228 () (array (_ bitvec 32) filecontrolblock!58))
(assert (=> mapnonempty!230 (= maprest!206 (store maprest!228 mapkey!229 mapvalue!231))))
(declare-fun b!983 () bool)
(assert (=> b!983 (= e!1585 (and (inv!9 (filetype!36 (filename!32 mapdefault!231))) (inv!17 (time!33 (filename!32 mapdefault!231)))))))
(declare-fun mapnonempty!231 () bool)
(declare-fun tp!228 () bool)
(assert (=> mapnonempty!231 (= mapres!229 (and tp!228 (inv!10 mapvalue!229) e!1593))))
(declare-fun maprest!229 () (array (_ bitvec 32) hashline!58))
(declare-fun mapkey!228 () (_ bitvec 32))
(assert (=> mapnonempty!231 (= (arr!140 (hashtable!44 mapvalue!231)) (store maprest!229 mapkey!228 mapvalue!229))))
(declare-fun mapisempty!231 () bool)
(assert (=> mapisempty!231 mapres!229))
(declare-fun b!984 () bool)
(assert (=> b!984 (= e!1568 (array_inv!137 (nodeindex!40 mapdefault!228)))))
(assert (= (and mapnonempty!207 condmapempty!230) mapisempty!227))
(assert (= (and mapnonempty!207 (not condmapempty!230)) mapnonempty!230))
(assert (= (and b!968 condmapempty!231) mapisempty!228))
(assert (= (and b!968 (not condmapempty!231)) mapnonempty!228))
(assert (= b!980 b!967))
(assert (= mapnonempty!228 b!980))
(assert (= b!975 b!981))
(assert (= b!968 b!975))
(assert (= b!972 b!968))
(assert (= (and b!971 condmapempty!227) mapisempty!231))
(assert (= (and b!971 (not condmapempty!227)) mapnonempty!231))
(assert (= mapnonempty!231 b!969))
(assert (= b!971 b!970))
(assert (= b!972 b!971))
(assert (= mapnonempty!230 b!972))
(assert (= (and b!978 condmapempty!228) mapisempty!230))
(assert (= (and b!978 (not condmapempty!228)) mapnonempty!229))
(assert (= b!973 b!974))
(assert (= mapnonempty!229 b!973))
(assert (= b!976 b!983))
(assert (= b!978 b!976))
(assert (= b!979 b!978))
(assert (= (and b!982 condmapempty!229) mapisempty!229))
(assert (= (and b!982 (not condmapempty!229)) mapnonempty!227))
(assert (= mapnonempty!227 b!977))
(assert (= b!982 b!984))
(assert (= b!979 b!982))
(assert (= mapnonempty!207 b!979))
(check-sat)