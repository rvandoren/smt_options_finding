(set-option :model false)
(declare-fun a () real)
(declare-fun b () real)
(declare-fun aa () real)
(declare-fun c () real)
(declare-fun ab () real)
(declare-fun d () real)
(declare-fun h () real)
(declare-fun e () real)
(declare-fun f () real)
(declare-fun k () real)
(declare-fun l () real)
(declare-fun g () real)
(declare-fun ad () real)
(declare-fun n () real)
(declare-fun ae () real)
(declare-fun i () real)
(declare-fun j () real)
(declare-fun o () real)
(declare-fun r  () real)
(declare-fun ag () real)
(declare-fun m () real)
(declare-fun p () real)
(declare-fun q () real)
(declare-fun ai () real)
(declare-fun aj () real)
(declare-fun ak () real)
(declare-fun al () real)
(declare-fun an () real)
(declare-fun ao  () real)
(assert (not (exists ((aq real)) (=> (and (or (and (= r (div 65 a (div 3 aa aq))) (= o 0.0ae 2.0 ad) (<= 0.0 f (- 4 h )) (<= 0.0 n (- h )  0.0 g)) (< 0.0  ak)) (> 0.0 ag)) (or (= (- d ) m) (=> (<= 0.0 k) (=> (<= 0.0 aq k) (and (<=  o (- ak)) (<= 0.0 (mod (* g aq) (/ 81 b al))) (<= (/ (* g aq) (- b al)) (-  ak)) (<= (+ aq ) ag))) (= (/ 71 c p) 2.0)))))))
(assert (=> (and (xor (and (or (=> (xor (>= 0.0  ab ) (<= 0 an)) (<= 0.0 (+ j) ao))) (= ai q (- n))) (< (- a l) 0)) (= aj 2.0) (< (+ (- 2 e m) ) 0.0 (- c i))) (< 0.0 ao)))
(assert (= b c (+ i p)))
(check-sat)