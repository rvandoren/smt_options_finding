(set-option :produce-unsat-assumptions true)
(declare-fun start!368 () bool)
(assert start!368)
(declare-fun mapisempty!1002 () bool)
(declare-fun mapres!1004 () bool)
(assert (=> mapisempty!1002 mapres!1004))
(declare-fun b!5518 () bool)
(declare-fun e!2952 () bool)
(declare-datatypes () ((k!535 (k!536 (val!494 int)))))
(declare-datatypes () ((t!589 (t!590 (val!495 int)))))
(declare-datatypes () ((tuple2!494 (tuple2!495 (_1!455 k!535) (_2!455 t!589)))))
(declare-datatypes () ((array!900 (array!901 (arr!261 (array (_ bitvec 32) tuple2!494)) (size!262 (_ bitvec 32))))))
(declare-datatypes () ((totalorder!234 (totalorderext!232 (__x!234 int)))))
(declare-datatypes () ((sortedarray!267 (sortedarray!268 (array!902 array!900) (order!380 totalorder!234)))))
(declare-datatypes () ((unit!736 (unit!737))))
(declare-datatypes () ((tuple5!74 (tuple5!75 (_1!456 unit!736) (_2!456 array!900) (_3!208 sortedarray!267) (_4!37 (_ bitvec 32)) (_5!37 (_ bitvec 32))))))
(declare-fun empty!113 () tuple5!74)
(declare-fun e!2970 () bool)
(declare-fun array_inv!249 (array!900) bool)
(assert (=> b!5518 (= e!2952 (and (array_inv!249 (array!902 (_3!208 empty!113))) e!2970))))
(declare-fun lt!1052 () (_ bitvec 32))
(declare-fun thiss!159 () sortedarray!267)
(declare-fun b!5519 () bool)
(declare-fun e!2953 () tuple5!74)
(declare-fun elemref!75 () array!900)
(declare-fun lt!1055 () (_ bitvec 32))
(declare-fun unit!738 () unit!736)
(assert (=> b!5519 (= e!2953 (tuple5!75 unit!738 elemref!75 thiss!159 lt!1052 lt!1055))))
(declare-fun b!5520 () bool)
(declare-fun e!2965 () bool)
(declare-fun e!2954 () bool)
(assert (=> b!5520 (= e!2965 (and (array_inv!249 (array!902 thiss!159)) e!2954))))
(declare-fun b!5521 () bool)
(declare-fun e!2950 () bool)
(declare-fun e!2962 () bool)
(assert (=> b!5521 (= e!2950 e!2962)))
(declare-fun res!4116 () bool)
(assert (=> b!5521 (=> (not res!4116) (not e!2962))))
(declare-datatypes () ((tuple3!342 (tuple3!343 (_1!457 unit!736) (_2!457 sortedarray!267) (_3!209 array!900)))))
(declare-datatypes () ((controlflow!125 (return!124 (value!327 tuple3!342)) (proceed!124 (value!328 unit!736)))))
(declare-fun e!2963 () controlflow!125)
(get-info :version)
(assert (=> b!5521 (= res!4116 (not ((_ is return!124) e!2963)))))
(declare-fun lt!1051 () (_ bitvec 32))
(declare-fun c!408 () bool)
(declare-fun leq!227 (totalorder!234 k!535 k!535) bool)
(assert (=> b!5521 (= c!408 (leq!227 (order!380 thiss!159) (_1!455 (select (arr!261 (array!902 thiss!159)) (bvsub lt!1051 #b00000000000000000000000000000001))) (_1!455 (select (arr!261 elemref!75) #b00000000000000000000000000000000))))))
(assert (=> b!5521 (= lt!1055 (size!262 (array!902 thiss!159)))))
(assert (=> b!5521 (= lt!1052 #b11111111111111111111111111111111)))
(assert (=> b!5521 (= lt!1051 (size!262 (array!902 thiss!159)))))
(declare-fun b!5522 () bool)
(declare-fun e!2969 () bool)
(assert (=> b!5522 (= e!2962 e!2969)))
(declare-fun res!4107 () bool)
(assert (=> b!5522 (=> (not res!4107) (not e!2969))))
(declare-fun thiss!160 () sortedarray!267)
(declare-fun l!140 () (_ bitvec 32))
(declare-fun elemref!76 () array!900)
(declare-fun h!143 () (_ bitvec 32))
(declare-fun lt!1054 () tuple5!74)
(declare-fun i!249 () (_ bitvec 32))
(assert (=> b!5522 (= res!4107 (and (bvslt (_5!37 lt!1054) lt!1051) (= (size!262 elemref!76) #b00000000000000000000000000000001) (bvsle #b00000000000000000000000000000000 h!143) (bvslt h!143 (size!262 (array!902 thiss!160))) (bvsle #b00000000000000000000000000000000 i!249) (bvsle i!249 (bvsub lt!1051 #b00000000000000000000000000000001)) (= (size!262 (array!902 thiss!160)) lt!1051) (bvsge i!249 h!143) (= l!140 (bvsub h!143 #b00000000000000000000000000000001))))))
(declare-fun lt!1057 () unit!736)
(declare-fun e!2960 () unit!736)
(assert (=> b!5522 (= lt!1057 e!2960)))
(declare-fun c!410 () bool)
(assert (=> b!5522 (= c!410 (= (_5!37 lt!1054) lt!1051))))
(assert (=> b!5522 (= lt!1054 e!2953)))
(declare-fun c!409 () bool)
(assert (=> b!5522 (= c!409 (not (= (bvadd lt!1052 #b00000000000000000000000000000001) lt!1055)))))
(declare-fun mapisempty!1003 () bool)
(declare-fun mapres!1006 () bool)
(assert (=> mapisempty!1003 mapres!1006))
(declare-fun b!5523 () bool)
(declare-fun tp_is_empty!451 () bool)
(declare-fun e!2955 () bool)
(declare-fun tp_is_empty!449 () bool)
(declare-fun mapres!1007 () bool)
(assert (=> b!5523 (= e!2955 (and tp_is_empty!449 tp_is_empty!451 mapres!1007))))
(declare-fun condmapempty!1005 () bool)
(declare-fun mapdefault!1007 () tuple2!494)
(assert (=> b!5523 (= condmapempty!1005 (= (arr!261 elemref!76) ((as const (array (_ bitvec 32) tuple2!494)) mapdefault!1007)))))
(declare-fun b!5524 () bool)
(declare-fun e!2956 () bool)
(assert (=> b!5524 (= e!2956 (leq!227 (order!380 thiss!160) (_1!455 (select (arr!261 (array!902 thiss!160)) l!140)) (_1!455 (select (arr!261 elemref!76) #b00000000000000000000000000000000))))))
(declare-fun b!5525 () bool)
(declare-fun unit!739 () unit!736)
(assert (=> b!5525 (= e!2960 unit!739)))
(declare-fun lt!1053 () unit!736)
(declare-fun getsmaller!18 (array!900 totalorder!234 k!535 (_ bitvec 32) (_ bitvec 32)) unit!736)
(assert (=> b!5525 (= lt!1053 (getsmaller!18 (array!902 (_3!208 lt!1054)) (order!380 (_3!208 lt!1054)) (_1!455 (select (arr!261 (_2!456 lt!1054)) #b00000000000000000000000000000000)) (_4!37 lt!1054) (bvsub lt!1051 #b00000000000000000000000000000001)))))
(declare-fun b!5526 () bool)
(declare-fun res!4123 () bool)
(declare-fun e!2949 () bool)
(assert (=> b!5526 (=> (not res!4123) (not e!2949))))
(declare-fun lt!1061 () tuple5!74)
(declare-fun allsmaller!120 (array!900 totalorder!234 k!535 (_ bitvec 32)) bool)
(assert (=> b!5526 (= res!4123 (allsmaller!120 (array!902 (_3!208 lt!1061)) (order!380 (_3!208 lt!1061)) (_1!455 (select (arr!261 (_2!456 lt!1061)) #b00000000000000000000000000000000)) (_4!37 lt!1061)))))
(declare-fun b!5527 () bool)
(declare-fun e!2951 () bool)
(declare-fun mapres!1002 () bool)
(assert (=> b!5527 (= e!2951 (and tp_is_empty!449 tp_is_empty!451 mapres!1002))))
(declare-fun condmapempty!1004 () bool)
(declare-fun mapdefault!1005 () tuple2!494)
(assert (=> b!5527 (= condmapempty!1004 (= (arr!261 (array!902 thiss!160)) ((as const (array (_ bitvec 32) tuple2!494)) mapdefault!1005)))))
(declare-fun mapres!1003 () bool)
(declare-fun mapnonempty!1002 () bool)
(declare-fun tp!1006 () bool)
(assert (=> mapnonempty!1002 (= mapres!1003 (and tp!1006 tp_is_empty!449 tp_is_empty!451))))
(declare-fun maprest!1005 () (array (_ bitvec 32) tuple2!494))
(declare-fun mapkey!1007 () (_ bitvec 32))
(declare-fun mapvalue!1003 () tuple2!494)
(assert (=> mapnonempty!1002 (= (arr!261 (_2!456 empty!113)) (store maprest!1005 mapkey!1007 mapvalue!1003))))
(declare-fun b!5528 () bool)
(assert (=> b!5528 (= e!2949 (= (bvadd (_4!37 lt!1061) #b00000000000000000000000000000001) (_5!37 lt!1061)))))
(declare-fun b!5529 () bool)
(assert (=> b!5529 (= e!2953 lt!1061)))
(assert (=> b!5529 e!2949))
(declare-fun res!4103 () bool)
(assert (=> b!5529 (=> (not res!4103) (not e!2949))))
(declare-fun lt!1062 () (_ bitvec 32))
(assert (=> b!5529 (= res!4103 (and (= (size!262 (_2!456 lt!1061)) #b00000000000000000000000000000001) (bvsle #b11111111111111111111111111111111 (_4!37 lt!1061)) (bvslt (_4!37 lt!1061) (_5!37 lt!1061)) (bvsle (_5!37 lt!1061) lt!1062) (= (size!262 (array!902 (_3!208 lt!1061))) lt!1062)))))
(assert (=> b!5529 (= lt!1061 empty!113)))
(assert (=> b!5529 true))
(declare-fun e!2957 () bool)
(declare-fun inv!141 (sortedarray!267) bool)
(assert (=> b!5529 (and (array_inv!249 (_2!456 empty!113)) e!2957 (inv!141 (_3!208 empty!113)) e!2952)))
(assert (=> b!5529 (= lt!1062 (size!262 (array!902 thiss!159)))))
(declare-fun tp!1007 () bool)
(declare-fun mapnonempty!1003 () bool)
(assert (=> mapnonempty!1003 (= mapres!1007 (and tp!1007 tp_is_empty!449 tp_is_empty!451))))
(declare-fun mapvalue!1002 () tuple2!494)
(declare-fun mapkey!1006 () (_ bitvec 32))
(declare-fun maprest!1003 () (array (_ bitvec 32) tuple2!494))
(assert (=> mapnonempty!1003 (= (arr!261 elemref!76) (store maprest!1003 mapkey!1006 mapvalue!1002))))
(declare-fun b!5530 () bool)
(declare-fun res!4121 () bool)
(assert (=> b!5530 (=> (not res!4121) (not e!2950))))
(declare-fun issorted!137 (array!900 totalorder!234) bool)
(assert (=> b!5530 (= res!4121 (issorted!137 (array!902 thiss!159) (order!380 thiss!159)))))
(declare-fun tp!1003 () bool)
(declare-fun mapnonempty!1004 () bool)
(assert (=> mapnonempty!1004 (= mapres!1004 (and tp!1003 tp_is_empty!449 tp_is_empty!451))))
(declare-fun mapvalue!1005 () tuple2!494)
(declare-fun maprest!1004 () (array (_ bitvec 32) tuple2!494))
(declare-fun mapkey!1003 () (_ bitvec 32))
(assert (=> mapnonempty!1004 (= (arr!261 (array!902 (_3!208 empty!113))) (store maprest!1004 mapkey!1003 mapvalue!1005))))
(declare-fun b!5531 () bool)
(declare-fun res!4115 () bool)
(assert (=> b!5531 (=> (not res!4115) (not e!2969))))
(assert (=> b!5531 (= res!4115 e!2956)))
(declare-fun res!4110 () bool)
(assert (=> b!5531 (=> res!4110 e!2956)))
(assert (=> b!5531 (= res!4110 (bvslt l!140 #b00000000000000000000000000000000))))
(declare-fun b!5532 () bool)
(declare-fun res!4118 () bool)
(assert (=> b!5532 (=> (not res!4118) (not e!2950))))
(assert (=> b!5532 (= res!4118 (= (size!262 elemref!75) #b00000000000000000000000000000001))))
(declare-fun b!5533 () bool)
(assert (=> b!5533 (= e!2970 (and tp_is_empty!449 tp_is_empty!451 mapres!1004))))
(declare-fun condmapempty!1006 () bool)
(declare-fun mapdefault!1002 () tuple2!494)
(assert (=> b!5533 (= condmapempty!1006 (= (arr!261 (array!902 (_3!208 empty!113))) ((as const (array (_ bitvec 32) tuple2!494)) mapdefault!1002)))))
(declare-fun b!5534 () bool)
(declare-fun e!2967 () bool)
(assert (=> b!5534 (= e!2967 (or (bvsgt #b00000000000000000000000000000000 (bvadd i!249 #b00000000000000000000000000000010)) (bvsgt #b00000000000000000000000000000000 (bvsub (size!262 (array!902 thiss!160)) #b00000000000000000000000000000001))))))
(declare-fun b!5535 () bool)
(declare-fun res!4109 () bool)
(assert (=> b!5535 (=> (not res!4109) (not e!2949))))
(declare-fun alllarger!116 (array!900 totalorder!234 k!535 (_ bitvec 32)) bool)
(assert (=> b!5535 (= res!4109 (alllarger!116 (array!902 (_3!208 lt!1061)) (order!380 (_3!208 lt!1061)) (_1!455 (select (arr!261 (_2!456 lt!1061)) #b00000000000000000000000000000000)) (_5!37 lt!1061)))))
(declare-fun b!5536 () bool)
(declare-fun e!2966 () unit!736)
(declare-fun unit!740 () unit!736)
(assert (=> b!5536 (= e!2966 unit!740)))
(declare-fun b!5537 () bool)
(declare-fun unit!741 () unit!736)
(assert (=> b!5537 (= e!2966 unit!741)))
(declare-fun lt!1056 () unit!736)
(declare-fun sortedrangepair!28 (array!900 totalorder!234 (_ bitvec 32) (_ bitvec 32) (_ bitvec 32)) unit!736)
(assert (=> b!5537 (= lt!1056 (sortedrangepair!28 (array!902 thiss!160) (order!380 thiss!160) (bvsub i!249 #b00000000000000000000000000000010) #b00000000000000000000000000000000 i!249))))
(declare-fun b!5538 () bool)
(declare-fun res!4104 () bool)
(assert (=> b!5538 (=> (not res!4104) (not e!2969))))
(declare-fun issortedrange!130 (array!900 totalorder!234 (_ bitvec 32) (_ bitvec 32)) bool)
(assert (=> b!5538 (= res!4104 (issortedrange!130 (array!902 thiss!160) (order!380 thiss!160) (bvadd i!249 #b00000000000000000000000000000001) (bvsub (size!262 (array!902 thiss!160)) #b00000000000000000000000000000001)))))
(declare-fun mapisempty!1004 () bool)
(assert (=> mapisempty!1004 mapres!1002))
(declare-fun b!5539 () bool)
(declare-fun e!2958 () bool)
(assert (=> b!5539 (= e!2958 (and (array_inv!249 (array!902 thiss!160)) e!2951))))
(declare-fun tp!1002 () bool)
(declare-fun mapnonempty!1005 () bool)
(assert (=> mapnonempty!1005 (= mapres!1002 (and tp!1002 tp_is_empty!449 tp_is_empty!451))))
(declare-fun maprest!1002 () (array (_ bitvec 32) tuple2!494))
(declare-fun mapvalue!1006 () tuple2!494)
(declare-fun mapkey!1004 () (_ bitvec 32))
(assert (=> mapnonempty!1005 (= (arr!261 (array!902 thiss!160)) (store maprest!1002 mapkey!1004 mapvalue!1006))))
(declare-fun mapnonempty!1006 () bool)
(declare-fun tp!1005 () bool)
(assert (=> mapnonempty!1006 (= mapres!1006 (and tp!1005 tp_is_empty!449 tp_is_empty!451))))
(declare-fun maprest!1007 () (array (_ bitvec 32) tuple2!494))
(declare-fun mapkey!1005 () (_ bitvec 32))
(declare-fun mapvalue!1007 () tuple2!494)
(assert (=> mapnonempty!1006 (= (arr!261 (array!902 thiss!159)) (store maprest!1007 mapkey!1005 mapvalue!1007))))
(declare-fun b!5540 () bool)
(declare-fun res!4108 () bool)
(assert (=> b!5540 (=> (not res!4108) (not e!2969))))
(declare-fun e!2961 () bool)
(assert (=> b!5540 (= res!4108 e!2961)))
(declare-fun res!4119 () bool)
(assert (=> b!5540 (=> res!4119 e!2961)))
(assert (=> b!5540 (= res!4119 (or (not (= i!249 h!143)) (bvsge h!143 (bvsub lt!1051 #b00000000000000000000000000000001))))))
(declare-fun b!5541 () bool)
(declare-fun unit!742 () unit!736)
(assert (=> b!5541 (= e!2963 (return!124 (tuple3!343 unit!742 thiss!159 elemref!75)))))
(declare-fun mapisempty!1005 () bool)
(assert (=> mapisempty!1005 mapres!1007))
(declare-fun b!5542 () bool)
(assert (=> b!5542 (= e!2969 e!2967)))
(declare-fun res!4114 () bool)
(assert (=> b!5542 (=> (not res!4114) (not e!2967))))
(assert (=> b!5542 (= res!4114 (issortedrange!130 (array!901 (store (store (arr!261 (array!902 thiss!160)) i!249 (select (arr!261 (array!902 thiss!160)) (bvsub i!249 #b00000000000000000000000000000001))) (bvsub i!249 #b00000000000000000000000000000001) (select (arr!261 (array!902 thiss!160)) i!249)) (size!262 (array!902 thiss!160))) (order!380 thiss!160) (bvadd i!249 #b00000000000000000000000000000001) (bvsub (size!262 (array!902 thiss!160)) #b00000000000000000000000000000001)))))
(declare-fun lt!1063 () unit!736)
(declare-fun empty!112 () unit!736)
(assert (=> b!5542 (= lt!1063 empty!112)))
(assert (=> b!5542 true))
(declare-fun lt!1059 () (_ bitvec 32))
(assert (=> b!5542 (issortedrange!130 (array!901 (store (store (arr!261 (array!902 thiss!160)) i!249 (select (arr!261 (array!902 thiss!160)) lt!1059)) lt!1059 (select (arr!261 (array!902 thiss!160)) i!249)) (size!262 (array!902 thiss!160))) (order!380 thiss!160) (bvadd i!249 #b00000000000000000000000000000001) (bvsub (size!262 (array!902 thiss!160)) #b00000000000000000000000000000001))))
(assert (=> b!5542 (= lt!1059 (bvsub i!249 #b00000000000000000000000000000001))))
(declare-fun lt!1060 () unit!736)
(assert (=> b!5542 (= lt!1060 e!2966)))
(declare-fun c!411 () bool)
(assert (=> b!5542 (= c!411 (bvslt #b00000000000000000000000000000001 i!249))))
(declare-fun lt!1058 () unit!736)
(declare-fun issortedrangeswap!12 (array!900 totalorder!234 (_ bitvec 32) (_ bitvec 32)) unit!736)
(assert (=> b!5542 (= lt!1058 (issortedrangeswap!12 (array!902 thiss!160) (order!380 thiss!160) #b00000000000000000000000000000000 i!249))))
(declare-fun b!5543 () bool)
(declare-fun e!2959 () bool)
(assert (=> b!5543 (= e!2959 (leq!227 (order!380 thiss!160) (_1!455 (select (arr!261 (array!902 thiss!160)) (bvsub i!249 #b00000000000000000000000000000001))) (_1!455 (select (arr!261 (array!902 thiss!160)) (bvadd i!249 #b00000000000000000000000000000001)))))))
(declare-fun e!2964 () bool)
(declare-fun mapres!1005 () bool)
(declare-fun b!5544 () bool)
(assert (=> b!5544 (= e!2964 (and tp_is_empty!449 tp_is_empty!451 mapres!1005))))
(declare-fun condmapempty!1002 () bool)
(declare-fun mapdefault!1006 () tuple2!494)
(assert (=> b!5544 (= condmapempty!1002 (= (arr!261 elemref!75) ((as const (array (_ bitvec 32) tuple2!494)) mapdefault!1006)))))
(declare-fun mapnonempty!1007 () bool)
(declare-fun tp!1004 () bool)
(assert (=> mapnonempty!1007 (= mapres!1005 (and tp!1004 tp_is_empty!449 tp_is_empty!451))))
(declare-fun mapkey!1002 () (_ bitvec 32))
(declare-fun mapvalue!1004 () tuple2!494)
(declare-fun maprest!1006 () (array (_ bitvec 32) tuple2!494))
(assert (=> mapnonempty!1007 (= (arr!261 elemref!75) (store maprest!1006 mapkey!1002 mapvalue!1004))))
(declare-fun b!5545 () bool)
(declare-fun res!4112 () bool)
(assert (=> b!5545 (=> (not res!4112) (not e!2949))))
(assert (=> b!5545 (= res!4112 (not (leq!227 (order!380 (_3!208 lt!1061)) (_1!455 (select (arr!261 (array!902 (_3!208 lt!1061))) (bvsub lt!1062 #b00000000000000000000000000000001))) (_1!455 (select (arr!261 (_2!456 lt!1061)) #b00000000000000000000000000000000)))))))
(declare-fun b!5546 () bool)
(assert (=> b!5546 (= e!2954 (and tp_is_empty!449 tp_is_empty!451 mapres!1006))))
(declare-fun condmapempty!1007 () bool)
(declare-fun mapdefault!1003 () tuple2!494)
(assert (=> b!5546 (= condmapempty!1007 (= (arr!261 (array!902 thiss!159)) ((as const (array (_ bitvec 32) tuple2!494)) mapdefault!1003)))))
(declare-fun b!5547 () bool)
(declare-fun res!4117 () bool)
(assert (=> b!5547 (=> (not res!4117) (not e!2969))))
(assert (=> b!5547 (= res!4117 e!2959)))
(declare-fun res!4120 () bool)
(assert (=> b!5547 (=> res!4120 e!2959)))
(assert (=> b!5547 (= res!4120 (or (= i!249 (bvsub lt!1051 #b00000000000000000000000000000001)) (= i!249 #b00000000000000000000000000000000)))))
(declare-fun mapisempty!1006 () bool)
(assert (=> mapisempty!1006 mapres!1005))
(declare-fun b!5548 () bool)
(declare-fun res!4105 () bool)
(assert (=> b!5548 (=> (not res!4105) (not e!2949))))
(assert (=> b!5548 (= res!4105 (issorted!137 (array!902 (_3!208 lt!1061)) (order!380 (_3!208 lt!1061))))))
(declare-fun b!5549 () bool)
(declare-fun res!4106 () bool)
(assert (=> b!5549 (=> (not res!4106) (not e!2969))))
(assert (=> b!5549 (= res!4106 (issortedrange!130 (array!902 thiss!160) (order!380 thiss!160) #b00000000000000000000000000000000 i!249))))
(declare-fun b!5550 () bool)
(assert (=> b!5550 (= e!2961 (leq!227 (order!380 thiss!160) (_1!455 (select (arr!261 elemref!76) #b00000000000000000000000000000000)) (_1!455 (select (arr!261 (array!902 thiss!160)) (bvadd h!143 #b00000000000000000000000000000001)))))))
(declare-fun mapisempty!1007 () bool)
(assert (=> mapisempty!1007 mapres!1003))
(declare-fun b!5551 () bool)
(declare-fun res!4111 () bool)
(assert (=> b!5551 (=> (not res!4111) (not e!2969))))
(assert (=> b!5551 (= res!4111 (bvsgt i!249 h!143))))
(declare-fun b!5552 () bool)
(declare-fun res!4124 () bool)
(assert (=> b!5552 (=> (not res!4124) (not e!2969))))
(declare-fun e!2968 () bool)
(assert (=> b!5552 (= res!4124 e!2968)))
(declare-fun res!4113 () bool)
(assert (=> b!5552 (=> res!4113 e!2968)))
(assert (=> b!5552 (= res!4113 (bvsle i!249 h!143))))
(declare-fun b!5553 () bool)
(declare-fun unit!743 () unit!736)
(assert (=> b!5553 (= e!2963 (proceed!124 unit!743))))
(declare-fun b!5554 () bool)
(assert (=> b!5554 (= e!2968 (leq!227 (order!380 thiss!160) (_1!455 (select (arr!261 elemref!76) #b00000000000000000000000000000000)) (_1!455 (select (arr!261 (array!902 thiss!160)) h!143))))))
(declare-fun res!4122 () bool)
(assert (=> start!368 (=> (not res!4122) (not e!2950))))
(assert (=> start!368 (= res!4122 (bvsgt (size!262 (array!902 thiss!159)) #b00000000000000000000000000000000))))
(assert (=> start!368 e!2950))
(assert (=> start!368 (and (inv!141 thiss!160) e!2958)))
(assert (=> start!368 true))
(assert (=> start!368 (and (array_inv!249 elemref!76) e!2955)))
(assert (=> start!368 (and (inv!141 thiss!159) e!2965)))
(assert (=> start!368 (and (array_inv!249 elemref!75) e!2964)))
(declare-fun b!5555 () bool)
(assert (=> b!5555 (= e!2957 (and tp_is_empty!449 tp_is_empty!451 mapres!1003))))
(declare-fun condmapempty!1003 () bool)
(declare-fun mapdefault!1004 () tuple2!494)
(assert (=> b!5555 (= condmapempty!1003 (= (arr!261 (_2!456 empty!113)) ((as const (array (_ bitvec 32) tuple2!494)) mapdefault!1004)))))
(declare-fun b!5556 () bool)
(declare-fun unit!744 () unit!736)
(assert (=> b!5556 (= e!2960 unit!744)))
(assert (= (and start!368 res!4122) b!5530))
(assert (= (and b!5530 res!4121) b!5532))
(assert (= (and b!5532 res!4118) b!5521))
(assert (= (and b!5521 c!408) b!5541))
(assert (= (and b!5521 (not c!408)) b!5553))
(assert (= (and b!5521 res!4116) b!5522))
(assert (= (and b!5555 condmapempty!1003) mapisempty!1007))
(assert (= (and b!5555 (not condmapempty!1003)) mapnonempty!1002))
(assert (= b!5529 b!5555))
(assert (= (and b!5533 condmapempty!1006) mapisempty!1002))
(assert (= (and b!5533 (not condmapempty!1006)) mapnonempty!1004))
(assert (= b!5518 b!5533))
(assert (= b!5529 b!5518))
(assert (= (and b!5529 res!4103) b!5548))
(assert (= (and b!5548 res!4105) b!5526))
(assert (= (and b!5526 res!4123) b!5535))
(assert (= (and b!5535 res!4109) b!5545))
(assert (= (and b!5545 res!4112) b!5528))
(assert (= (and b!5522 c!409) b!5529))
(assert (= (and b!5522 (not c!409)) b!5519))
(assert (= (and b!5522 c!410) b!5525))
(assert (= (and b!5522 (not c!410)) b!5556))
(assert (= (and b!5522 res!4107) b!5549))
(assert (= (and b!5549 res!4106) b!5547))
(assert (= (and b!5547 (not res!4120)) b!5543))
(assert (= (and b!5547 res!4117) b!5538))
(assert (= (and b!5538 res!4104) b!5531))
(assert (= (and b!5531 (not res!4110)) b!5524))
(assert (= (and b!5531 res!4115) b!5540))
(assert (= (and b!5540 (not res!4119)) b!5550))
(assert (= (and b!5540 res!4108) b!5552))
(assert (= (and b!5552 (not res!4113)) b!5554))
(assert (= (and b!5552 res!4124) b!5551))
(assert (= (and b!5551 res!4111) b!5542))
(assert (= (and b!5542 c!411) b!5537))
(assert (= (and b!5542 (not c!411)) b!5536))
(assert (= (and b!5542 res!4114) b!5534))
(assert (= (and b!5527 condmapempty!1004) mapisempty!1004))
(assert (= (and b!5527 (not condmapempty!1004)) mapnonempty!1005))
(assert (= b!5539 b!5527))
(assert (= start!368 b!5539))
(assert (= (and b!5523 condmapempty!1005) mapisempty!1005))
(assert (= (and b!5523 (not condmapempty!1005)) mapnonempty!1003))
(assert (= start!368 b!5523))
(assert (= (and b!5546 condmapempty!1007) mapisempty!1003))
(assert (= (and b!5546 (not condmapempty!1007)) mapnonempty!1006))
(assert (= b!5520 b!5546))
(assert (= start!368 b!5520))
(assert (= (and b!5544 condmapempty!1002) mapisempty!1006))
(assert (= (and b!5544 (not condmapempty!1002)) mapnonempty!1007))
(assert (= start!368 b!5544))
(declare-fun m!4224 () bool)
(assert (=> b!5521 m!4224))
(declare-fun m!4226 () bool)
(assert (=> b!5521 m!4226))
(declare-fun m!4228 () bool)
(assert (=> b!5521 m!4228))
(declare-fun m!4230 () bool)
(assert (=> b!5535 m!4230))
(declare-fun m!4232 () bool)
(assert (=> b!5535 m!4232))
(declare-fun m!4234 () bool)
(assert (=> b!5524 m!4234))
(declare-fun m!4236 () bool)
(assert (=> b!5524 m!4236))
(declare-fun m!4238 () bool)
(assert (=> b!5524 m!4238))
(declare-fun m!4240 () bool)
(assert (=> mapnonempty!1003 m!4240))
(declare-fun m!4242 () bool)
(assert (=> b!5545 m!4242))
(assert (=> b!5545 m!4230))
(declare-fun m!4244 () bool)
(assert (=> b!5545 m!4244))
(declare-fun m!4246 () bool)
(assert (=> b!5543 m!4246))
(declare-fun m!4248 () bool)
(assert (=> b!5543 m!4248))
(declare-fun m!4250 () bool)
(assert (=> b!5543 m!4250))
(declare-fun m!4252 () bool)
(assert (=> b!5520 m!4252))
(declare-fun m!4254 () bool)
(assert (=> b!5537 m!4254))
(declare-fun m!4256 () bool)
(assert (=> b!5548 m!4256))
(declare-fun m!4258 () bool)
(assert (=> mapnonempty!1007 m!4258))
(declare-fun m!4260 () bool)
(assert (=> mapnonempty!1006 m!4260))
(declare-fun m!4262 () bool)
(assert (=> b!5529 m!4262))
(declare-fun m!4264 () bool)
(assert (=> b!5529 m!4264))
(declare-fun m!4266 () bool)
(assert (=> b!5539 m!4266))
(declare-fun m!4268 () bool)
(assert (=> mapnonempty!1002 m!4268))
(declare-fun m!4270 () bool)
(assert (=> b!5530 m!4270))
(declare-fun m!4272 () bool)
(assert (=> b!5518 m!4272))
(declare-fun m!4274 () bool)
(assert (=> mapnonempty!1004 m!4274))
(assert (=> b!5542 m!4246))
(declare-fun m!4276 () bool)
(assert (=> b!5542 m!4276))
(declare-fun m!4278 () bool)
(assert (=> b!5542 m!4278))
(declare-fun m!4280 () bool)
(assert (=> b!5542 m!4280))
(declare-fun m!4282 () bool)
(assert (=> b!5542 m!4282))
(declare-fun m!4284 () bool)
(assert (=> b!5542 m!4284))
(declare-fun m!4286 () bool)
(assert (=> b!5542 m!4286))
(declare-fun m!4288 () bool)
(assert (=> b!5542 m!4288))
(declare-fun m!4290 () bool)
(assert (=> b!5542 m!4290))
(declare-fun m!4292 () bool)
(assert (=> b!5542 m!4292))
(assert (=> b!5526 m!4230))
(declare-fun m!4294 () bool)
(assert (=> b!5526 m!4294))
(declare-fun m!4296 () bool)
(assert (=> b!5525 m!4296))
(declare-fun m!4298 () bool)
(assert (=> b!5525 m!4298))
(assert (=> b!5554 m!4236))
(declare-fun m!4300 () bool)
(assert (=> b!5554 m!4300))
(declare-fun m!4302 () bool)
(assert (=> b!5554 m!4302))
(declare-fun m!4304 () bool)
(assert (=> b!5538 m!4304))
(declare-fun m!4306 () bool)
(assert (=> b!5549 m!4306))
(assert (=> b!5550 m!4236))
(declare-fun m!4308 () bool)
(assert (=> b!5550 m!4308))
(declare-fun m!4310 () bool)
(assert (=> b!5550 m!4310))
(declare-fun m!4312 () bool)
(assert (=> start!368 m!4312))
(declare-fun m!4314 () bool)
(assert (=> start!368 m!4314))
(declare-fun m!4316 () bool)
(assert (=> start!368 m!4316))
(declare-fun m!4318 () bool)
(assert (=> start!368 m!4318))
(declare-fun m!4320 () bool)
(assert (=> mapnonempty!1005 m!4320))
(check-sat)