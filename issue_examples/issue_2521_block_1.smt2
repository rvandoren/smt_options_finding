(set-option :produce-models true)
(set-logic all)
(define-fun s1 () int 0)
(define-fun s5 () int 1)
(define-fun s17 () int 4)
(define-fun s3 () (seq int) (seq.++ (seq.unit 1) (seq.unit 2) (seq.unit 3)))
(define-fun s7 () (seq int) (seq.++ (seq.unit 4) (seq.unit 5) (seq.unit 6) (seq.unit 7)))
(define-fun s15 () (seq (seq int)) (seq.++ (seq.unit (seq.++ (seq.unit 8) (seq.unit 9) (seq.unit 10))) (seq.unit (seq.++ (seq.unit 11) (seq.unit 12) (seq.unit 13)))))
(declare-fun s0 () (seq (seq int)))
(define-fun s2 () (seq int) (seq.nth s0 s1))
(define-fun s4 () bool (= s2 s3))
(define-fun s6 () (seq int) (seq.nth s0 s5))
(define-fun s8 () bool (= s6 s7))
(define-fun s9 () int (seq.len s0))
(define-fun s10 () int (- s9 s5))
(define-fun s11 () (seq (seq int)) (seq.extract s0 s5 s10))
(define-fun s12 () int (seq.len s11))
(define-fun s13 () int (- s12 s5))
(define-fun s14 () (seq (seq int)) (seq.extract s11 s5 s13))
(define-fun s16 () bool (= s14 s15))
(define-fun s18 () bool (= s9 s17))
(assert s4)
(assert s8)
(assert s16)
(assert s18)
(check-sat)