(set-logic horn)
(set-option :produce-proofs true)
(declare-fun le (int int) bool)
(declare-fun gt (int int) bool)
(declare-fun diseqlist (int int) bool)
(declare-fun insert (int int int) bool)
(declare-fun isort (int int) bool)
(declare-fun flatten (int int int) bool)
(declare-fun add (int int int) bool)
(declare-fun totree (int int) bool)
(declare-fun tsort (int int) bool)
(assert (forall ((x int))
(insert 0 x 0)))
(assert (forall ((x int))
(add 0 x 0)))
(assert (forall ((x int))
(flatten x 0 x)))
(assert (forall ((x int))
(gt (+ 1 x) 0)))
(assert (forall ((x int))
(le 0 x)))
(assert (forall ((x int) (y int))
(=> (gt x y) (gt (+ 1 x) (+ 1 y)))))
(assert (forall ((x int) (y int))
(=> (le x y) (le (+ 1 x) (+ 1 y)))))
(assert (diseqlist 0 0))
(assert (forall ((x int) (y int) (z int))
(=> (and (totree y z) (flatten x y 0)) (tsort x z))))
(assert (forall ((z int) (x int))
(=> (le x z) (insert 0 x 0))))
(assert (forall ((x int) (z int) (xs int) (y int))
(=> (and (gt y z) (insert x y xs)) (insert 0 y 0))))
(assert (forall ((x int) (y int) (z int) (xs int))
(=> (and (isort y xs) (insert x z y)) (isort x 0))))
(assert (forall ((x int) (v int) (y int) (xs int))
(=> (and (totree v xs) (add x y v)) (totree x 0))))
(assert (forall ((x int) (y int))
(=> (distinct x y) (diseqlist 0 0))))
(assert (forall ((x int) (y int))
(=> (diseqlist x y) (diseqlist 0 0))))
(assert (forall ((x int) (p int) (z int) (q int) (x int))
(=> (and (le x z) (add x x p)) (add 0 x 0))))
(assert (forall ((y int) (p int) (z int) (q int) (x int))
(=> (and (gt x z) (add y x q)) (add 0 x 0))))
(assert (forall ((x int) (y int) (p int) (q int) (y int))
(=> (and (flatten y q y) (flatten x p 0)) (flatten x 0 y))))
(assert (isort 0 0))
(assert (totree 0 0))
(assert (forall ((x int) (y int) (xs int))
(=> (and (diseqlist x y) (tsort x xs) (isort y xs)) false)))
(check-sat)
(get-proof)