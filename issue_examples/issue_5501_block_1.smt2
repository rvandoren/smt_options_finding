(set-option :produce-unsat-assumptions true)
(declare-datatypes () ((k (mkk (x int)))))
(declare-datatypes () ((t (mkt (y int)))))
(declare-datatypes () ((tp (mktp (fst k) (snd t)))))
(declare-datatypes () ((customarray (mkcustomarray (aa (array (_ bitvec 32) tp)) (sz (_ bitvec 32))))))
(declare-datatypes () ((order (mkorder (leq int)))))
(declare-fun ar () customarray)
(declare-fun i () (_ bitvec 32))
(declare-fun order () order)
(declare-fun j () (_ bitvec 32))
(declare-fun k () (_ bitvec 32))
(declare-fun l () (_ bitvec 32))
(declare-fun f (customarray order (_ bitvec 32) (_ bitvec 32)) bool)
(declare-fun rr () bool)
(declare-fun e2 () bool)
(declare-fun e3 () bool)
(declare-fun r6 () bool)
(declare-fun r7 () bool)
(declare-fun r8 () bool)
(declare-fun ll (int k k) bool)
(assert (bvsle #b00000000000000000000000000000000 k))
(assert (bvslt k (sz ar)))
(assert (bvsle #b00000000000000000000000000000000 l))
(assert (bvslt l (sz ar)))
(assert (bvslt k i))
(assert (bvslt l i))
(assert (bvslt i (bvsub (sz ar) #b00000000000000000000000000000001)))
(assert (bvslt i j))
(assert (f ar order i j))
(assert (= r7 (or (bvsgt #b00000000000000000000000000000000 i) (bvsge i (bvsub (sz (mkcustomarray (store (store (aa ar) k (select (aa ar) l)) l (select (aa ar) k)) (sz ar))) #b00000000000000000000000000000001)) (bvsge i j))))
(assert (=> (not r7) (= r8 (ll (leq order) (fst (select (aa (mkcustomarray (store (store (aa ar) k (select (aa ar) l)) l (select (aa ar) k)) (sz ar))) i)) (fst (select (aa (mkcustomarray (store (store (aa ar) k (select (aa ar) l)) l (select (aa ar) k)) (sz ar))) (bvadd i #b00000000000000000000000000000001)))))))
(assert (= (f ar order i j) e2))
(assert (=> rr (= e2 e3)))
(assert (=> rr (=> (not r6) (not e3))))
(assert (=> rr (= r6 (ll (leq order) (fst (select (aa ar) i)) (fst (select (aa ar) (bvadd i #b00000000000000000000000000000001)))))))
(check-sat)
(get-model)