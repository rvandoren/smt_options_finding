(get-info :version)
; (:version "4.13.0")
; Started: 2024-09-24 15:21:04
; Silicon.version: 1.1-SNAPSHOT (b737e366)
; Input file: /Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $FVF<left> 0)
(declare-sort $FVF<right> 0)
(declare-sort $FVF<is_marked> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<left>To$Snap ($FVF<left>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<left> ($Snap) $FVF<left>)
(assert (forall ((x $FVF<left>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<left>($SortWrappers.$FVF<left>To$Snap x)))
    :pattern (($SortWrappers.$FVF<left>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<left>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<left>To$Snap($SortWrappers.$SnapTo$FVF<left> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<left> x))
    :qid |$Snap.$FVF<left>To$SnapTo$FVF<left>|
    )))
(declare-fun $SortWrappers.$FVF<right>To$Snap ($FVF<right>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<right> ($Snap) $FVF<right>)
(assert (forall ((x $FVF<right>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<right>($SortWrappers.$FVF<right>To$Snap x)))
    :pattern (($SortWrappers.$FVF<right>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<right>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<right>To$Snap($SortWrappers.$SnapTo$FVF<right> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<right> x))
    :qid |$Snap.$FVF<right>To$SnapTo$FVF<right>|
    )))
(declare-fun $SortWrappers.$FVF<is_marked>To$Snap ($FVF<is_marked>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<is_marked> ($Snap) $FVF<is_marked>)
(assert (forall ((x $FVF<is_marked>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<is_marked>($SortWrappers.$FVF<is_marked>To$Snap x)))
    :pattern (($SortWrappers.$FVF<is_marked>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<is_marked>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<is_marked>To$Snap($SortWrappers.$SnapTo$FVF<is_marked> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<is_marked> x))
    :qid |$Snap.$FVF<is_marked>To$SnapTo$FVF<is_marked>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_skolem_diff (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
; /field_value_functions_declarations.smt2 [left: Ref]
(declare-fun $FVF.domain_left ($FVF<left>) Set<$Ref>)
(declare-fun $FVF.lookup_left ($FVF<left> $Ref) $Ref)
(declare-fun $FVF.after_left ($FVF<left> $FVF<left>) Bool)
(declare-fun $FVF.loc_left ($Ref $Ref) Bool)
(declare-fun $FVF.perm_left ($FPM $Ref) $Perm)
(declare-const $fvfTOP_left $FVF<left>)
; /field_value_functions_declarations.smt2 [right: Ref]
(declare-fun $FVF.domain_right ($FVF<right>) Set<$Ref>)
(declare-fun $FVF.lookup_right ($FVF<right> $Ref) $Ref)
(declare-fun $FVF.after_right ($FVF<right> $FVF<right>) Bool)
(declare-fun $FVF.loc_right ($Ref $Ref) Bool)
(declare-fun $FVF.perm_right ($FPM $Ref) $Perm)
(declare-const $fvfTOP_right $FVF<right>)
; /field_value_functions_declarations.smt2 [is_marked: Bool]
(declare-fun $FVF.domain_is_marked ($FVF<is_marked>) Set<$Ref>)
(declare-fun $FVF.lookup_is_marked ($FVF<is_marked> $Ref) Bool)
(declare-fun $FVF.after_is_marked ($FVF<is_marked> $FVF<is_marked>) Bool)
(declare-fun $FVF.loc_is_marked (Bool $Ref) Bool)
(declare-fun $FVF.perm_is_marked ($FPM $Ref) $Perm)
(declare-const $fvfTOP_is_marked $FVF<is_marked>)
; Declaring symbols related to program functions (from program analysis)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Bool)) (!
  (not (Set_in o (as Set_empty  Set<Bool>)))
  :pattern ((Set_in o (as Set_empty  Set<Bool>)))
  )))
(assert (forall ((s Set<Bool>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Bool))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Bool)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Bool) (o Bool)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Bool)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (o Bool)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (Set_subset a b)
    (forall ((o Bool)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
; /field_value_functions_axioms.smt2 [left: Ref]
(assert (forall ((vs $FVF<left>) (ws $FVF<left>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_left vs) ($FVF.domain_left ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_left vs))
            (= ($FVF.lookup_left vs x) ($FVF.lookup_left ws x)))
          :pattern (($FVF.lookup_left vs x) ($FVF.lookup_left ws x))
          :qid |qp.$FVF<left>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<left>To$Snap vs)
              ($SortWrappers.$FVF<left>To$Snap ws)
              )
    :qid |qp.$FVF<left>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_left pm r))
    :pattern (($FVF.perm_left pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_left f r) true)
    :pattern (($FVF.loc_left f r)))))
; /field_value_functions_axioms.smt2 [right: Ref]
(assert (forall ((vs $FVF<right>) (ws $FVF<right>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_right vs) ($FVF.domain_right ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_right vs))
            (= ($FVF.lookup_right vs x) ($FVF.lookup_right ws x)))
          :pattern (($FVF.lookup_right vs x) ($FVF.lookup_right ws x))
          :qid |qp.$FVF<right>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<right>To$Snap vs)
              ($SortWrappers.$FVF<right>To$Snap ws)
              )
    :qid |qp.$FVF<right>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_right pm r))
    :pattern (($FVF.perm_right pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_right f r) true)
    :pattern (($FVF.loc_right f r)))))
; /field_value_functions_axioms.smt2 [is_marked: Bool]
(assert (forall ((vs $FVF<is_marked>) (ws $FVF<is_marked>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_is_marked vs) ($FVF.domain_is_marked ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_is_marked vs))
            (= ($FVF.lookup_is_marked vs x) ($FVF.lookup_is_marked ws x)))
          :pattern (($FVF.lookup_is_marked vs x) ($FVF.lookup_is_marked ws x))
          :qid |qp.$FVF<is_marked>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<is_marked>To$Snap vs)
              ($SortWrappers.$FVF<is_marked>To$Snap ws)
              )
    :qid |qp.$FVF<is_marked>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_is_marked pm r))
    :pattern (($FVF.perm_is_marked pm r)))))
(assert (forall ((r $Ref) (f Bool)) (!
    (= ($FVF.loc_is_marked f r) true)
    :pattern (($FVF.loc_is_marked f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- trav_rec ----------
(declare-const nodes@0@12 Set<$Ref>)
(declare-const node@1@12 $Ref)
(declare-const nodes@2@12 Set<$Ref>)
(declare-const node@3@12 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@4@12 $Snap)
(assert (= $t@4@12 ($Snap.combine ($Snap.first $t@4@12) ($Snap.second $t@4@12))))
(assert (= ($Snap.first $t@4@12) $Snap.unit))
; [eval] (node in nodes)
(assert (Set_in node@3@12 nodes@2@12))
(assert (=
  ($Snap.second $t@4@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@4@12))
    ($Snap.second ($Snap.second $t@4@12)))))
(assert (= ($Snap.first ($Snap.second $t@4@12)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (not (Set_in $Ref.null nodes@2@12)))
(assert (=
  ($Snap.second ($Snap.second $t@4@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@4@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@4@12))))))
(declare-const n@5@12 $Ref)
(push) ; 2
; [eval] (n in nodes)
(assert (Set_in n@5@12 nodes@2@12))
(pop) ; 2
(declare-fun inv@6@12 ($Ref) $Ref)
(declare-fun img@7@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@5@12 $Ref) (n2@5@12 $Ref)) (!
  (=>
    (and
      (Set_in n1@5@12 nodes@2@12)
      (Set_in n2@5@12 nodes@2@12)
      (= n1@5@12 n2@5@12))
    (= n1@5@12 n2@5@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@5@12 $Ref)) (!
  (=>
    (Set_in n@5@12 nodes@2@12)
    (and (= (inv@6@12 n@5@12) n@5@12) (img@7@12 n@5@12)))
  :pattern ((Set_in n@5@12 nodes@2@12))
  :pattern ((inv@6@12 n@5@12))
  :pattern ((img@7@12 n@5@12))
  :qid |quant-u-21|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12)) (= (inv@6@12 r) r))
  :pattern ((inv@6@12 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@5@12 $Ref)) (!
  (=> (Set_in n@5@12 nodes@2@12) (not (= n@5@12 $Ref.null)))
  :pattern ((Set_in n@5@12 nodes@2@12))
  :pattern ((inv@6@12 n@5@12))
  :pattern ((img@7@12 n@5@12))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@8@12 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@6@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) r) r))
  :pattern ((inv@6@12 r))
  :qid |quant-u-38|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@4@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))))
(declare-const n$0@9@12 $Ref)
(push) ; 2
; [eval] (n$0 in nodes)
(assert (Set_in n$0@9@12 nodes@2@12))
(pop) ; 2
(declare-fun inv@10@12 ($Ref) $Ref)
(declare-fun img@11@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@9@12 $Ref) (n$02@9@12 $Ref)) (!
  (=>
    (and
      (Set_in n$01@9@12 nodes@2@12)
      (Set_in n$02@9@12 nodes@2@12)
      (= n$01@9@12 n$02@9@12))
    (= n$01@9@12 n$02@9@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@9@12 $Ref)) (!
  (=>
    (Set_in n$0@9@12 nodes@2@12)
    (and (= (inv@10@12 n$0@9@12) n$0@9@12) (img@11@12 n$0@9@12)))
  :pattern ((Set_in n$0@9@12 nodes@2@12))
  :pattern ((inv@10@12 n$0@9@12))
  :pattern ((img@11@12 n$0@9@12))
  :qid |quant-u-40|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12)) (= (inv@10@12 r) r))
  :pattern ((inv@10@12 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@9@12 $Ref)) (!
  (=> (Set_in n$0@9@12 nodes@2@12) (not (= n$0@9@12 $Ref.null)))
  :pattern ((Set_in n$0@9@12 nodes@2@12))
  :pattern ((inv@10@12 n$0@9@12))
  :pattern ((img@11@12 n$0@9@12))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@12@12 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@10@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) r) r))
  :pattern ((inv@10@12 r))
  :qid |quant-u-41|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12))))))))
(declare-const n$1@13@12 $Ref)
(push) ; 2
; [eval] (n$1 in nodes)
(assert (Set_in n$1@13@12 nodes@2@12))
(pop) ; 2
(declare-fun inv@14@12 ($Ref) $Ref)
(declare-fun img@15@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@13@12 $Ref) (n$12@13@12 $Ref)) (!
  (=>
    (and
      (Set_in n$11@13@12 nodes@2@12)
      (Set_in n$12@13@12 nodes@2@12)
      (= n$11@13@12 n$12@13@12))
    (= n$11@13@12 n$12@13@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@13@12 $Ref)) (!
  (=>
    (Set_in n$1@13@12 nodes@2@12)
    (and (= (inv@14@12 n$1@13@12) n$1@13@12) (img@15@12 n$1@13@12)))
  :pattern ((Set_in n$1@13@12 nodes@2@12))
  :pattern ((inv@14@12 n$1@13@12))
  :pattern ((img@15@12 n$1@13@12))
  :qid |quant-u-43|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12)) (= (inv@14@12 r) r))
  :pattern ((inv@14@12 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@13@12 $Ref)) (!
  (=> (Set_in n$1@13@12 nodes@2@12) (not (= n$1@13@12 $Ref.null)))
  :pattern ((Set_in n$1@13@12 nodes@2@12))
  :pattern ((inv@14@12 n$1@13@12))
  :pattern ((img@15@12 n$1@13@12))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@16@12 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@14@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r) r))
  :pattern ((inv@14@12 r))
  :qid |quant-u-44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@17@12 $Ref)
(push) ; 2
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 3
; [then-branch: 0 | !(n$2@17@12 in nodes@2@12) | live]
; [else-branch: 0 | n$2@17@12 in nodes@2@12 | live]
(push) ; 4
; [then-branch: 0 | !(n$2@17@12 in nodes@2@12)]
(assert (not (Set_in n$2@17@12 nodes@2@12)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | n$2@17@12 in nodes@2@12]
(assert (Set_in n$2@17@12 nodes@2@12))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12))
(push) ; 5
(assert (not (and (img@7@12 n$2@17@12) (Set_in (inv@6@12 n$2@17@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n$2@17@12 nodes@2@12)
  (and
    (Set_in n$2@17@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12))))
(assert (or (Set_in n$2@17@12 nodes@2@12) (not (Set_in n$2@17@12 nodes@2@12))))
(push) ; 3
; [then-branch: 1 | n$2@17@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@17@12) != Null | live]
; [else-branch: 1 | !(n$2@17@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@17@12) != Null) | live]
(push) ; 4
; [then-branch: 1 | n$2@17@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@17@12) != Null]
(assert (and
  (Set_in n$2@17@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12))
(push) ; 5
(assert (not (and (img@7@12 n$2@17@12) (Set_in (inv@6@12 n$2@17@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(n$2@17@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@17@12) != Null)]
(assert (not
  (and
    (Set_in n$2@17@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (and
    (Set_in n$2@17@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null)))
  (and
    (Set_in n$2@17@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@17@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null))))
  (and
    (Set_in n$2@17@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@17@12 $Ref)) (!
  (and
    (=>
      (Set_in n$2@17@12 nodes@2@12)
      (and
        (Set_in n$2@17@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12)))
    (or (Set_in n$2@17@12 nodes@2@12) (not (Set_in n$2@17@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$2@17@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null)))
      (and
        (Set_in n$2@17@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12)))
    (or
      (not
        (and
          (Set_in n$2@17@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null))))
      (and
        (Set_in n$2@17@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@17@12 $Ref)) (!
  (and
    (=>
      (Set_in n$2@17@12 nodes@2@12)
      (and
        (Set_in n$2@17@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12)))
    (or (Set_in n$2@17@12 nodes@2@12) (not (Set_in n$2@17@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$2@17@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null)))
      (and
        (Set_in n$2@17@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12)))
    (or
      (not
        (and
          (Set_in n$2@17@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null))))
      (and
        (Set_in n$2@17@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null)))))
  :pattern ((Set_in n$2@17@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@17@12 $Ref)) (!
  (=>
    (and
      (Set_in n$2@17@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) nodes@2@12))
  :pattern ((Set_in n$2@17@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@17@12) n$2@17@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))))
  $Snap.unit))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@18@12 $Ref)
(push) ; 2
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 3
; [then-branch: 2 | !(n$3@18@12 in nodes@2@12) | live]
; [else-branch: 2 | n$3@18@12 in nodes@2@12 | live]
(push) ; 4
; [then-branch: 2 | !(n$3@18@12 in nodes@2@12)]
(assert (not (Set_in n$3@18@12 nodes@2@12)))
(pop) ; 4
(push) ; 4
; [else-branch: 2 | n$3@18@12 in nodes@2@12]
(assert (Set_in n$3@18@12 nodes@2@12))
; [eval] n$3.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12))
(push) ; 5
(assert (not (and (img@11@12 n$3@18@12) (Set_in (inv@10@12 n$3@18@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n$3@18@12 nodes@2@12)
  (and
    (Set_in n$3@18@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12))))
(assert (or (Set_in n$3@18@12 nodes@2@12) (not (Set_in n$3@18@12 nodes@2@12))))
(push) ; 3
; [then-branch: 3 | n$3@18@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@18@12) != Null | live]
; [else-branch: 3 | !(n$3@18@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@18@12) != Null) | live]
(push) ; 4
; [then-branch: 3 | n$3@18@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@18@12) != Null]
(assert (and
  (Set_in n$3@18@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12))
(push) ; 5
(assert (not (and (img@11@12 n$3@18@12) (Set_in (inv@10@12 n$3@18@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(n$3@18@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@18@12) != Null)]
(assert (not
  (and
    (Set_in n$3@18@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (and
    (Set_in n$3@18@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null)))
  (and
    (Set_in n$3@18@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@18@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null))))
  (and
    (Set_in n$3@18@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@18@12 $Ref)) (!
  (and
    (=>
      (Set_in n$3@18@12 nodes@2@12)
      (and
        (Set_in n$3@18@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12)))
    (or (Set_in n$3@18@12 nodes@2@12) (not (Set_in n$3@18@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$3@18@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null)))
      (and
        (Set_in n$3@18@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12)))
    (or
      (not
        (and
          (Set_in n$3@18@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12)
              $Ref.null))))
      (and
        (Set_in n$3@18@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@18@12 $Ref)) (!
  (and
    (=>
      (Set_in n$3@18@12 nodes@2@12)
      (and
        (Set_in n$3@18@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12)))
    (or (Set_in n$3@18@12 nodes@2@12) (not (Set_in n$3@18@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$3@18@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null)))
      (and
        (Set_in n$3@18@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12)))
    (or
      (not
        (and
          (Set_in n$3@18@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12)
              $Ref.null))))
      (and
        (Set_in n$3@18@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null)))))
  :pattern ((Set_in n$3@18@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@18@12 $Ref)) (!
  (=>
    (and
      (Set_in n$3@18@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) nodes@2@12))
  :pattern ((Set_in n$3@18@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@18@12) n$3@18@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))))
  $Snap.unit))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) node@3@12) node@3@12))
(push) ; 2
(assert (not (and (img@15@12 node@3@12) (Set_in (inv@14@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) node@3@12)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@19@12 $Snap)
(assert (= $t@19@12 ($Snap.combine ($Snap.first $t@19@12) ($Snap.second $t@19@12))))
(assert (= ($Snap.first $t@19@12) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@19@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@19@12))
    ($Snap.second ($Snap.second $t@19@12)))))
(assert (= ($Snap.first ($Snap.second $t@19@12)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@19@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@19@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))
(declare-const n$4@20@12 $Ref)
(push) ; 3
; [eval] (n$4 in nodes)
(assert (Set_in n$4@20@12 nodes@2@12))
(pop) ; 3
(declare-fun inv@21@12 ($Ref) $Ref)
(declare-fun img@22@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@20@12 $Ref) (n$42@20@12 $Ref)) (!
  (=>
    (and
      (Set_in n$41@20@12 nodes@2@12)
      (Set_in n$42@20@12 nodes@2@12)
      (= n$41@20@12 n$42@20@12))
    (= n$41@20@12 n$42@20@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@20@12 $Ref)) (!
  (=>
    (Set_in n$4@20@12 nodes@2@12)
    (and (= (inv@21@12 n$4@20@12) n$4@20@12) (img@22@12 n$4@20@12)))
  :pattern ((Set_in n$4@20@12 nodes@2@12))
  :pattern ((inv@21@12 n$4@20@12))
  :pattern ((img@22@12 n$4@20@12))
  :qid |quant-u-56|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12)) (= (inv@21@12 r) r))
  :pattern ((inv@21@12 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@20@12 $Ref)) (!
  (=> (Set_in n$4@20@12 nodes@2@12) (not (= n$4@20@12 $Ref.null)))
  :pattern ((Set_in n$4@20@12 nodes@2@12))
  :pattern ((inv@21@12 n$4@20@12))
  :pattern ((img@22@12 n$4@20@12))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@23@12 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@21@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) r) r))
  :pattern ((inv@21@12 r))
  :qid |quant-u-60|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@19@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))
(declare-const n$5@24@12 $Ref)
(push) ; 3
; [eval] (n$5 in nodes)
(assert (Set_in n$5@24@12 nodes@2@12))
(pop) ; 3
(declare-fun inv@25@12 ($Ref) $Ref)
(declare-fun img@26@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$51@24@12 $Ref) (n$52@24@12 $Ref)) (!
  (=>
    (and
      (Set_in n$51@24@12 nodes@2@12)
      (Set_in n$52@24@12 nodes@2@12)
      (= n$51@24@12 n$52@24@12))
    (= n$51@24@12 n$52@24@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@24@12 $Ref)) (!
  (=>
    (Set_in n$5@24@12 nodes@2@12)
    (and (= (inv@25@12 n$5@24@12) n$5@24@12) (img@26@12 n$5@24@12)))
  :pattern ((Set_in n$5@24@12 nodes@2@12))
  :pattern ((inv@25@12 n$5@24@12))
  :pattern ((img@26@12 n$5@24@12))
  :qid |quant-u-64|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12)) (= (inv@25@12 r) r))
  :pattern ((inv@25@12 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@24@12 $Ref)) (!
  (=> (Set_in n$5@24@12 nodes@2@12) (not (= n$5@24@12 $Ref.null)))
  :pattern ((Set_in n$5@24@12 nodes@2@12))
  :pattern ((inv@25@12 n$5@24@12))
  :pattern ((img@26@12 n$5@24@12))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@27@12 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@25@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) r) r))
  :pattern ((inv@25@12 r))
  :qid |quant-u-67|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))
(declare-const n$6@28@12 $Ref)
(push) ; 3
; [eval] (n$6 in nodes)
(assert (Set_in n$6@28@12 nodes@2@12))
(pop) ; 3
(declare-fun inv@29@12 ($Ref) $Ref)
(declare-fun img@30@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$61@28@12 $Ref) (n$62@28@12 $Ref)) (!
  (=>
    (and
      (Set_in n$61@28@12 nodes@2@12)
      (Set_in n$62@28@12 nodes@2@12)
      (= n$61@28@12 n$62@28@12))
    (= n$61@28@12 n$62@28@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@28@12 $Ref)) (!
  (=>
    (Set_in n$6@28@12 nodes@2@12)
    (and (= (inv@29@12 n$6@28@12) n$6@28@12) (img@30@12 n$6@28@12)))
  :pattern ((Set_in n$6@28@12 nodes@2@12))
  :pattern ((inv@29@12 n$6@28@12))
  :pattern ((img@30@12 n$6@28@12))
  :qid |quant-u-77|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12)) (= (inv@29@12 r) r))
  :pattern ((inv@29@12 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@28@12 $Ref)) (!
  (=> (Set_in n$6@28@12 nodes@2@12) (not (= n$6@28@12 $Ref.null)))
  :pattern ((Set_in n$6@28@12 nodes@2@12))
  :pattern ((inv@29@12 n$6@28@12))
  :pattern ((img@30@12 n$6@28@12))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@31@12 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@29@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r) r))
  :pattern ((inv@29@12 r))
  :qid |quant-u-81|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@32@12 $Ref)
(push) ; 3
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 4
; [then-branch: 4 | !(n$7@32@12 in nodes@2@12) | live]
; [else-branch: 4 | n$7@32@12 in nodes@2@12 | live]
(push) ; 5
; [then-branch: 4 | !(n$7@32@12 in nodes@2@12)]
(assert (not (Set_in n$7@32@12 nodes@2@12)))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | n$7@32@12 in nodes@2@12]
(assert (Set_in n$7@32@12 nodes@2@12))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12))
(push) ; 6
(assert (not (and (img@22@12 n$7@32@12) (Set_in (inv@21@12 n$7@32@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (=>
  (Set_in n$7@32@12 nodes@2@12)
  (and
    (Set_in n$7@32@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12))))
(assert (or (Set_in n$7@32@12 nodes@2@12) (not (Set_in n$7@32@12 nodes@2@12))))
(push) ; 4
; [then-branch: 5 | n$7@32@12 in nodes@2@12 && Lookup(left, sm@23@12, n$7@32@12) != Null | live]
; [else-branch: 5 | !(n$7@32@12 in nodes@2@12 && Lookup(left, sm@23@12, n$7@32@12) != Null) | live]
(push) ; 5
; [then-branch: 5 | n$7@32@12 in nodes@2@12 && Lookup(left, sm@23@12, n$7@32@12) != Null]
(assert (and
  (Set_in n$7@32@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12))
(push) ; 6
(assert (not (and (img@22@12 n$7@32@12) (Set_in (inv@21@12 n$7@32@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(n$7@32@12 in nodes@2@12 && Lookup(left, sm@23@12, n$7@32@12) != Null)]
(assert (not
  (and
    (Set_in n$7@32@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (=>
  (and
    (Set_in n$7@32@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null)))
  (and
    (Set_in n$7@32@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@32@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null))))
  (and
    (Set_in n$7@32@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@32@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@32@12 nodes@2@12)
      (and
        (Set_in n$7@32@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12)))
    (or (Set_in n$7@32@12 nodes@2@12) (not (Set_in n$7@32@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@32@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null)))
      (and
        (Set_in n$7@32@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12)))
    (or
      (not
        (and
          (Set_in n$7@32@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null))))
      (and
        (Set_in n$7@32@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@32@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@32@12 nodes@2@12)
      (and
        (Set_in n$7@32@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12)))
    (or (Set_in n$7@32@12 nodes@2@12) (not (Set_in n$7@32@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@32@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null)))
      (and
        (Set_in n$7@32@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12)))
    (or
      (not
        (and
          (Set_in n$7@32@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null))))
      (and
        (Set_in n$7@32@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null)))))
  :pattern ((Set_in n$7@32@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@32@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@32@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) nodes@2@12))
  :pattern ((Set_in n$7@32@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n$7@32@12) n$7@32@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@33@12 $Ref)
(push) ; 3
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 4
; [then-branch: 6 | !(n$8@33@12 in nodes@2@12) | live]
; [else-branch: 6 | n$8@33@12 in nodes@2@12 | live]
(push) ; 5
; [then-branch: 6 | !(n$8@33@12 in nodes@2@12)]
(assert (not (Set_in n$8@33@12 nodes@2@12)))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | n$8@33@12 in nodes@2@12]
(assert (Set_in n$8@33@12 nodes@2@12))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12))
(push) ; 6
(assert (not (and (img@26@12 n$8@33@12) (Set_in (inv@25@12 n$8@33@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n$8@33@12 nodes@2@12)
  (and
    (Set_in n$8@33@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12))))
(assert (or (Set_in n$8@33@12 nodes@2@12) (not (Set_in n$8@33@12 nodes@2@12))))
(push) ; 4
; [then-branch: 7 | n$8@33@12 in nodes@2@12 && Lookup(right, sm@27@12, n$8@33@12) != Null | live]
; [else-branch: 7 | !(n$8@33@12 in nodes@2@12 && Lookup(right, sm@27@12, n$8@33@12) != Null) | live]
(push) ; 5
; [then-branch: 7 | n$8@33@12 in nodes@2@12 && Lookup(right, sm@27@12, n$8@33@12) != Null]
(assert (and
  (Set_in n$8@33@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12))
(push) ; 6
(assert (not (and (img@26@12 n$8@33@12) (Set_in (inv@25@12 n$8@33@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 7 | !(n$8@33@12 in nodes@2@12 && Lookup(right, sm@27@12, n$8@33@12) != Null)]
(assert (not
  (and
    (Set_in n$8@33@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (and
    (Set_in n$8@33@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null)))
  (and
    (Set_in n$8@33@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@33@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null))))
  (and
    (Set_in n$8@33@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@33@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@33@12 nodes@2@12)
      (and
        (Set_in n$8@33@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12)))
    (or (Set_in n$8@33@12 nodes@2@12) (not (Set_in n$8@33@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@33@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null)))
      (and
        (Set_in n$8@33@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12)))
    (or
      (not
        (and
          (Set_in n$8@33@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12)
              $Ref.null))))
      (and
        (Set_in n$8@33@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@33@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@33@12 nodes@2@12)
      (and
        (Set_in n$8@33@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12)))
    (or (Set_in n$8@33@12 nodes@2@12) (not (Set_in n$8@33@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@33@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null)))
      (and
        (Set_in n$8@33@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12)))
    (or
      (not
        (and
          (Set_in n$8@33@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12)
              $Ref.null))))
      (and
        (Set_in n$8@33@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null)))))
  :pattern ((Set_in n$8@33@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@33@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@33@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) nodes@2@12))
  :pattern ((Set_in n$8@33@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n$8@33@12) n$8@33@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@34@12 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 8 | n@34@12 in nodes@2@12 | live]
; [else-branch: 8 | !(n@34@12 in nodes@2@12) | live]
(push) ; 5
; [then-branch: 8 | n@34@12 in nodes@2@12]
(assert (Set_in n@34@12 nodes@2@12))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12) n@34@12))
(push) ; 6
(assert (not (and (img@15@12 n@34@12) (Set_in (inv@14@12 n@34@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 9 | Lookup(is_marked, sm@16@12, n@34@12) | live]
; [else-branch: 9 | !(Lookup(is_marked, sm@16@12, n@34@12)) | live]
(push) ; 7
; [then-branch: 9 | Lookup(is_marked, sm@16@12, n@34@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@34@12) n@34@12))
(push) ; 8
(assert (not (and (img@30@12 n@34@12) (Set_in (inv@29@12 n@34@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 9 | !(Lookup(is_marked, sm@16@12, n@34@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)
  (and
    ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@34@12) n@34@12))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | !(n@34@12 in nodes@2@12)]
(assert (not (Set_in n@34@12 nodes@2@12)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (Set_in n@34@12 nodes@2@12)
  (and
    (Set_in n@34@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12) n@34@12)
    (=>
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)
      (and
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@34@12) n@34@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)))))
; Joined path conditions
(assert (or (not (Set_in n@34@12 nodes@2@12)) (Set_in n@34@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@34@12 $Ref)) (!
  (and
    (=>
      (Set_in n@34@12 nodes@2@12)
      (and
        (Set_in n@34@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12) n@34@12)
        (=>
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)
          (and
            ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@34@12) n@34@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12))))
    (or (not (Set_in n@34@12 nodes@2@12)) (Set_in n@34@12 nodes@2@12)))
  :pattern ((Set_in n@34@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@34@12) n@34@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@34@12 $Ref)) (!
  (=>
    (and
      (Set_in n@34@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@34@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@34@12))
  :pattern ((Set_in n@34@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@34@12) n@34@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) node@3@12) node@3@12))
(push) ; 3
(assert (not (and (img@30@12 node@3@12) (Set_in (inv@29@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) node@3@12))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@35@12 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 10 | n@35@12 in nodes@2@12 | live]
; [else-branch: 10 | !(n@35@12 in nodes@2@12) | live]
(push) ; 5
; [then-branch: 10 | n@35@12 in nodes@2@12]
(assert (Set_in n@35@12 nodes@2@12))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@35@12) n@35@12))
(push) ; 6
(assert (not (and (img@22@12 n@35@12) (Set_in (inv@21@12 n@35@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@35@12) n@35@12))
(push) ; 6
(assert (not (and (img@7@12 n@35@12) (Set_in (inv@6@12 n@35@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 10 | !(n@35@12 in nodes@2@12)]
(assert (not (Set_in n@35@12 nodes@2@12)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@35@12 nodes@2@12)
  (and
    (Set_in n@35@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@35@12) n@35@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@35@12) n@35@12))))
; Joined path conditions
(assert (or (not (Set_in n@35@12 nodes@2@12)) (Set_in n@35@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@35@12 $Ref)) (!
  (and
    (=>
      (Set_in n@35@12 nodes@2@12)
      (and
        (Set_in n@35@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@35@12) n@35@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@35@12) n@35@12)))
    (or (not (Set_in n@35@12 nodes@2@12)) (Set_in n@35@12 nodes@2@12)))
  :pattern ((Set_in n@35@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@35@12) n@35@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@35@12 $Ref)) (!
  (=>
    (Set_in n@35@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@35@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@35@12)))
  :pattern ((Set_in n@35@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@35@12) n@35@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@36@12 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 11 | n@36@12 in nodes@2@12 | live]
; [else-branch: 11 | !(n@36@12 in nodes@2@12) | live]
(push) ; 5
; [then-branch: 11 | n@36@12 in nodes@2@12]
(assert (Set_in n@36@12 nodes@2@12))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@36@12) n@36@12))
(push) ; 6
(assert (not (and (img@26@12 n@36@12) (Set_in (inv@25@12 n@36@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@36@12) n@36@12))
(push) ; 6
(assert (not (and (img@11@12 n@36@12) (Set_in (inv@10@12 n@36@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 11 | !(n@36@12 in nodes@2@12)]
(assert (not (Set_in n@36@12 nodes@2@12)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@36@12 nodes@2@12)
  (and
    (Set_in n@36@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@36@12) n@36@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@36@12) n@36@12))))
; Joined path conditions
(assert (or (not (Set_in n@36@12 nodes@2@12)) (Set_in n@36@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@36@12 $Ref)) (!
  (and
    (=>
      (Set_in n@36@12 nodes@2@12)
      (and
        (Set_in n@36@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@36@12) n@36@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@36@12) n@36@12)))
    (or (not (Set_in n@36@12 nodes@2@12)) (Set_in n@36@12 nodes@2@12)))
  :pattern ((Set_in n@36@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@36@12) n@36@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@36@12 $Ref)) (!
  (=>
    (Set_in n@36@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@36@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@36@12)))
  :pattern ((Set_in n@36@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@36@12) n@36@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@37@12 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 12 | n@37@12 in nodes@2@12 | live]
; [else-branch: 12 | !(n@37@12 in nodes@2@12) | live]
(push) ; 5
; [then-branch: 12 | n@37@12 in nodes@2@12]
(assert (Set_in n@37@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12) n@37@12))
(push) ; 6
(assert (not (and (img@15@12 n@37@12) (Set_in (inv@14@12 n@37@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 13 | Lookup(is_marked, sm@16@12, n@37@12) | live]
; [else-branch: 13 | !(Lookup(is_marked, sm@16@12, n@37@12)) | live]
(push) ; 7
; [then-branch: 13 | Lookup(is_marked, sm@16@12, n@37@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
(pop) ; 7
(push) ; 7
; [else-branch: 13 | !(Lookup(is_marked, sm@16@12, n@37@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12) n@37@12))
(push) ; 8
(assert (not (and (img@30@12 n@37@12) (Set_in (inv@29@12 n@37@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12) n@37@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12)))
(push) ; 6
; [then-branch: 14 | !(Lookup(is_marked, sm@16@12, n@37@12)) && Lookup(is_marked, sm@31@12, n@37@12) | live]
; [else-branch: 14 | !(!(Lookup(is_marked, sm@16@12, n@37@12)) && Lookup(is_marked, sm@31@12, n@37@12)) | live]
(push) ; 7
; [then-branch: 14 | !(Lookup(is_marked, sm@16@12, n@37@12)) && Lookup(is_marked, sm@31@12, n@37@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
  ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) n@37@12))
(push) ; 8
(assert (not (and (img@22@12 n@37@12) (Set_in (inv@21@12 n@37@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 15 | Lookup(left, sm@23@12, n@37@12) == Null | live]
; [else-branch: 15 | Lookup(left, sm@23@12, n@37@12) != Null | live]
(push) ; 9
; [then-branch: 15 | Lookup(left, sm@23@12, n@37@12) == Null]
(assert (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 15 | Lookup(left, sm@23@12, n@37@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(push) ; 10
(assert (not (and (img@22@12 n@37@12) (Set_in (inv@21@12 n@37@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)))
(push) ; 10
(assert (not (and
  (img@30@12 ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12))
  (Set_in (inv@29@12 ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | !(!(Lookup(is_marked, sm@16@12, n@37@12)) && Lookup(is_marked, sm@31@12, n@37@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) n@37@12)
    (=>
      (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12))))
    (or
      (not (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
      (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12))))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | !(n@37@12 in nodes@2@12)]
(assert (not (Set_in n@37@12 nodes@2@12)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (=>
  (Set_in n@37@12 nodes@2@12)
  (and
    (Set_in n@37@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12) n@37@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12) n@37@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) n@37@12)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))
          (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
          ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12))))))
; Joined path conditions
(assert (or (not (Set_in n@37@12 nodes@2@12)) (Set_in n@37@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@12 r) (Set_in (inv@21@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@23@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@37@12 $Ref)) (!
  (and
    (=>
      (Set_in n@37@12 nodes@2@12)
      (and
        (Set_in n@37@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12) n@37@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12) n@37@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) n@37@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
              ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)))))
    (or (not (Set_in n@37@12 nodes@2@12)) (Set_in n@37@12 nodes@2@12)))
  :pattern ((Set_in n@37@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12) n@37@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@37@12 $Ref)) (!
  (and
    (=>
      (Set_in n@37@12 nodes@2@12)
      (and
        (Set_in n@37@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12) n@37@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12) n@37@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) n@37@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
              ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)))))
    (or (not (Set_in n@37@12 nodes@2@12)) (Set_in n@37@12 nodes@2@12)))
  :pattern ((Set_in n@37@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) n@37@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@37@12 $Ref)) (!
  (=>
    (and
      (Set_in n@37@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@37@12))
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12)))
    (or
      (= ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12))))
  :pattern ((Set_in n@37@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@37@12) n@37@12))
  :pattern ((Set_in n@37@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12) n@37@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)) ($FVF.lookup_left (as sm@23@12  $FVF<left>) n@37@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@38@12 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 16 | n@38@12 in nodes@2@12 | live]
; [else-branch: 16 | !(n@38@12 in nodes@2@12) | live]
(push) ; 5
; [then-branch: 16 | n@38@12 in nodes@2@12]
(assert (Set_in n@38@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12) n@38@12))
(push) ; 6
(assert (not (and (img@15@12 n@38@12) (Set_in (inv@14@12 n@38@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 17 | Lookup(is_marked, sm@16@12, n@38@12) | live]
; [else-branch: 17 | !(Lookup(is_marked, sm@16@12, n@38@12)) | live]
(push) ; 7
; [then-branch: 17 | Lookup(is_marked, sm@16@12, n@38@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
(pop) ; 7
(push) ; 7
; [else-branch: 17 | !(Lookup(is_marked, sm@16@12, n@38@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12) n@38@12))
(push) ; 8
(assert (not (and (img@30@12 n@38@12) (Set_in (inv@29@12 n@38@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12) n@38@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12)))
(push) ; 6
; [then-branch: 18 | !(Lookup(is_marked, sm@16@12, n@38@12)) && Lookup(is_marked, sm@31@12, n@38@12) | live]
; [else-branch: 18 | !(!(Lookup(is_marked, sm@16@12, n@38@12)) && Lookup(is_marked, sm@31@12, n@38@12)) | live]
(push) ; 7
; [then-branch: 18 | !(Lookup(is_marked, sm@16@12, n@38@12)) && Lookup(is_marked, sm@31@12, n@38@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
  ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) n@38@12))
(push) ; 8
(assert (not (and (img@26@12 n@38@12) (Set_in (inv@25@12 n@38@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 19 | Lookup(right, sm@27@12, n@38@12) == Null | live]
; [else-branch: 19 | Lookup(right, sm@27@12, n@38@12) != Null | live]
(push) ; 9
; [then-branch: 19 | Lookup(right, sm@27@12, n@38@12) == Null]
(assert (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 19 | Lookup(right, sm@27@12, n@38@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(push) ; 10
(assert (not (and (img@26@12 n@38@12) (Set_in (inv@25@12 n@38@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)))
(push) ; 10
(assert (not (and
  (img@30@12 ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12))
  (Set_in (inv@29@12 ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 18 | !(!(Lookup(is_marked, sm@16@12, n@38@12)) && Lookup(is_marked, sm@31@12, n@38@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) n@38@12)
    (=>
      (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12))))
    (or
      (not (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
      (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
    ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12))))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(n@38@12 in nodes@2@12)]
(assert (not (Set_in n@38@12 nodes@2@12)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n@38@12 nodes@2@12)
  (and
    (Set_in n@38@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12) n@38@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12) n@38@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) n@38@12)
        (=>
          (not
            (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12))))
        (or
          (not
            (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))
          (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
          ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12))))))
; Joined path conditions
(assert (or (not (Set_in n@38@12 nodes@2@12)) (Set_in n@38@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@12 r) (Set_in (inv@29@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@12 r) (Set_in (inv@25@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@27@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@38@12 $Ref)) (!
  (and
    (=>
      (Set_in n@38@12 nodes@2@12)
      (and
        (Set_in n@38@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12) n@38@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12) n@38@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) n@38@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
              ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)))))
    (or (not (Set_in n@38@12 nodes@2@12)) (Set_in n@38@12 nodes@2@12)))
  :pattern ((Set_in n@38@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12) n@38@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@38@12 $Ref)) (!
  (and
    (=>
      (Set_in n@38@12 nodes@2@12)
      (and
        (Set_in n@38@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12) n@38@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12) n@38@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) n@38@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
              ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
            ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)))))
    (or (not (Set_in n@38@12 nodes@2@12)) (Set_in n@38@12 nodes@2@12)))
  :pattern ((Set_in n@38@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) n@38@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@38@12 $Ref)) (!
  (=>
    (and
      (Set_in n@38@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@38@12))
        ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12)))
    (or
      (= ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12))))
  :pattern ((Set_in n@38@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) n@38@12) n@38@12))
  :pattern ((Set_in n@38@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12) n@38@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)) ($FVF.lookup_right (as sm@27@12  $FVF<right>) n@38@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 2
(push) ; 2
; [exec]
; node.is_marked := true
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@39@12 ((r $Ref)) $Perm
  (ite
    (= r node@3@12)
    ($Perm.min
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@39@12 r))
    $Perm.No)
  
  :qid |quant-u-115|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@39@12 r) $Perm.No)
  
  :qid |quant-u-116|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r node@3@12) (= (- $Perm.Write (pTaken@39@12 r)) $Perm.No))
  
  :qid |quant-u-117|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@40@12 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) node@3@12) true))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) node@3@12) node@3@12))
; [eval] node.left != null && !node.left.is_marked
; [eval] node.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) node@3@12))
(set-option :timeout 0)
(push) ; 3
(assert (not (and (img@7@12 node@3@12) (Set_in (inv@6@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch: 20 | Lookup(left, sm@8@12, node@3@12) == Null | live]
; [else-branch: 20 | Lookup(left, sm@8@12, node@3@12) != Null | live]
(push) ; 4
; [then-branch: 20 | Lookup(left, sm@8@12, node@3@12) == Null]
(assert (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 20 | Lookup(left, sm@8@12, node@3@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null)))
; [eval] !node.left.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 5
(assert (not (and (img@7@12 node@3@12) (Set_in (inv@6@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@41@12 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(declare-const pm@42@12 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@42@12  $FPM) r)
    (+
      (ite (= r node@3@12) $Perm.Write $Perm.No)
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@42@12  $FPM) r))
  :qid |qp.resPrmSumDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@42@12  $FPM) r))
  :qid |qp.resTrgDef16|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))
(push) ; 5
(assert (not (<
  $Perm.No
  ($FVF.perm_is_marked (as pm@42@12  $FPM) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@42@12  $FPM) r)
    (+
      (ite (= r node@3@12) $Perm.Write $Perm.No)
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@42@12  $FPM) r))
  :qid |qp.resPrmSumDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@42@12  $FPM) r))
  :qid |qp.resTrgDef16|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | Lookup(left, sm@8@12, node@3@12) != Null && !(Lookup(is_marked, sm@41@12, Lookup(left, sm@8@12, node@3@12))) | live]
; [else-branch: 21 | !(Lookup(left, sm@8@12, node@3@12) != Null && !(Lookup(is_marked, sm@41@12, Lookup(left, sm@8@12, node@3@12)))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 21 | Lookup(left, sm@8@12, node@3@12) != Null && !(Lookup(is_marked, sm@41@12, Lookup(left, sm@8@12, node@3@12)))]
(assert (and
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))))
; [exec]
; trav_rec(nodes, node.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 4
(assert (not (and (img@7@12 node@3@12) (Set_in (inv@6@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (node in nodes)
(push) ; 4
(assert (not (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) nodes@2@12)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) nodes@2@12))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n@43@12 $Ref)
(push) ; 4
; [eval] (n in nodes)
(assert (Set_in n@43@12 nodes@2@12))
(pop) ; 4
(declare-fun inv@44@12 ($Ref) $Ref)
(declare-fun img@45@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@43@12 $Ref) (n2@43@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@43@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n1@43@12) n1@43@12))
      (and
        (Set_in n2@43@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n2@43@12) n2@43@12))
      (= n1@43@12 n2@43@12))
    (= n1@43@12 n2@43@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@43@12 $Ref)) (!
  (=>
    (Set_in n@43@12 nodes@2@12)
    (and (= (inv@44@12 n@43@12) n@43@12) (img@45@12 n@43@12)))
  :pattern ((Set_in n@43@12 nodes@2@12))
  :pattern ((inv@44@12 n@43@12))
  :pattern ((img@45@12 n@43@12))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@45@12 r) (Set_in (inv@44@12 r) nodes@2@12)) (= (inv@44@12 r) r))
  :pattern ((inv@44@12 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@44@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) r) r))
  :pattern ((inv@44@12 r))
  :qid |quant-u-119|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@46@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@44@12 r) nodes@2@12) (img@45@12 r) (= r (inv@44@12 r)))
    ($Perm.min
      (ite
        (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@46@12 r))
    $Perm.No)
  
  :qid |quant-u-121|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@44@12 r) nodes@2@12) (img@45@12 r) (= r (inv@44@12 r)))
    (= (- $Perm.Write (pTaken@46@12 r)) $Perm.No))
  
  :qid |quant-u-122|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$0@47@12 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$0 in nodes)
(assert (Set_in n$0@47@12 nodes@2@12))
(pop) ; 4
(declare-fun inv@48@12 ($Ref) $Ref)
(declare-fun img@49@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@47@12 $Ref) (n$02@47@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@47@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$01@47@12) n$01@47@12))
      (and
        (Set_in n$02@47@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$02@47@12) n$02@47@12))
      (= n$01@47@12 n$02@47@12))
    (= n$01@47@12 n$02@47@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@47@12 $Ref)) (!
  (=>
    (Set_in n$0@47@12 nodes@2@12)
    (and (= (inv@48@12 n$0@47@12) n$0@47@12) (img@49@12 n$0@47@12)))
  :pattern ((Set_in n$0@47@12 nodes@2@12))
  :pattern ((inv@48@12 n$0@47@12))
  :pattern ((img@49@12 n$0@47@12))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@49@12 r) (Set_in (inv@48@12 r) nodes@2@12)) (= (inv@48@12 r) r))
  :pattern ((inv@48@12 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@48@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) r) r))
  :pattern ((inv@48@12 r))
  :qid |quant-u-124|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@50@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@48@12 r) nodes@2@12) (img@49@12 r) (= r (inv@48@12 r)))
    ($Perm.min
      (ite
        (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@50@12 r))
    $Perm.No)
  
  :qid |quant-u-126|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@48@12 r) nodes@2@12) (img@49@12 r) (= r (inv@48@12 r)))
    (= (- $Perm.Write (pTaken@50@12 r)) $Perm.No))
  
  :qid |quant-u-127|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$1@51@12 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$1 in nodes)
(assert (Set_in n$1@51@12 nodes@2@12))
(pop) ; 4
(declare-fun inv@52@12 ($Ref) $Ref)
(declare-fun img@53@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@51@12 $Ref) (n$12@51@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@51@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n$11@51@12) n$11@51@12))
      (and
        (Set_in n$12@51@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n$12@51@12) n$12@51@12))
      (= n$11@51@12 n$12@51@12))
    (= n$11@51@12 n$12@51@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@51@12 $Ref)) (!
  (=>
    (Set_in n$1@51@12 nodes@2@12)
    (and (= (inv@52@12 n$1@51@12) n$1@51@12) (img@53@12 n$1@51@12)))
  :pattern ((Set_in n$1@51@12 nodes@2@12))
  :pattern ((inv@52@12 n$1@51@12))
  :pattern ((img@53@12 n$1@51@12))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@53@12 r) (Set_in (inv@52@12 r) nodes@2@12)) (= (inv@52@12 r) r))
  :pattern ((inv@52@12 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@52@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r) r))
  :pattern ((inv@52@12 r))
  :qid |quant-u-129|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@54@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@52@12 r) nodes@2@12) (img@53@12 r) (= r (inv@52@12 r)))
    ($Perm.min
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@55@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@52@12 r) nodes@2@12) (img@53@12 r) (= r (inv@52@12 r)))
    ($Perm.min
      (ite (= r node@3@12) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@54@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)
      (pTaken@54@12 r))
    $Perm.No)
  
  :qid |quant-u-131|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@52@12 r) nodes@2@12) (img@53@12 r) (= r (inv@52@12 r)))
    (= (- $Perm.Write (pTaken@54@12 r)) $Perm.No))
  
  :qid |quant-u-132|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@55@12 node@3@12)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@52@12 r) nodes@2@12) (img@53@12 r) (= r (inv@52@12 r)))
    (= (- (- $Perm.Write (pTaken@54@12 r)) (pTaken@55@12 r)) $Perm.No))
  
  :qid |quant-u-134|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@56@12 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 5
; [then-branch: 22 | !(n$2@56@12 in nodes@2@12) | live]
; [else-branch: 22 | n$2@56@12 in nodes@2@12 | live]
(push) ; 6
; [then-branch: 22 | !(n$2@56@12 in nodes@2@12)]
(assert (not (Set_in n$2@56@12 nodes@2@12)))
(pop) ; 6
(push) ; 6
; [else-branch: 22 | n$2@56@12 in nodes@2@12]
(assert (Set_in n$2@56@12 nodes@2@12))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12))
(push) ; 7
(assert (not (and (img@7@12 n$2@56@12) (Set_in (inv@6@12 n$2@56@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n$2@56@12 nodes@2@12)
  (and
    (Set_in n$2@56@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12))))
(assert (or (Set_in n$2@56@12 nodes@2@12) (not (Set_in n$2@56@12 nodes@2@12))))
(push) ; 5
; [then-branch: 23 | n$2@56@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@56@12) != Null | live]
; [else-branch: 23 | !(n$2@56@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@56@12) != Null) | live]
(push) ; 6
; [then-branch: 23 | n$2@56@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@56@12) != Null]
(assert (and
  (Set_in n$2@56@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12))
(push) ; 7
(assert (not (and (img@7@12 n$2@56@12) (Set_in (inv@6@12 n$2@56@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 23 | !(n$2@56@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@56@12) != Null)]
(assert (not
  (and
    (Set_in n$2@56@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (and
    (Set_in n$2@56@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))
  (and
    (Set_in n$2@56@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@56@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null))))
  (and
    (Set_in n$2@56@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@56@12 $Ref)) (!
  (and
    (=>
      (Set_in n$2@56@12 nodes@2@12)
      (and
        (Set_in n$2@56@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12)))
    (or (Set_in n$2@56@12 nodes@2@12) (not (Set_in n$2@56@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$2@56@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))
      (and
        (Set_in n$2@56@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12)))
    (or
      (not
        (and
          (Set_in n$2@56@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null))))
      (and
        (Set_in n$2@56@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@56@12 $Ref)) (!
  (and
    (=>
      (Set_in n$2@56@12 nodes@2@12)
      (and
        (Set_in n$2@56@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12)))
    (or (Set_in n$2@56@12 nodes@2@12) (not (Set_in n$2@56@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$2@56@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))
      (and
        (Set_in n$2@56@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12)))
    (or
      (not
        (and
          (Set_in n$2@56@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null))))
      (and
        (Set_in n$2@56@12 nodes@2@12)
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))))
  :pattern ((Set_in n$2@56@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 4
(assert (not (forall ((n$2@56@12 $Ref)) (!
  (=>
    (and
      (Set_in n$2@56@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) nodes@2@12))
  :pattern ((Set_in n$2@56@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@56@12 $Ref)) (!
  (=>
    (and
      (Set_in n$2@56@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) nodes@2@12))
  :pattern ((Set_in n$2@56@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@56@12) n$2@56@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@57@12 $Ref)
(push) ; 4
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 5
; [then-branch: 24 | !(n$3@57@12 in nodes@2@12) | live]
; [else-branch: 24 | n$3@57@12 in nodes@2@12 | live]
(push) ; 6
; [then-branch: 24 | !(n$3@57@12 in nodes@2@12)]
(assert (not (Set_in n$3@57@12 nodes@2@12)))
(pop) ; 6
(push) ; 6
; [else-branch: 24 | n$3@57@12 in nodes@2@12]
(assert (Set_in n$3@57@12 nodes@2@12))
; [eval] n$3.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12))
(push) ; 7
(assert (not (and (img@11@12 n$3@57@12) (Set_in (inv@10@12 n$3@57@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n$3@57@12 nodes@2@12)
  (and
    (Set_in n$3@57@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12))))
(assert (or (Set_in n$3@57@12 nodes@2@12) (not (Set_in n$3@57@12 nodes@2@12))))
(push) ; 5
; [then-branch: 25 | n$3@57@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@57@12) != Null | live]
; [else-branch: 25 | !(n$3@57@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@57@12) != Null) | live]
(push) ; 6
; [then-branch: 25 | n$3@57@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@57@12) != Null]
(assert (and
  (Set_in n$3@57@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12))
(push) ; 7
(assert (not (and (img@11@12 n$3@57@12) (Set_in (inv@10@12 n$3@57@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 25 | !(n$3@57@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@57@12) != Null)]
(assert (not
  (and
    (Set_in n$3@57@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (and
    (Set_in n$3@57@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))
  (and
    (Set_in n$3@57@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@57@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null))))
  (and
    (Set_in n$3@57@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@57@12 $Ref)) (!
  (and
    (=>
      (Set_in n$3@57@12 nodes@2@12)
      (and
        (Set_in n$3@57@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12)))
    (or (Set_in n$3@57@12 nodes@2@12) (not (Set_in n$3@57@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$3@57@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))
      (and
        (Set_in n$3@57@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12)))
    (or
      (not
        (and
          (Set_in n$3@57@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12)
              $Ref.null))))
      (and
        (Set_in n$3@57@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@57@12 $Ref)) (!
  (and
    (=>
      (Set_in n$3@57@12 nodes@2@12)
      (and
        (Set_in n$3@57@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12)))
    (or (Set_in n$3@57@12 nodes@2@12) (not (Set_in n$3@57@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$3@57@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))
      (and
        (Set_in n$3@57@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12)))
    (or
      (not
        (and
          (Set_in n$3@57@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12)
              $Ref.null))))
      (and
        (Set_in n$3@57@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))))
  :pattern ((Set_in n$3@57@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 4
(assert (not (forall ((n$3@57@12 $Ref)) (!
  (=>
    (and
      (Set_in n$3@57@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) nodes@2@12))
  :pattern ((Set_in n$3@57@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$3@57@12 $Ref)) (!
  (=>
    (and
      (Set_in n$3@57@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) nodes@2@12))
  :pattern ((Set_in n$3@57@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@57@12) n$3@57@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef14|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) node@3@12)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@12 ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12))
        (Set_in (inv@14@12 ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)) nodes@2@12))
      (-
        $Perm.Write
        (pTaken@39@12 ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $t@58@12 $Snap)
(assert (= $t@58@12 ($Snap.combine ($Snap.first $t@58@12) ($Snap.second $t@58@12))))
(assert (= ($Snap.first $t@58@12) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@58@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@12))
    ($Snap.second ($Snap.second $t@58@12)))))
(assert (= ($Snap.first ($Snap.second $t@58@12)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@58@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))
(declare-const n$4@59@12 $Ref)
(push) ; 4
; [eval] (n$4 in nodes)
(assert (Set_in n$4@59@12 nodes@2@12))
(pop) ; 4
(declare-fun inv@60@12 ($Ref) $Ref)
(declare-fun img@61@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$41@59@12 $Ref) (n$42@59@12 $Ref)) (!
  (=>
    (and
      (Set_in n$41@59@12 nodes@2@12)
      (Set_in n$42@59@12 nodes@2@12)
      (= n$41@59@12 n$42@59@12))
    (= n$41@59@12 n$42@59@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@59@12 $Ref)) (!
  (=>
    (Set_in n$4@59@12 nodes@2@12)
    (and (= (inv@60@12 n$4@59@12) n$4@59@12) (img@61@12 n$4@59@12)))
  :pattern ((Set_in n$4@59@12 nodes@2@12))
  :pattern ((inv@60@12 n$4@59@12))
  :pattern ((img@61@12 n$4@59@12))
  :qid |quant-u-136|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12)) (= (inv@60@12 r) r))
  :pattern ((inv@60@12 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@59@12 $Ref)) (!
  (=> (Set_in n$4@59@12 nodes@2@12) (not (= n$4@59@12 $Ref.null)))
  :pattern ((Set_in n$4@59@12 nodes@2@12))
  :pattern ((inv@60@12 n$4@59@12))
  :pattern ((img@61@12 n$4@59@12))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@62@12 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@60@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) r) r))
  :pattern ((inv@60@12 r))
  :qid |quant-u-137|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@58@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))
(declare-const n$5@63@12 $Ref)
(push) ; 4
; [eval] (n$5 in nodes)
(assert (Set_in n$5@63@12 nodes@2@12))
(pop) ; 4
(declare-fun inv@64@12 ($Ref) $Ref)
(declare-fun img@65@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$51@63@12 $Ref) (n$52@63@12 $Ref)) (!
  (=>
    (and
      (Set_in n$51@63@12 nodes@2@12)
      (Set_in n$52@63@12 nodes@2@12)
      (= n$51@63@12 n$52@63@12))
    (= n$51@63@12 n$52@63@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@63@12 $Ref)) (!
  (=>
    (Set_in n$5@63@12 nodes@2@12)
    (and (= (inv@64@12 n$5@63@12) n$5@63@12) (img@65@12 n$5@63@12)))
  :pattern ((Set_in n$5@63@12 nodes@2@12))
  :pattern ((inv@64@12 n$5@63@12))
  :pattern ((img@65@12 n$5@63@12))
  :qid |quant-u-139|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12)) (= (inv@64@12 r) r))
  :pattern ((inv@64@12 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@63@12 $Ref)) (!
  (=> (Set_in n$5@63@12 nodes@2@12) (not (= n$5@63@12 $Ref.null)))
  :pattern ((Set_in n$5@63@12 nodes@2@12))
  :pattern ((inv@64@12 n$5@63@12))
  :pattern ((img@65@12 n$5@63@12))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@66@12 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@64@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) r) r))
  :pattern ((inv@64@12 r))
  :qid |quant-u-140|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))
(declare-const n$6@67@12 $Ref)
(push) ; 4
; [eval] (n$6 in nodes)
(assert (Set_in n$6@67@12 nodes@2@12))
(pop) ; 4
(declare-fun inv@68@12 ($Ref) $Ref)
(declare-fun img@69@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$61@67@12 $Ref) (n$62@67@12 $Ref)) (!
  (=>
    (and
      (Set_in n$61@67@12 nodes@2@12)
      (Set_in n$62@67@12 nodes@2@12)
      (= n$61@67@12 n$62@67@12))
    (= n$61@67@12 n$62@67@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@67@12 $Ref)) (!
  (=>
    (Set_in n$6@67@12 nodes@2@12)
    (and (= (inv@68@12 n$6@67@12) n$6@67@12) (img@69@12 n$6@67@12)))
  :pattern ((Set_in n$6@67@12 nodes@2@12))
  :pattern ((inv@68@12 n$6@67@12))
  :pattern ((img@69@12 n$6@67@12))
  :qid |quant-u-142|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12)) (= (inv@68@12 r) r))
  :pattern ((inv@68@12 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@67@12 $Ref)) (!
  (=> (Set_in n$6@67@12 nodes@2@12) (not (= n$6@67@12 $Ref.null)))
  :pattern ((Set_in n$6@67@12 nodes@2@12))
  :pattern ((inv@68@12 n$6@67@12))
  :pattern ((img@69@12 n$6@67@12))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@70@12 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@68@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r) r))
  :pattern ((inv@68@12 r))
  :qid |quant-u-143|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@71@12 $Ref)
(push) ; 4
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 5
; [then-branch: 26 | !(n$7@71@12 in nodes@2@12) | live]
; [else-branch: 26 | n$7@71@12 in nodes@2@12 | live]
(push) ; 6
; [then-branch: 26 | !(n$7@71@12 in nodes@2@12)]
(assert (not (Set_in n$7@71@12 nodes@2@12)))
(pop) ; 6
(push) ; 6
; [else-branch: 26 | n$7@71@12 in nodes@2@12]
(assert (Set_in n$7@71@12 nodes@2@12))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12))
(push) ; 7
(assert (not (and (img@61@12 n$7@71@12) (Set_in (inv@60@12 n$7@71@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n$7@71@12 nodes@2@12)
  (and
    (Set_in n$7@71@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12))))
(assert (or (Set_in n$7@71@12 nodes@2@12) (not (Set_in n$7@71@12 nodes@2@12))))
(push) ; 5
; [then-branch: 27 | n$7@71@12 in nodes@2@12 && Lookup(left, sm@62@12, n$7@71@12) != Null | live]
; [else-branch: 27 | !(n$7@71@12 in nodes@2@12 && Lookup(left, sm@62@12, n$7@71@12) != Null) | live]
(push) ; 6
; [then-branch: 27 | n$7@71@12 in nodes@2@12 && Lookup(left, sm@62@12, n$7@71@12) != Null]
(assert (and
  (Set_in n$7@71@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12))
(push) ; 7
(assert (not (and (img@61@12 n$7@71@12) (Set_in (inv@60@12 n$7@71@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 27 | !(n$7@71@12 in nodes@2@12 && Lookup(left, sm@62@12, n$7@71@12) != Null)]
(assert (not
  (and
    (Set_in n$7@71@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (and
    (Set_in n$7@71@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null)))
  (and
    (Set_in n$7@71@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@71@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null))))
  (and
    (Set_in n$7@71@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@71@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@71@12 nodes@2@12)
      (and
        (Set_in n$7@71@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12)))
    (or (Set_in n$7@71@12 nodes@2@12) (not (Set_in n$7@71@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@71@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null)))
      (and
        (Set_in n$7@71@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12)))
    (or
      (not
        (and
          (Set_in n$7@71@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null))))
      (and
        (Set_in n$7@71@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@71@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@71@12 nodes@2@12)
      (and
        (Set_in n$7@71@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12)))
    (or (Set_in n$7@71@12 nodes@2@12) (not (Set_in n$7@71@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@71@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null)))
      (and
        (Set_in n$7@71@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12)))
    (or
      (not
        (and
          (Set_in n$7@71@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null))))
      (and
        (Set_in n$7@71@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null)))))
  :pattern ((Set_in n$7@71@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@71@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@71@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) nodes@2@12))
  :pattern ((Set_in n$7@71@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@71@12) n$7@71@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@72@12 $Ref)
(push) ; 4
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 5
; [then-branch: 28 | !(n$8@72@12 in nodes@2@12) | live]
; [else-branch: 28 | n$8@72@12 in nodes@2@12 | live]
(push) ; 6
; [then-branch: 28 | !(n$8@72@12 in nodes@2@12)]
(assert (not (Set_in n$8@72@12 nodes@2@12)))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | n$8@72@12 in nodes@2@12]
(assert (Set_in n$8@72@12 nodes@2@12))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12))
(push) ; 7
(assert (not (and (img@65@12 n$8@72@12) (Set_in (inv@64@12 n$8@72@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n$8@72@12 nodes@2@12)
  (and
    (Set_in n$8@72@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12))))
(assert (or (Set_in n$8@72@12 nodes@2@12) (not (Set_in n$8@72@12 nodes@2@12))))
(push) ; 5
; [then-branch: 29 | n$8@72@12 in nodes@2@12 && Lookup(right, sm@66@12, n$8@72@12) != Null | live]
; [else-branch: 29 | !(n$8@72@12 in nodes@2@12 && Lookup(right, sm@66@12, n$8@72@12) != Null) | live]
(push) ; 6
; [then-branch: 29 | n$8@72@12 in nodes@2@12 && Lookup(right, sm@66@12, n$8@72@12) != Null]
(assert (and
  (Set_in n$8@72@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12))
(push) ; 7
(assert (not (and (img@65@12 n$8@72@12) (Set_in (inv@64@12 n$8@72@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 29 | !(n$8@72@12 in nodes@2@12 && Lookup(right, sm@66@12, n$8@72@12) != Null)]
(assert (not
  (and
    (Set_in n$8@72@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (and
    (Set_in n$8@72@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null)))
  (and
    (Set_in n$8@72@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@72@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null))))
  (and
    (Set_in n$8@72@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@72@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@72@12 nodes@2@12)
      (and
        (Set_in n$8@72@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12)))
    (or (Set_in n$8@72@12 nodes@2@12) (not (Set_in n$8@72@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@72@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null)))
      (and
        (Set_in n$8@72@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12)))
    (or
      (not
        (and
          (Set_in n$8@72@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12)
              $Ref.null))))
      (and
        (Set_in n$8@72@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@72@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@72@12 nodes@2@12)
      (and
        (Set_in n$8@72@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12)))
    (or (Set_in n$8@72@12 nodes@2@12) (not (Set_in n$8@72@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@72@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null)))
      (and
        (Set_in n$8@72@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12)))
    (or
      (not
        (and
          (Set_in n$8@72@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12)
              $Ref.null))))
      (and
        (Set_in n$8@72@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null)))))
  :pattern ((Set_in n$8@72@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@72@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@72@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) nodes@2@12))
  :pattern ((Set_in n$8@72@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@72@12) n$8@72@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@73@12 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 30 | n@73@12 in nodes@2@12 | live]
; [else-branch: 30 | !(n@73@12 in nodes@2@12) | live]
(push) ; 6
; [then-branch: 30 | n@73@12 in nodes@2@12]
(assert (Set_in n@73@12 nodes@2@12))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef14|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12) n@73@12))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite (= n@73@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@73@12) (Set_in (inv@14@12 n@73@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@73@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 31 | Lookup(is_marked, sm@41@12, n@73@12) | live]
; [else-branch: 31 | !(Lookup(is_marked, sm@41@12, n@73@12)) | live]
(push) ; 8
; [then-branch: 31 | Lookup(is_marked, sm@41@12, n@73@12)]
(assert ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@73@12) n@73@12))
(push) ; 9
(assert (not (and (img@69@12 n@73@12) (Set_in (inv@68@12 n@73@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 31 | !(Lookup(is_marked, sm@41@12, n@73@12))]
(assert (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)
  (and
    ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@73@12) n@73@12))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12))
  ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)))
(pop) ; 6
(push) ; 6
; [else-branch: 30 | !(n@73@12 in nodes@2@12)]
(assert (not (Set_in n@73@12 nodes@2@12)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (Set_in n@73@12 nodes@2@12)
  (and
    (Set_in n@73@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12) n@73@12)
    (=>
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)
      (and
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@73@12) n@73@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12))
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)))))
; Joined path conditions
(assert (or (not (Set_in n@73@12 nodes@2@12)) (Set_in n@73@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@73@12 $Ref)) (!
  (and
    (=>
      (Set_in n@73@12 nodes@2@12)
      (and
        (Set_in n@73@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12) n@73@12)
        (=>
          ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)
          (and
            ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@73@12) n@73@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12))
          ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12))))
    (or (not (Set_in n@73@12 nodes@2@12)) (Set_in n@73@12 nodes@2@12)))
  :pattern ((Set_in n@73@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@73@12) n@73@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@73@12 $Ref)) (!
  (=>
    (and
      (Set_in n@73@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@73@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@73@12))
  :pattern ((Set_in n@73@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@73@12) n@73@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))
(push) ; 4
(assert (not (and
  (img@69@12 ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12))
  (Set_in (inv@68@12 ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@74@12 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 32 | n@74@12 in nodes@2@12 | live]
; [else-branch: 32 | !(n@74@12 in nodes@2@12) | live]
(push) ; 6
; [then-branch: 32 | n@74@12 in nodes@2@12]
(assert (Set_in n@74@12 nodes@2@12))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@74@12) n@74@12))
(push) ; 7
(assert (not (and (img@61@12 n@74@12) (Set_in (inv@60@12 n@74@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@74@12) n@74@12))
(push) ; 7
(assert (not (and (img@7@12 n@74@12) (Set_in (inv@6@12 n@74@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 32 | !(n@74@12 in nodes@2@12)]
(assert (not (Set_in n@74@12 nodes@2@12)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@74@12 nodes@2@12)
  (and
    (Set_in n@74@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@74@12) n@74@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@74@12) n@74@12))))
; Joined path conditions
(assert (or (not (Set_in n@74@12 nodes@2@12)) (Set_in n@74@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@74@12 $Ref)) (!
  (and
    (=>
      (Set_in n@74@12 nodes@2@12)
      (and
        (Set_in n@74@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@74@12) n@74@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@74@12) n@74@12)))
    (or (not (Set_in n@74@12 nodes@2@12)) (Set_in n@74@12 nodes@2@12)))
  :pattern ((Set_in n@74@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@74@12) n@74@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@74@12 $Ref)) (!
  (=>
    (Set_in n@74@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@74@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@74@12)))
  :pattern ((Set_in n@74@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@74@12) n@74@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@75@12 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 33 | n@75@12 in nodes@2@12 | live]
; [else-branch: 33 | !(n@75@12 in nodes@2@12) | live]
(push) ; 6
; [then-branch: 33 | n@75@12 in nodes@2@12]
(assert (Set_in n@75@12 nodes@2@12))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@75@12) n@75@12))
(push) ; 7
(assert (not (and (img@65@12 n@75@12) (Set_in (inv@64@12 n@75@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@75@12) n@75@12))
(push) ; 7
(assert (not (and (img@11@12 n@75@12) (Set_in (inv@10@12 n@75@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 33 | !(n@75@12 in nodes@2@12)]
(assert (not (Set_in n@75@12 nodes@2@12)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@75@12 nodes@2@12)
  (and
    (Set_in n@75@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@75@12) n@75@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@75@12) n@75@12))))
; Joined path conditions
(assert (or (not (Set_in n@75@12 nodes@2@12)) (Set_in n@75@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@75@12 $Ref)) (!
  (and
    (=>
      (Set_in n@75@12 nodes@2@12)
      (and
        (Set_in n@75@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@75@12) n@75@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@75@12) n@75@12)))
    (or (not (Set_in n@75@12 nodes@2@12)) (Set_in n@75@12 nodes@2@12)))
  :pattern ((Set_in n@75@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@75@12) n@75@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@75@12 $Ref)) (!
  (=>
    (Set_in n@75@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@75@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@75@12)))
  :pattern ((Set_in n@75@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@75@12) n@75@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@76@12 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 34 | n@76@12 in nodes@2@12 | live]
; [else-branch: 34 | !(n@76@12 in nodes@2@12) | live]
(push) ; 6
; [then-branch: 34 | n@76@12 in nodes@2@12]
(assert (Set_in n@76@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef14|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12) n@76@12))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite (= n@76@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@76@12) (Set_in (inv@14@12 n@76@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@76@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 35 | Lookup(is_marked, sm@41@12, n@76@12) | live]
; [else-branch: 35 | !(Lookup(is_marked, sm@41@12, n@76@12)) | live]
(push) ; 8
; [then-branch: 35 | Lookup(is_marked, sm@41@12, n@76@12)]
(assert ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
(pop) ; 8
(push) ; 8
; [else-branch: 35 | !(Lookup(is_marked, sm@41@12, n@76@12))]
(assert (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12) n@76@12))
(push) ; 9
(assert (not (and (img@69@12 n@76@12) (Set_in (inv@68@12 n@76@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12) n@76@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
  ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12)))
(push) ; 7
; [then-branch: 36 | !(Lookup(is_marked, sm@41@12, n@76@12)) && Lookup(is_marked, sm@70@12, n@76@12) | live]
; [else-branch: 36 | !(!(Lookup(is_marked, sm@41@12, n@76@12)) && Lookup(is_marked, sm@70@12, n@76@12)) | live]
(push) ; 8
; [then-branch: 36 | !(Lookup(is_marked, sm@41@12, n@76@12)) && Lookup(is_marked, sm@70@12, n@76@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
  ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) n@76@12))
(push) ; 9
(assert (not (and (img@61@12 n@76@12) (Set_in (inv@60@12 n@76@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 37 | Lookup(left, sm@62@12, n@76@12) == Null | live]
; [else-branch: 37 | Lookup(left, sm@62@12, n@76@12) != Null | live]
(push) ; 10
; [then-branch: 37 | Lookup(left, sm@62@12, n@76@12) == Null]
(assert (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 37 | Lookup(left, sm@62@12, n@76@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(push) ; 11
(assert (not (and (img@61@12 n@76@12) (Set_in (inv@60@12 n@76@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)))
(push) ; 11
(assert (not (and
  (img@69@12 ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12))
  (Set_in (inv@68@12 ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null)))
(pop) ; 8
(push) ; 8
; [else-branch: 36 | !(!(Lookup(is_marked, sm@41@12, n@76@12)) && Lookup(is_marked, sm@70@12, n@76@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) n@76@12)
    (=>
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12))))
    (or
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
      (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12))))
(pop) ; 6
(push) ; 6
; [else-branch: 34 | !(n@76@12 in nodes@2@12)]
(assert (not (Set_in n@76@12 nodes@2@12)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n@76@12 nodes@2@12)
  (and
    (Set_in n@76@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12) n@76@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12) n@76@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) n@76@12)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12))))))
; Joined path conditions
(assert (or (not (Set_in n@76@12 nodes@2@12)) (Set_in n@76@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@76@12 $Ref)) (!
  (and
    (=>
      (Set_in n@76@12 nodes@2@12)
      (and
        (Set_in n@76@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12) n@76@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12) n@76@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
          ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) n@76@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
              ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)))))
    (or (not (Set_in n@76@12 nodes@2@12)) (Set_in n@76@12 nodes@2@12)))
  :pattern ((Set_in n@76@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12) n@76@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@76@12 $Ref)) (!
  (and
    (=>
      (Set_in n@76@12 nodes@2@12)
      (and
        (Set_in n@76@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12) n@76@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12) n@76@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
          ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) n@76@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
              ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)))))
    (or (not (Set_in n@76@12 nodes@2@12)) (Set_in n@76@12 nodes@2@12)))
  :pattern ((Set_in n@76@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) n@76@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@76@12 $Ref)) (!
  (=>
    (and
      (Set_in n@76@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@76@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12)))
    (or
      (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12))))
  :pattern ((Set_in n@76@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@76@12) n@76@12))
  :pattern ((Set_in n@76@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12) n@76@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@76@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@77@12 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 38 | n@77@12 in nodes@2@12 | live]
; [else-branch: 38 | !(n@77@12 in nodes@2@12) | live]
(push) ; 6
; [then-branch: 38 | n@77@12 in nodes@2@12]
(assert (Set_in n@77@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef14|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12) n@77@12))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite (= n@77@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@77@12) (Set_in (inv@14@12 n@77@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@77@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 39 | Lookup(is_marked, sm@41@12, n@77@12) | live]
; [else-branch: 39 | !(Lookup(is_marked, sm@41@12, n@77@12)) | live]
(push) ; 8
; [then-branch: 39 | Lookup(is_marked, sm@41@12, n@77@12)]
(assert ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
(pop) ; 8
(push) ; 8
; [else-branch: 39 | !(Lookup(is_marked, sm@41@12, n@77@12))]
(assert (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12) n@77@12))
(push) ; 9
(assert (not (and (img@69@12 n@77@12) (Set_in (inv@68@12 n@77@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12) n@77@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
  ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12)))
(push) ; 7
; [then-branch: 40 | !(Lookup(is_marked, sm@41@12, n@77@12)) && Lookup(is_marked, sm@70@12, n@77@12) | live]
; [else-branch: 40 | !(!(Lookup(is_marked, sm@41@12, n@77@12)) && Lookup(is_marked, sm@70@12, n@77@12)) | live]
(push) ; 8
; [then-branch: 40 | !(Lookup(is_marked, sm@41@12, n@77@12)) && Lookup(is_marked, sm@70@12, n@77@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
  ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) n@77@12))
(push) ; 9
(assert (not (and (img@65@12 n@77@12) (Set_in (inv@64@12 n@77@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 41 | Lookup(right, sm@66@12, n@77@12) == Null | live]
; [else-branch: 41 | Lookup(right, sm@66@12, n@77@12) != Null | live]
(push) ; 10
; [then-branch: 41 | Lookup(right, sm@66@12, n@77@12) == Null]
(assert (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 41 | Lookup(right, sm@66@12, n@77@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 11
(assert (not (and (img@65@12 n@77@12) (Set_in (inv@64@12 n@77@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)))
(push) ; 11
(assert (not (and
  (img@69@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12))
  (Set_in (inv@68@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null)))
(pop) ; 8
(push) ; 8
; [else-branch: 40 | !(!(Lookup(is_marked, sm@41@12, n@77@12)) && Lookup(is_marked, sm@70@12, n@77@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) n@77@12)
    (=>
      (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12))))
    (or
      (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
      (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12))))
(pop) ; 6
(push) ; 6
; [else-branch: 38 | !(n@77@12 in nodes@2@12)]
(assert (not (Set_in n@77@12 nodes@2@12)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n@77@12 nodes@2@12)
  (and
    (Set_in n@77@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12) n@77@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12) n@77@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) n@77@12)
        (=>
          (not
            (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12))))
        (or
          (not
            (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12))))))
; Joined path conditions
(assert (or (not (Set_in n@77@12 nodes@2@12)) (Set_in n@77@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@77@12 $Ref)) (!
  (and
    (=>
      (Set_in n@77@12 nodes@2@12)
      (and
        (Set_in n@77@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12) n@77@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12) n@77@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
          ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) n@77@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
              ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)))))
    (or (not (Set_in n@77@12 nodes@2@12)) (Set_in n@77@12 nodes@2@12)))
  :pattern ((Set_in n@77@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12) n@77@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@77@12 $Ref)) (!
  (and
    (=>
      (Set_in n@77@12 nodes@2@12)
      (and
        (Set_in n@77@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12) n@77@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12) n@77@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
          ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) n@77@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
              ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)))))
    (or (not (Set_in n@77@12 nodes@2@12)) (Set_in n@77@12 nodes@2@12)))
  :pattern ((Set_in n@77@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) n@77@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@77@12 $Ref)) (!
  (=>
    (and
      (Set_in n@77@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) n@77@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12)))
    (or
      (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12))))
  :pattern ((Set_in n@77@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@77@12) n@77@12))
  :pattern ((Set_in n@77@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12) n@77@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@77@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] node.right != null && !node.right.is_marked
; [eval] node.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) node@3@12))
(set-option :timeout 0)
(push) ; 4
(assert (not (and (img@65@12 node@3@12) (Set_in (inv@64@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch: 42 | Lookup(right, sm@66@12, node@3@12) == Null | live]
; [else-branch: 42 | Lookup(right, sm@66@12, node@3@12) != Null | live]
(push) ; 5
; [then-branch: 42 | Lookup(right, sm@66@12, node@3@12) == Null]
(assert (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 42 | Lookup(right, sm@66@12, node@3@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null)))
; [eval] !node.right.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 6
(assert (not (and (img@65@12 node@3@12) (Set_in (inv@64@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))
(push) ; 6
(assert (not (and
  (img@69@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12))
  (Set_in (inv@68@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 43 | Lookup(right, sm@66@12, node@3@12) != Null && !(Lookup(is_marked, sm@70@12, Lookup(right, sm@66@12, node@3@12))) | live]
; [else-branch: 43 | !(Lookup(right, sm@66@12, node@3@12) != Null && !(Lookup(is_marked, sm@70@12, Lookup(right, sm@66@12, node@3@12)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 43 | Lookup(right, sm@66@12, node@3@12) != Null && !(Lookup(is_marked, sm@70@12, Lookup(right, sm@66@12, node@3@12)))]
(assert (and
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))))
; [exec]
; trav_rec(nodes, node.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 5
(assert (not (and (img@65@12 node@3@12) (Set_in (inv@64@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (node in nodes)
(push) ; 5
(assert (not (Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) nodes@2@12)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) nodes@2@12))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n@78@12 $Ref)
(push) ; 5
; [eval] (n in nodes)
(assert (Set_in n@78@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@79@12 ($Ref) $Ref)
(declare-fun img@80@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@78@12 $Ref) (n2@78@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@78@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n1@78@12) n1@78@12))
      (and
        (Set_in n2@78@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n2@78@12) n2@78@12))
      (= n1@78@12 n2@78@12))
    (= n1@78@12 n2@78@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@78@12 $Ref)) (!
  (=>
    (Set_in n@78@12 nodes@2@12)
    (and (= (inv@79@12 n@78@12) n@78@12) (img@80@12 n@78@12)))
  :pattern ((Set_in n@78@12 nodes@2@12))
  :pattern ((inv@79@12 n@78@12))
  :pattern ((img@80@12 n@78@12))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@80@12 r) (Set_in (inv@79@12 r) nodes@2@12)) (= (inv@79@12 r) r))
  :pattern ((inv@79@12 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@79@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) r) r))
  :pattern ((inv@79@12 r))
  :qid |quant-u-145|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@81@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@79@12 r) nodes@2@12) (img@80@12 r) (= r (inv@79@12 r)))
    ($Perm.min
      (ite
        (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@81@12 r))
    $Perm.No)
  
  :qid |quant-u-147|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@79@12 r) nodes@2@12) (img@80@12 r) (= r (inv@79@12 r)))
    (= (- $Perm.Write (pTaken@81@12 r)) $Perm.No))
  
  :qid |quant-u-148|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$0@82@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$0 in nodes)
(assert (Set_in n$0@82@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@83@12 ($Ref) $Ref)
(declare-fun img@84@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$01@82@12 $Ref) (n$02@82@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@82@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$01@82@12) n$01@82@12))
      (and
        (Set_in n$02@82@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$02@82@12) n$02@82@12))
      (= n$01@82@12 n$02@82@12))
    (= n$01@82@12 n$02@82@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@82@12 $Ref)) (!
  (=>
    (Set_in n$0@82@12 nodes@2@12)
    (and (= (inv@83@12 n$0@82@12) n$0@82@12) (img@84@12 n$0@82@12)))
  :pattern ((Set_in n$0@82@12 nodes@2@12))
  :pattern ((inv@83@12 n$0@82@12))
  :pattern ((img@84@12 n$0@82@12))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@84@12 r) (Set_in (inv@83@12 r) nodes@2@12)) (= (inv@83@12 r) r))
  :pattern ((inv@83@12 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@83@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) r) r))
  :pattern ((inv@83@12 r))
  :qid |quant-u-150|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@85@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@83@12 r) nodes@2@12) (img@84@12 r) (= r (inv@83@12 r)))
    ($Perm.min
      (ite
        (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@85@12 r))
    $Perm.No)
  
  :qid |quant-u-152|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@83@12 r) nodes@2@12) (img@84@12 r) (= r (inv@83@12 r)))
    (= (- $Perm.Write (pTaken@85@12 r)) $Perm.No))
  
  :qid |quant-u-153|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$1@86@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$1 in nodes)
(assert (Set_in n$1@86@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@87@12 ($Ref) $Ref)
(declare-fun img@88@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$11@86@12 $Ref) (n$12@86@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@86@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n$11@86@12) n$11@86@12))
      (and
        (Set_in n$12@86@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n$12@86@12) n$12@86@12))
      (= n$11@86@12 n$12@86@12))
    (= n$11@86@12 n$12@86@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@86@12 $Ref)) (!
  (=>
    (Set_in n$1@86@12 nodes@2@12)
    (and (= (inv@87@12 n$1@86@12) n$1@86@12) (img@88@12 n$1@86@12)))
  :pattern ((Set_in n$1@86@12 nodes@2@12))
  :pattern ((inv@87@12 n$1@86@12))
  :pattern ((img@88@12 n$1@86@12))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@88@12 r) (Set_in (inv@87@12 r) nodes@2@12)) (= (inv@87@12 r) r))
  :pattern ((inv@87@12 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@87@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r) r))
  :pattern ((inv@87@12 r))
  :qid |quant-u-155|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@89@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@87@12 r) nodes@2@12) (img@88@12 r) (= r (inv@87@12 r)))
    ($Perm.min
      (ite
        (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@89@12 r))
    $Perm.No)
  
  :qid |quant-u-157|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@87@12 r) nodes@2@12) (img@88@12 r) (= r (inv@87@12 r)))
    (= (- $Perm.Write (pTaken@89@12 r)) $Perm.No))
  
  :qid |quant-u-158|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@90@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 6
; [then-branch: 44 | !(n$2@90@12 in nodes@2@12) | live]
; [else-branch: 44 | n$2@90@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 44 | !(n$2@90@12 in nodes@2@12)]
(assert (not (Set_in n$2@90@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 44 | n$2@90@12 in nodes@2@12]
(assert (Set_in n$2@90@12 nodes@2@12))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12))
(push) ; 8
(assert (not (and (img@61@12 n$2@90@12) (Set_in (inv@60@12 n$2@90@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n$2@90@12 nodes@2@12)
  (and
    (Set_in n$2@90@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12))))
(assert (or (Set_in n$2@90@12 nodes@2@12) (not (Set_in n$2@90@12 nodes@2@12))))
(push) ; 6
; [then-branch: 45 | n$2@90@12 in nodes@2@12 && Lookup(left, sm@62@12, n$2@90@12) != Null | live]
; [else-branch: 45 | !(n$2@90@12 in nodes@2@12 && Lookup(left, sm@62@12, n$2@90@12) != Null) | live]
(push) ; 7
; [then-branch: 45 | n$2@90@12 in nodes@2@12 && Lookup(left, sm@62@12, n$2@90@12) != Null]
(assert (and
  (Set_in n$2@90@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12))
(push) ; 8
(assert (not (and (img@61@12 n$2@90@12) (Set_in (inv@60@12 n$2@90@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 45 | !(n$2@90@12 in nodes@2@12 && Lookup(left, sm@62@12, n$2@90@12) != Null)]
(assert (not
  (and
    (Set_in n$2@90@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (and
    (Set_in n$2@90@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))
  (and
    (Set_in n$2@90@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@90@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null))))
  (and
    (Set_in n$2@90@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@90@12 $Ref)) (!
  (and
    (=>
      (Set_in n$2@90@12 nodes@2@12)
      (and
        (Set_in n$2@90@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12)))
    (or (Set_in n$2@90@12 nodes@2@12) (not (Set_in n$2@90@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$2@90@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))
      (and
        (Set_in n$2@90@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12)))
    (or
      (not
        (and
          (Set_in n$2@90@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null))))
      (and
        (Set_in n$2@90@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@90@12 $Ref)) (!
  (and
    (=>
      (Set_in n$2@90@12 nodes@2@12)
      (and
        (Set_in n$2@90@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12)))
    (or (Set_in n$2@90@12 nodes@2@12) (not (Set_in n$2@90@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$2@90@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))
      (and
        (Set_in n$2@90@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12)))
    (or
      (not
        (and
          (Set_in n$2@90@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null))))
      (and
        (Set_in n$2@90@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))))
  :pattern ((Set_in n$2@90@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 5
(assert (not (forall ((n$2@90@12 $Ref)) (!
  (=>
    (and
      (Set_in n$2@90@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) nodes@2@12))
  :pattern ((Set_in n$2@90@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@90@12 $Ref)) (!
  (=>
    (and
      (Set_in n$2@90@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) nodes@2@12))
  :pattern ((Set_in n$2@90@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$2@90@12) n$2@90@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@91@12 $Ref)
(push) ; 5
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 6
; [then-branch: 46 | !(n$3@91@12 in nodes@2@12) | live]
; [else-branch: 46 | n$3@91@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 46 | !(n$3@91@12 in nodes@2@12)]
(assert (not (Set_in n$3@91@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 46 | n$3@91@12 in nodes@2@12]
(assert (Set_in n$3@91@12 nodes@2@12))
; [eval] n$3.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12))
(push) ; 8
(assert (not (and (img@65@12 n$3@91@12) (Set_in (inv@64@12 n$3@91@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n$3@91@12 nodes@2@12)
  (and
    (Set_in n$3@91@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12))))
(assert (or (Set_in n$3@91@12 nodes@2@12) (not (Set_in n$3@91@12 nodes@2@12))))
(push) ; 6
; [then-branch: 47 | n$3@91@12 in nodes@2@12 && Lookup(right, sm@66@12, n$3@91@12) != Null | live]
; [else-branch: 47 | !(n$3@91@12 in nodes@2@12 && Lookup(right, sm@66@12, n$3@91@12) != Null) | live]
(push) ; 7
; [then-branch: 47 | n$3@91@12 in nodes@2@12 && Lookup(right, sm@66@12, n$3@91@12) != Null]
(assert (and
  (Set_in n$3@91@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12))
(push) ; 8
(assert (not (and (img@65@12 n$3@91@12) (Set_in (inv@64@12 n$3@91@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 47 | !(n$3@91@12 in nodes@2@12 && Lookup(right, sm@66@12, n$3@91@12) != Null)]
(assert (not
  (and
    (Set_in n$3@91@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (and
    (Set_in n$3@91@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))
  (and
    (Set_in n$3@91@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@91@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null))))
  (and
    (Set_in n$3@91@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@91@12 $Ref)) (!
  (and
    (=>
      (Set_in n$3@91@12 nodes@2@12)
      (and
        (Set_in n$3@91@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12)))
    (or (Set_in n$3@91@12 nodes@2@12) (not (Set_in n$3@91@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$3@91@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))
      (and
        (Set_in n$3@91@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12)))
    (or
      (not
        (and
          (Set_in n$3@91@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12)
              $Ref.null))))
      (and
        (Set_in n$3@91@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@91@12 $Ref)) (!
  (and
    (=>
      (Set_in n$3@91@12 nodes@2@12)
      (and
        (Set_in n$3@91@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12)))
    (or (Set_in n$3@91@12 nodes@2@12) (not (Set_in n$3@91@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$3@91@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))
      (and
        (Set_in n$3@91@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12)))
    (or
      (not
        (and
          (Set_in n$3@91@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12)
              $Ref.null))))
      (and
        (Set_in n$3@91@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))))
  :pattern ((Set_in n$3@91@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 5
(assert (not (forall ((n$3@91@12 $Ref)) (!
  (=>
    (and
      (Set_in n$3@91@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) nodes@2@12))
  :pattern ((Set_in n$3@91@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$3@91@12 $Ref)) (!
  (=>
    (and
      (Set_in n$3@91@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) nodes@2@12))
  :pattern ((Set_in n$3@91@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$3@91@12) n$3@91@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))
(push) ; 5
(assert (not (and
  (img@69@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12))
  (Set_in (inv@68@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $t@92@12 $Snap)
(assert (= $t@92@12 ($Snap.combine ($Snap.first $t@92@12) ($Snap.second $t@92@12))))
(assert (= ($Snap.first $t@92@12) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@92@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@92@12))
    ($Snap.second ($Snap.second $t@92@12)))))
(assert (= ($Snap.first ($Snap.second $t@92@12)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@92@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@92@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))
(declare-const n$4@93@12 $Ref)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@93@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@94@12 ($Ref) $Ref)
(declare-fun img@95@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@93@12 $Ref) (n$42@93@12 $Ref)) (!
  (=>
    (and
      (Set_in n$41@93@12 nodes@2@12)
      (Set_in n$42@93@12 nodes@2@12)
      (= n$41@93@12 n$42@93@12))
    (= n$41@93@12 n$42@93@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@93@12 $Ref)) (!
  (=>
    (Set_in n$4@93@12 nodes@2@12)
    (and (= (inv@94@12 n$4@93@12) n$4@93@12) (img@95@12 n$4@93@12)))
  :pattern ((Set_in n$4@93@12 nodes@2@12))
  :pattern ((inv@94@12 n$4@93@12))
  :pattern ((img@95@12 n$4@93@12))
  :qid |quant-u-160|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12)) (= (inv@94@12 r) r))
  :pattern ((inv@94@12 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@93@12 $Ref)) (!
  (=> (Set_in n$4@93@12 nodes@2@12) (not (= n$4@93@12 $Ref.null)))
  :pattern ((Set_in n$4@93@12 nodes@2@12))
  :pattern ((inv@94@12 n$4@93@12))
  :pattern ((img@95@12 n$4@93@12))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@96@12 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@94@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) r) r))
  :pattern ((inv@94@12 r))
  :qid |quant-u-161|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@92@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))
(declare-const n$5@97@12 $Ref)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@97@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@98@12 ($Ref) $Ref)
(declare-fun img@99@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@97@12 $Ref) (n$52@97@12 $Ref)) (!
  (=>
    (and
      (Set_in n$51@97@12 nodes@2@12)
      (Set_in n$52@97@12 nodes@2@12)
      (= n$51@97@12 n$52@97@12))
    (= n$51@97@12 n$52@97@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@97@12 $Ref)) (!
  (=>
    (Set_in n$5@97@12 nodes@2@12)
    (and (= (inv@98@12 n$5@97@12) n$5@97@12) (img@99@12 n$5@97@12)))
  :pattern ((Set_in n$5@97@12 nodes@2@12))
  :pattern ((inv@98@12 n$5@97@12))
  :pattern ((img@99@12 n$5@97@12))
  :qid |quant-u-163|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12)) (= (inv@98@12 r) r))
  :pattern ((inv@98@12 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@97@12 $Ref)) (!
  (=> (Set_in n$5@97@12 nodes@2@12) (not (= n$5@97@12 $Ref.null)))
  :pattern ((Set_in n$5@97@12 nodes@2@12))
  :pattern ((inv@98@12 n$5@97@12))
  :pattern ((img@99@12 n$5@97@12))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@100@12 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@98@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) r) r))
  :pattern ((inv@98@12 r))
  :qid |quant-u-164|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))
(declare-const n$6@101@12 $Ref)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@101@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@102@12 ($Ref) $Ref)
(declare-fun img@103@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@101@12 $Ref) (n$62@101@12 $Ref)) (!
  (=>
    (and
      (Set_in n$61@101@12 nodes@2@12)
      (Set_in n$62@101@12 nodes@2@12)
      (= n$61@101@12 n$62@101@12))
    (= n$61@101@12 n$62@101@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@101@12 $Ref)) (!
  (=>
    (Set_in n$6@101@12 nodes@2@12)
    (and (= (inv@102@12 n$6@101@12) n$6@101@12) (img@103@12 n$6@101@12)))
  :pattern ((Set_in n$6@101@12 nodes@2@12))
  :pattern ((inv@102@12 n$6@101@12))
  :pattern ((img@103@12 n$6@101@12))
  :qid |quant-u-166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (= (inv@102@12 r) r))
  :pattern ((inv@102@12 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@101@12 $Ref)) (!
  (=> (Set_in n$6@101@12 nodes@2@12) (not (= n$6@101@12 $Ref.null)))
  :pattern ((Set_in n$6@101@12 nodes@2@12))
  :pattern ((inv@102@12 n$6@101@12))
  :pattern ((img@103@12 n$6@101@12))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@104@12 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@102@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r) r))
  :pattern ((inv@102@12 r))
  :qid |quant-u-167|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@105@12 $Ref)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 48 | !(n$7@105@12 in nodes@2@12) | live]
; [else-branch: 48 | n$7@105@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 48 | !(n$7@105@12 in nodes@2@12)]
(assert (not (Set_in n$7@105@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 48 | n$7@105@12 in nodes@2@12]
(assert (Set_in n$7@105@12 nodes@2@12))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12))
(push) ; 8
(assert (not (and (img@95@12 n$7@105@12) (Set_in (inv@94@12 n$7@105@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (Set_in n$7@105@12 nodes@2@12)
  (and
    (Set_in n$7@105@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12))))
(assert (or (Set_in n$7@105@12 nodes@2@12) (not (Set_in n$7@105@12 nodes@2@12))))
(push) ; 6
; [then-branch: 49 | n$7@105@12 in nodes@2@12 && Lookup(left, sm@96@12, n$7@105@12) != Null | live]
; [else-branch: 49 | !(n$7@105@12 in nodes@2@12 && Lookup(left, sm@96@12, n$7@105@12) != Null) | live]
(push) ; 7
; [then-branch: 49 | n$7@105@12 in nodes@2@12 && Lookup(left, sm@96@12, n$7@105@12) != Null]
(assert (and
  (Set_in n$7@105@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12))
(push) ; 8
(assert (not (and (img@95@12 n$7@105@12) (Set_in (inv@94@12 n$7@105@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 49 | !(n$7@105@12 in nodes@2@12 && Lookup(left, sm@96@12, n$7@105@12) != Null)]
(assert (not
  (and
    (Set_in n$7@105@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (and
    (Set_in n$7@105@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null)))
  (and
    (Set_in n$7@105@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@105@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null))))
  (and
    (Set_in n$7@105@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@105@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@105@12 nodes@2@12)
      (and
        (Set_in n$7@105@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12)))
    (or (Set_in n$7@105@12 nodes@2@12) (not (Set_in n$7@105@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@105@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null)))
      (and
        (Set_in n$7@105@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12)))
    (or
      (not
        (and
          (Set_in n$7@105@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null))))
      (and
        (Set_in n$7@105@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@105@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@105@12 nodes@2@12)
      (and
        (Set_in n$7@105@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12)))
    (or (Set_in n$7@105@12 nodes@2@12) (not (Set_in n$7@105@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@105@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null)))
      (and
        (Set_in n$7@105@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12)))
    (or
      (not
        (and
          (Set_in n$7@105@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null))))
      (and
        (Set_in n$7@105@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null)))))
  :pattern ((Set_in n$7@105@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@105@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@105@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) nodes@2@12))
  :pattern ((Set_in n$7@105@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@105@12) n$7@105@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@106@12 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 50 | !(n$8@106@12 in nodes@2@12) | live]
; [else-branch: 50 | n$8@106@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 50 | !(n$8@106@12 in nodes@2@12)]
(assert (not (Set_in n$8@106@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 50 | n$8@106@12 in nodes@2@12]
(assert (Set_in n$8@106@12 nodes@2@12))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12))
(push) ; 8
(assert (not (and (img@99@12 n$8@106@12) (Set_in (inv@98@12 n$8@106@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (Set_in n$8@106@12 nodes@2@12)
  (and
    (Set_in n$8@106@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12))))
(assert (or (Set_in n$8@106@12 nodes@2@12) (not (Set_in n$8@106@12 nodes@2@12))))
(push) ; 6
; [then-branch: 51 | n$8@106@12 in nodes@2@12 && Lookup(right, sm@100@12, n$8@106@12) != Null | live]
; [else-branch: 51 | !(n$8@106@12 in nodes@2@12 && Lookup(right, sm@100@12, n$8@106@12) != Null) | live]
(push) ; 7
; [then-branch: 51 | n$8@106@12 in nodes@2@12 && Lookup(right, sm@100@12, n$8@106@12) != Null]
(assert (and
  (Set_in n$8@106@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12))
(push) ; 8
(assert (not (and (img@99@12 n$8@106@12) (Set_in (inv@98@12 n$8@106@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 51 | !(n$8@106@12 in nodes@2@12 && Lookup(right, sm@100@12, n$8@106@12) != Null)]
(assert (not
  (and
    (Set_in n$8@106@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (and
    (Set_in n$8@106@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) $Ref.null)))
  (and
    (Set_in n$8@106@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@106@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) $Ref.null))))
  (and
    (Set_in n$8@106@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@106@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@106@12 nodes@2@12)
      (and
        (Set_in n$8@106@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12)))
    (or (Set_in n$8@106@12 nodes@2@12) (not (Set_in n$8@106@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@106@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12)
            $Ref.null)))
      (and
        (Set_in n$8@106@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12)))
    (or
      (not
        (and
          (Set_in n$8@106@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12)
              $Ref.null))))
      (and
        (Set_in n$8@106@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@106@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@106@12 nodes@2@12)
      (and
        (Set_in n$8@106@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12)))
    (or (Set_in n$8@106@12 nodes@2@12) (not (Set_in n$8@106@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@106@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12)
            $Ref.null)))
      (and
        (Set_in n$8@106@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12)))
    (or
      (not
        (and
          (Set_in n$8@106@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12)
              $Ref.null))))
      (and
        (Set_in n$8@106@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12)
            $Ref.null)))))
  :pattern ((Set_in n$8@106@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@106@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@106@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) nodes@2@12))
  :pattern ((Set_in n$8@106@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@106@12) n$8@106@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@107@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 52 | n@107@12 in nodes@2@12 | live]
; [else-branch: 52 | !(n@107@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 52 | n@107@12 in nodes@2@12]
(assert (Set_in n@107@12 nodes@2@12))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12) n@107@12))
(push) ; 8
(assert (not (and (img@69@12 n@107@12) (Set_in (inv@68@12 n@107@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 53 | Lookup(is_marked, sm@70@12, n@107@12) | live]
; [else-branch: 53 | !(Lookup(is_marked, sm@70@12, n@107@12)) | live]
(push) ; 9
; [then-branch: 53 | Lookup(is_marked, sm@70@12, n@107@12)]
(assert ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@107@12) n@107@12))
(push) ; 10
(assert (not (and (img@103@12 n@107@12) (Set_in (inv@102@12 n@107@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 53 | !(Lookup(is_marked, sm@70@12, n@107@12))]
(assert (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)
  (and
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@107@12) n@107@12))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12))
  ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 52 | !(n@107@12 in nodes@2@12)]
(assert (not (Set_in n@107@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (Set_in n@107@12 nodes@2@12)
  (and
    (Set_in n@107@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12) n@107@12)
    (=>
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)
      (and
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@107@12) n@107@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12))
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)))))
; Joined path conditions
(assert (or (not (Set_in n@107@12 nodes@2@12)) (Set_in n@107@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@107@12 $Ref)) (!
  (and
    (=>
      (Set_in n@107@12 nodes@2@12)
      (and
        (Set_in n@107@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12) n@107@12)
        (=>
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)
          (and
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@107@12) n@107@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12))))
    (or (not (Set_in n@107@12 nodes@2@12)) (Set_in n@107@12 nodes@2@12)))
  :pattern ((Set_in n@107@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@107@12) n@107@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@107@12 $Ref)) (!
  (=>
    (and
      (Set_in n@107@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@107@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@107@12))
  :pattern ((Set_in n@107@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@107@12) n@107@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))
(push) ; 5
(assert (not (and
  (img@103@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12))
  (Set_in (inv@102@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@108@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 54 | n@108@12 in nodes@2@12 | live]
; [else-branch: 54 | !(n@108@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 54 | n@108@12 in nodes@2@12]
(assert (Set_in n@108@12 nodes@2@12))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@108@12) n@108@12))
(push) ; 8
(assert (not (and (img@95@12 n@108@12) (Set_in (inv@94@12 n@108@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@108@12) n@108@12))
(push) ; 8
(assert (not (and (img@61@12 n@108@12) (Set_in (inv@60@12 n@108@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 54 | !(n@108@12 in nodes@2@12)]
(assert (not (Set_in n@108@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n@108@12 nodes@2@12)
  (and
    (Set_in n@108@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@108@12) n@108@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@108@12) n@108@12))))
; Joined path conditions
(assert (or (not (Set_in n@108@12 nodes@2@12)) (Set_in n@108@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@108@12 $Ref)) (!
  (and
    (=>
      (Set_in n@108@12 nodes@2@12)
      (and
        (Set_in n@108@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@108@12) n@108@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@108@12) n@108@12)))
    (or (not (Set_in n@108@12 nodes@2@12)) (Set_in n@108@12 nodes@2@12)))
  :pattern ((Set_in n@108@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@108@12) n@108@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@108@12 $Ref)) (!
  (=>
    (Set_in n@108@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@108@12)
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@108@12)))
  :pattern ((Set_in n@108@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@108@12) n@108@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@109@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 55 | n@109@12 in nodes@2@12 | live]
; [else-branch: 55 | !(n@109@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 55 | n@109@12 in nodes@2@12]
(assert (Set_in n@109@12 nodes@2@12))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@109@12) n@109@12))
(push) ; 8
(assert (not (and (img@99@12 n@109@12) (Set_in (inv@98@12 n@109@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@109@12) n@109@12))
(push) ; 8
(assert (not (and (img@65@12 n@109@12) (Set_in (inv@64@12 n@109@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 55 | !(n@109@12 in nodes@2@12)]
(assert (not (Set_in n@109@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n@109@12 nodes@2@12)
  (and
    (Set_in n@109@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@109@12) n@109@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@109@12) n@109@12))))
; Joined path conditions
(assert (or (not (Set_in n@109@12 nodes@2@12)) (Set_in n@109@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@109@12 $Ref)) (!
  (and
    (=>
      (Set_in n@109@12 nodes@2@12)
      (and
        (Set_in n@109@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@109@12) n@109@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@109@12) n@109@12)))
    (or (not (Set_in n@109@12 nodes@2@12)) (Set_in n@109@12 nodes@2@12)))
  :pattern ((Set_in n@109@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@109@12) n@109@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@109@12 $Ref)) (!
  (=>
    (Set_in n@109@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@109@12)
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@109@12)))
  :pattern ((Set_in n@109@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@109@12) n@109@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@110@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 56 | n@110@12 in nodes@2@12 | live]
; [else-branch: 56 | !(n@110@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 56 | n@110@12 in nodes@2@12]
(assert (Set_in n@110@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12) n@110@12))
(push) ; 8
(assert (not (and (img@69@12 n@110@12) (Set_in (inv@68@12 n@110@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 57 | Lookup(is_marked, sm@70@12, n@110@12) | live]
; [else-branch: 57 | !(Lookup(is_marked, sm@70@12, n@110@12)) | live]
(push) ; 9
; [then-branch: 57 | Lookup(is_marked, sm@70@12, n@110@12)]
(assert ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
(pop) ; 9
(push) ; 9
; [else-branch: 57 | !(Lookup(is_marked, sm@70@12, n@110@12))]
(assert (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12) n@110@12))
(push) ; 10
(assert (not (and (img@103@12 n@110@12) (Set_in (inv@102@12 n@110@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12) n@110@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
  ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12)))
(push) ; 8
; [then-branch: 58 | !(Lookup(is_marked, sm@70@12, n@110@12)) && Lookup(is_marked, sm@104@12, n@110@12) | live]
; [else-branch: 58 | !(!(Lookup(is_marked, sm@70@12, n@110@12)) && Lookup(is_marked, sm@104@12, n@110@12)) | live]
(push) ; 9
; [then-branch: 58 | !(Lookup(is_marked, sm@70@12, n@110@12)) && Lookup(is_marked, sm@104@12, n@110@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
  ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) n@110@12))
(push) ; 10
(assert (not (and (img@95@12 n@110@12) (Set_in (inv@94@12 n@110@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 59 | Lookup(left, sm@96@12, n@110@12) == Null | live]
; [else-branch: 59 | Lookup(left, sm@96@12, n@110@12) != Null | live]
(push) ; 11
; [then-branch: 59 | Lookup(left, sm@96@12, n@110@12) == Null]
(assert (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 59 | Lookup(left, sm@96@12, n@110@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(push) ; 12
(assert (not (and (img@95@12 n@110@12) (Set_in (inv@94@12 n@110@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)))
(push) ; 12
(assert (not (and
  (img@103@12 ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12))
  (Set_in (inv@102@12 ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 58 | !(!(Lookup(is_marked, sm@70@12, n@110@12)) && Lookup(is_marked, sm@104@12, n@110@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) n@110@12)
    (=>
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12))))
    (or
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
      (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 56 | !(n@110@12 in nodes@2@12)]
(assert (not (Set_in n@110@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (Set_in n@110@12 nodes@2@12)
  (and
    (Set_in n@110@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12) n@110@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12) n@110@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) n@110@12)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
          ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12))))))
; Joined path conditions
(assert (or (not (Set_in n@110@12 nodes@2@12)) (Set_in n@110@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@110@12 $Ref)) (!
  (and
    (=>
      (Set_in n@110@12 nodes@2@12)
      (and
        (Set_in n@110@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12) n@110@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12) n@110@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) n@110@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
              ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)))))
    (or (not (Set_in n@110@12 nodes@2@12)) (Set_in n@110@12 nodes@2@12)))
  :pattern ((Set_in n@110@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12) n@110@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@110@12 $Ref)) (!
  (and
    (=>
      (Set_in n@110@12 nodes@2@12)
      (and
        (Set_in n@110@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12) n@110@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12) n@110@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) n@110@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
              ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)))))
    (or (not (Set_in n@110@12 nodes@2@12)) (Set_in n@110@12 nodes@2@12)))
  :pattern ((Set_in n@110@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) n@110@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@110@12 $Ref)) (!
  (=>
    (and
      (Set_in n@110@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@110@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12)))
    (or
      (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12))))
  :pattern ((Set_in n@110@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@110@12) n@110@12))
  :pattern ((Set_in n@110@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12) n@110@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@110@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@111@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 60 | n@111@12 in nodes@2@12 | live]
; [else-branch: 60 | !(n@111@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 60 | n@111@12 in nodes@2@12]
(assert (Set_in n@111@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12) n@111@12))
(push) ; 8
(assert (not (and (img@69@12 n@111@12) (Set_in (inv@68@12 n@111@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 61 | Lookup(is_marked, sm@70@12, n@111@12) | live]
; [else-branch: 61 | !(Lookup(is_marked, sm@70@12, n@111@12)) | live]
(push) ; 9
; [then-branch: 61 | Lookup(is_marked, sm@70@12, n@111@12)]
(assert ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
(pop) ; 9
(push) ; 9
; [else-branch: 61 | !(Lookup(is_marked, sm@70@12, n@111@12))]
(assert (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12) n@111@12))
(push) ; 10
(assert (not (and (img@103@12 n@111@12) (Set_in (inv@102@12 n@111@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12) n@111@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
  ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12)))
(push) ; 8
; [then-branch: 62 | !(Lookup(is_marked, sm@70@12, n@111@12)) && Lookup(is_marked, sm@104@12, n@111@12) | live]
; [else-branch: 62 | !(!(Lookup(is_marked, sm@70@12, n@111@12)) && Lookup(is_marked, sm@104@12, n@111@12)) | live]
(push) ; 9
; [then-branch: 62 | !(Lookup(is_marked, sm@70@12, n@111@12)) && Lookup(is_marked, sm@104@12, n@111@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
  ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) n@111@12))
(push) ; 10
(assert (not (and (img@99@12 n@111@12) (Set_in (inv@98@12 n@111@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 63 | Lookup(right, sm@100@12, n@111@12) == Null | live]
; [else-branch: 63 | Lookup(right, sm@100@12, n@111@12) != Null | live]
(push) ; 11
; [then-branch: 63 | Lookup(right, sm@100@12, n@111@12) == Null]
(assert (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 63 | Lookup(right, sm@100@12, n@111@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(push) ; 12
(assert (not (and (img@99@12 n@111@12) (Set_in (inv@98@12 n@111@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)))
(push) ; 12
(assert (not (and
  (img@103@12 ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12))
  (Set_in (inv@102@12 ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 62 | !(!(Lookup(is_marked, sm@70@12, n@111@12)) && Lookup(is_marked, sm@104@12, n@111@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) n@111@12)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null))
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 60 | !(n@111@12 in nodes@2@12)]
(assert (not (Set_in n@111@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (Set_in n@111@12 nodes@2@12)
  (and
    (Set_in n@111@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12) n@111@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12) n@111@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) n@111@12)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
          ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12))))))
; Joined path conditions
(assert (or (not (Set_in n@111@12 nodes@2@12)) (Set_in n@111@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@111@12 $Ref)) (!
  (and
    (=>
      (Set_in n@111@12 nodes@2@12)
      (and
        (Set_in n@111@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12) n@111@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12) n@111@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) n@111@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
              ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)))))
    (or (not (Set_in n@111@12 nodes@2@12)) (Set_in n@111@12 nodes@2@12)))
  :pattern ((Set_in n@111@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12) n@111@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@111@12 $Ref)) (!
  (and
    (=>
      (Set_in n@111@12 nodes@2@12)
      (and
        (Set_in n@111@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12) n@111@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12) n@111@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) n@111@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
              ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)))))
    (or (not (Set_in n@111@12 nodes@2@12)) (Set_in n@111@12 nodes@2@12)))
  :pattern ((Set_in n@111@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) n@111@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@111@12 $Ref)) (!
  (=>
    (and
      (Set_in n@111@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@111@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12)))
    (or
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12))))
  :pattern ((Set_in n@111@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@111@12) n@111@12))
  :pattern ((Set_in n@111@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12) n@111@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@111@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (node in nodes)
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n$4@112@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@112@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@113@12 ($Ref) $Ref)
(declare-fun img@114@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@112@12 $Ref) (n$42@112@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@112@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$41@112@12) n$41@112@12))
      (and
        (Set_in n$42@112@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$42@112@12) n$42@112@12))
      (= n$41@112@12 n$42@112@12))
    (= n$41@112@12 n$42@112@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@112@12 $Ref)) (!
  (=>
    (Set_in n$4@112@12 nodes@2@12)
    (and (= (inv@113@12 n$4@112@12) n$4@112@12) (img@114@12 n$4@112@12)))
  :pattern ((Set_in n$4@112@12 nodes@2@12))
  :pattern ((inv@113@12 n$4@112@12))
  :pattern ((img@114@12 n$4@112@12))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@114@12 r) (Set_in (inv@113@12 r) nodes@2@12))
    (= (inv@113@12 r) r))
  :pattern ((inv@113@12 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@113@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) r) r))
  :pattern ((inv@113@12 r))
  :qid |quant-u-169|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@115@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@113@12 r) nodes@2@12) (img@114@12 r) (= r (inv@113@12 r)))
    ($Perm.min
      (ite
        (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@115@12 r))
    $Perm.No)
  
  :qid |quant-u-171|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@113@12 r) nodes@2@12) (img@114@12 r) (= r (inv@113@12 r)))
    (= (- $Perm.Write (pTaken@115@12 r)) $Perm.No))
  
  :qid |quant-u-172|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$5@116@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@116@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@117@12 ($Ref) $Ref)
(declare-fun img@118@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@116@12 $Ref) (n$52@116@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@116@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$51@116@12) n$51@116@12))
      (and
        (Set_in n$52@116@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$52@116@12) n$52@116@12))
      (= n$51@116@12 n$52@116@12))
    (= n$51@116@12 n$52@116@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@116@12 $Ref)) (!
  (=>
    (Set_in n$5@116@12 nodes@2@12)
    (and (= (inv@117@12 n$5@116@12) n$5@116@12) (img@118@12 n$5@116@12)))
  :pattern ((Set_in n$5@116@12 nodes@2@12))
  :pattern ((inv@117@12 n$5@116@12))
  :pattern ((img@118@12 n$5@116@12))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@118@12 r) (Set_in (inv@117@12 r) nodes@2@12))
    (= (inv@117@12 r) r))
  :pattern ((inv@117@12 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@117@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) r) r))
  :pattern ((inv@117@12 r))
  :qid |quant-u-174|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@119@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@117@12 r) nodes@2@12) (img@118@12 r) (= r (inv@117@12 r)))
    ($Perm.min
      (ite
        (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@119@12 r))
    $Perm.No)
  
  :qid |quant-u-176|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@117@12 r) nodes@2@12) (img@118@12 r) (= r (inv@117@12 r)))
    (= (- $Perm.Write (pTaken@119@12 r)) $Perm.No))
  
  :qid |quant-u-177|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$6@120@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@120@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@121@12 ($Ref) $Ref)
(declare-fun img@122@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@120@12 $Ref) (n$62@120@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$61@120@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n$61@120@12) n$61@120@12))
      (and
        (Set_in n$62@120@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n$62@120@12) n$62@120@12))
      (= n$61@120@12 n$62@120@12))
    (= n$61@120@12 n$62@120@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@120@12 $Ref)) (!
  (=>
    (Set_in n$6@120@12 nodes@2@12)
    (and (= (inv@121@12 n$6@120@12) n$6@120@12) (img@122@12 n$6@120@12)))
  :pattern ((Set_in n$6@120@12 nodes@2@12))
  :pattern ((inv@121@12 n$6@120@12))
  :pattern ((img@122@12 n$6@120@12))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@122@12 r) (Set_in (inv@121@12 r) nodes@2@12))
    (= (inv@121@12 r) r))
  :pattern ((inv@121@12 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@121@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r) r))
  :pattern ((inv@121@12 r))
  :qid |quant-u-179|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@123@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@121@12 r) nodes@2@12) (img@122@12 r) (= r (inv@121@12 r)))
    ($Perm.min
      (ite
        (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@123@12 r))
    $Perm.No)
  
  :qid |quant-u-181|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@121@12 r) nodes@2@12) (img@122@12 r) (= r (inv@121@12 r)))
    (= (- $Perm.Write (pTaken@123@12 r)) $Perm.No))
  
  :qid |quant-u-182|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@124@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 64 | !(n$7@124@12 in nodes@2@12) | live]
; [else-branch: 64 | n$7@124@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 64 | !(n$7@124@12 in nodes@2@12)]
(assert (not (Set_in n$7@124@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 64 | n$7@124@12 in nodes@2@12]
(assert (Set_in n$7@124@12 nodes@2@12))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12))
(push) ; 8
(assert (not (and (img@95@12 n$7@124@12) (Set_in (inv@94@12 n$7@124@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (Set_in n$7@124@12 nodes@2@12)
  (and
    (Set_in n$7@124@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12))))
(assert (or (Set_in n$7@124@12 nodes@2@12) (not (Set_in n$7@124@12 nodes@2@12))))
(push) ; 6
; [then-branch: 65 | n$7@124@12 in nodes@2@12 && Lookup(left, sm@96@12, n$7@124@12) != Null | live]
; [else-branch: 65 | !(n$7@124@12 in nodes@2@12 && Lookup(left, sm@96@12, n$7@124@12) != Null) | live]
(push) ; 7
; [then-branch: 65 | n$7@124@12 in nodes@2@12 && Lookup(left, sm@96@12, n$7@124@12) != Null]
(assert (and
  (Set_in n$7@124@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12))
(push) ; 8
(assert (not (and (img@95@12 n$7@124@12) (Set_in (inv@94@12 n$7@124@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 65 | !(n$7@124@12 in nodes@2@12 && Lookup(left, sm@96@12, n$7@124@12) != Null)]
(assert (not
  (and
    (Set_in n$7@124@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (and
    (Set_in n$7@124@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))
  (and
    (Set_in n$7@124@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@124@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null))))
  (and
    (Set_in n$7@124@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@124@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@124@12 nodes@2@12)
      (and
        (Set_in n$7@124@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12)))
    (or (Set_in n$7@124@12 nodes@2@12) (not (Set_in n$7@124@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@124@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))
      (and
        (Set_in n$7@124@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12)))
    (or
      (not
        (and
          (Set_in n$7@124@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null))))
      (and
        (Set_in n$7@124@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@124@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@124@12 nodes@2@12)
      (and
        (Set_in n$7@124@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12)))
    (or (Set_in n$7@124@12 nodes@2@12) (not (Set_in n$7@124@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@124@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))
      (and
        (Set_in n$7@124@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12)))
    (or
      (not
        (and
          (Set_in n$7@124@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null))))
      (and
        (Set_in n$7@124@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))))
  :pattern ((Set_in n$7@124@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$7@124@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@124@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) nodes@2@12))
  :pattern ((Set_in n$7@124@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$7@124@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@124@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) nodes@2@12))
  :pattern ((Set_in n$7@124@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n$7@124@12) n$7@124@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@125@12 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 66 | !(n$8@125@12 in nodes@2@12) | live]
; [else-branch: 66 | n$8@125@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 66 | !(n$8@125@12 in nodes@2@12)]
(assert (not (Set_in n$8@125@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 66 | n$8@125@12 in nodes@2@12]
(assert (Set_in n$8@125@12 nodes@2@12))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12))
(push) ; 8
(assert (not (and (img@99@12 n$8@125@12) (Set_in (inv@98@12 n$8@125@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (Set_in n$8@125@12 nodes@2@12)
  (and
    (Set_in n$8@125@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12))))
(assert (or (Set_in n$8@125@12 nodes@2@12) (not (Set_in n$8@125@12 nodes@2@12))))
(push) ; 6
; [then-branch: 67 | n$8@125@12 in nodes@2@12 && Lookup(right, sm@100@12, n$8@125@12) != Null | live]
; [else-branch: 67 | !(n$8@125@12 in nodes@2@12 && Lookup(right, sm@100@12, n$8@125@12) != Null) | live]
(push) ; 7
; [then-branch: 67 | n$8@125@12 in nodes@2@12 && Lookup(right, sm@100@12, n$8@125@12) != Null]
(assert (and
  (Set_in n$8@125@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12))
(push) ; 8
(assert (not (and (img@99@12 n$8@125@12) (Set_in (inv@98@12 n$8@125@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 67 | !(n$8@125@12 in nodes@2@12 && Lookup(right, sm@100@12, n$8@125@12) != Null)]
(assert (not
  (and
    (Set_in n$8@125@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (and
    (Set_in n$8@125@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) $Ref.null)))
  (and
    (Set_in n$8@125@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@125@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) $Ref.null))))
  (and
    (Set_in n$8@125@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@125@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@125@12 nodes@2@12)
      (and
        (Set_in n$8@125@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12)))
    (or (Set_in n$8@125@12 nodes@2@12) (not (Set_in n$8@125@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@125@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12)
            $Ref.null)))
      (and
        (Set_in n$8@125@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12)))
    (or
      (not
        (and
          (Set_in n$8@125@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12)
              $Ref.null))))
      (and
        (Set_in n$8@125@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@125@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@125@12 nodes@2@12)
      (and
        (Set_in n$8@125@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12)))
    (or (Set_in n$8@125@12 nodes@2@12) (not (Set_in n$8@125@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@125@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12)
            $Ref.null)))
      (and
        (Set_in n$8@125@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12)))
    (or
      (not
        (and
          (Set_in n$8@125@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12)
              $Ref.null))))
      (and
        (Set_in n$8@125@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12)
            $Ref.null)))))
  :pattern ((Set_in n$8@125@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$8@125@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@125@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) nodes@2@12))
  :pattern ((Set_in n$8@125@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$8@125@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@125@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) nodes@2@12))
  :pattern ((Set_in n$8@125@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n$8@125@12) n$8@125@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@126@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 68 | n@126@12 in nodes@2@12 | live]
; [else-branch: 68 | !(n@126@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 68 | n@126@12 in nodes@2@12]
(assert (Set_in n@126@12 nodes@2@12))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12) n@126@12))
(push) ; 8
(assert (not (and (img@15@12 n@126@12) (Set_in (inv@14@12 n@126@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 69 | Lookup(is_marked, sm@16@12, n@126@12) | live]
; [else-branch: 69 | !(Lookup(is_marked, sm@16@12, n@126@12)) | live]
(push) ; 9
; [then-branch: 69 | Lookup(is_marked, sm@16@12, n@126@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12) n@126@12))
(push) ; 10
(assert (not (and (img@103@12 n@126@12) (Set_in (inv@102@12 n@126@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 69 | !(Lookup(is_marked, sm@16@12, n@126@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)
  (and
    ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12) n@126@12))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 68 | !(n@126@12 in nodes@2@12)]
(assert (not (Set_in n@126@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (Set_in n@126@12 nodes@2@12)
  (and
    (Set_in n@126@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12) n@126@12)
    (=>
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)
      (and
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12) n@126@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)))))
; Joined path conditions
(assert (or (not (Set_in n@126@12 nodes@2@12)) (Set_in n@126@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@126@12 $Ref)) (!
  (and
    (=>
      (Set_in n@126@12 nodes@2@12)
      (and
        (Set_in n@126@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12) n@126@12)
        (=>
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)
          (and
            ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12) n@126@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12))))
    (or (not (Set_in n@126@12 nodes@2@12)) (Set_in n@126@12 nodes@2@12)))
  :pattern ((Set_in n@126@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12) n@126@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(push) ; 5
(assert (not (forall ((n@126@12 $Ref)) (!
  (=>
    (and
      (Set_in n@126@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12))
  :pattern ((Set_in n@126@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12) n@126@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@126@12 $Ref)) (!
  (=>
    (and
      (Set_in n@126@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@126@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12))
  :pattern ((Set_in n@126@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@126@12) n@126@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) node@3@12) node@3@12))
(push) ; 5
(assert (not (and (img@103@12 node@3@12) (Set_in (inv@102@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) node@3@12)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) node@3@12))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@127@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 70 | n@127@12 in nodes@2@12 | live]
; [else-branch: 70 | !(n@127@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 70 | n@127@12 in nodes@2@12]
(assert (Set_in n@127@12 nodes@2@12))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@127@12) n@127@12))
(push) ; 8
(assert (not (and (img@95@12 n@127@12) (Set_in (inv@94@12 n@127@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@127@12) n@127@12))
(push) ; 8
(assert (not (and (img@7@12 n@127@12) (Set_in (inv@6@12 n@127@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 70 | !(n@127@12 in nodes@2@12)]
(assert (not (Set_in n@127@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@127@12 nodes@2@12)
  (and
    (Set_in n@127@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@127@12) n@127@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@127@12) n@127@12))))
; Joined path conditions
(assert (or (not (Set_in n@127@12 nodes@2@12)) (Set_in n@127@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@127@12 $Ref)) (!
  (and
    (=>
      (Set_in n@127@12 nodes@2@12)
      (and
        (Set_in n@127@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@127@12) n@127@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@127@12) n@127@12)))
    (or (not (Set_in n@127@12 nodes@2@12)) (Set_in n@127@12 nodes@2@12)))
  :pattern ((Set_in n@127@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@127@12) n@127@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(push) ; 5
(assert (not (forall ((n@127@12 $Ref)) (!
  (=>
    (Set_in n@127@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@127@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@127@12)))
  :pattern ((Set_in n@127@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@127@12) n@127@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@127@12 $Ref)) (!
  (=>
    (Set_in n@127@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@127@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@127@12)))
  :pattern ((Set_in n@127@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@127@12) n@127@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@128@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 71 | n@128@12 in nodes@2@12 | live]
; [else-branch: 71 | !(n@128@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 71 | n@128@12 in nodes@2@12]
(assert (Set_in n@128@12 nodes@2@12))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@128@12) n@128@12))
(push) ; 8
(assert (not (and (img@99@12 n@128@12) (Set_in (inv@98@12 n@128@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@128@12) n@128@12))
(push) ; 8
(assert (not (and (img@11@12 n@128@12) (Set_in (inv@10@12 n@128@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 71 | !(n@128@12 in nodes@2@12)]
(assert (not (Set_in n@128@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@128@12 nodes@2@12)
  (and
    (Set_in n@128@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@128@12) n@128@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@128@12) n@128@12))))
; Joined path conditions
(assert (or (not (Set_in n@128@12 nodes@2@12)) (Set_in n@128@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@128@12 $Ref)) (!
  (and
    (=>
      (Set_in n@128@12 nodes@2@12)
      (and
        (Set_in n@128@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@128@12) n@128@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@128@12) n@128@12)))
    (or (not (Set_in n@128@12 nodes@2@12)) (Set_in n@128@12 nodes@2@12)))
  :pattern ((Set_in n@128@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@128@12) n@128@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(push) ; 5
(assert (not (forall ((n@128@12 $Ref)) (!
  (=>
    (Set_in n@128@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@128@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@128@12)))
  :pattern ((Set_in n@128@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@128@12) n@128@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@128@12 $Ref)) (!
  (=>
    (Set_in n@128@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@128@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@128@12)))
  :pattern ((Set_in n@128@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@128@12) n@128@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@129@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 72 | n@129@12 in nodes@2@12 | live]
; [else-branch: 72 | !(n@129@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 72 | n@129@12 in nodes@2@12]
(assert (Set_in n@129@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12) n@129@12))
(push) ; 8
(assert (not (and (img@15@12 n@129@12) (Set_in (inv@14@12 n@129@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 73 | Lookup(is_marked, sm@16@12, n@129@12) | live]
; [else-branch: 73 | !(Lookup(is_marked, sm@16@12, n@129@12)) | live]
(push) ; 9
; [then-branch: 73 | Lookup(is_marked, sm@16@12, n@129@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
(pop) ; 9
(push) ; 9
; [else-branch: 73 | !(Lookup(is_marked, sm@16@12, n@129@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12) n@129@12))
(push) ; 10
(assert (not (and (img@103@12 n@129@12) (Set_in (inv@102@12 n@129@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12) n@129@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12)))
(push) ; 8
; [then-branch: 74 | !(Lookup(is_marked, sm@16@12, n@129@12)) && Lookup(is_marked, sm@104@12, n@129@12) | live]
; [else-branch: 74 | !(!(Lookup(is_marked, sm@16@12, n@129@12)) && Lookup(is_marked, sm@104@12, n@129@12)) | live]
(push) ; 9
; [then-branch: 74 | !(Lookup(is_marked, sm@16@12, n@129@12)) && Lookup(is_marked, sm@104@12, n@129@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
  ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) n@129@12))
(push) ; 10
(assert (not (and (img@95@12 n@129@12) (Set_in (inv@94@12 n@129@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 75 | Lookup(left, sm@96@12, n@129@12) == Null | live]
; [else-branch: 75 | Lookup(left, sm@96@12, n@129@12) != Null | live]
(push) ; 11
; [then-branch: 75 | Lookup(left, sm@96@12, n@129@12) == Null]
(assert (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 75 | Lookup(left, sm@96@12, n@129@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(push) ; 12
(assert (not (and (img@95@12 n@129@12) (Set_in (inv@94@12 n@129@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)))
(push) ; 12
(assert (not (and
  (img@103@12 ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12))
  (Set_in (inv@102@12 ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 74 | !(!(Lookup(is_marked, sm@16@12, n@129@12)) && Lookup(is_marked, sm@104@12, n@129@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) n@129@12)
    (=>
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12))))
    (or
      (not (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
      (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 72 | !(n@129@12 in nodes@2@12)]
(assert (not (Set_in n@129@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (Set_in n@129@12 nodes@2@12)
  (and
    (Set_in n@129@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12) n@129@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12) n@129@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) n@129@12)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))
          (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
          ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12))))))
; Joined path conditions
(assert (or (not (Set_in n@129@12 nodes@2@12)) (Set_in n@129@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@12 r) (Set_in (inv@94@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@96@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@129@12 $Ref)) (!
  (and
    (=>
      (Set_in n@129@12 nodes@2@12)
      (and
        (Set_in n@129@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12) n@129@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12) n@129@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) n@129@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
              ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))))
    (or (not (Set_in n@129@12 nodes@2@12)) (Set_in n@129@12 nodes@2@12)))
  :pattern ((Set_in n@129@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12) n@129@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@129@12 $Ref)) (!
  (and
    (=>
      (Set_in n@129@12 nodes@2@12)
      (and
        (Set_in n@129@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12) n@129@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12) n@129@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) n@129@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
              ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))))
    (or (not (Set_in n@129@12 nodes@2@12)) (Set_in n@129@12 nodes@2@12)))
  :pattern ((Set_in n@129@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) n@129@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(push) ; 5
(assert (not (forall ((n@129@12 $Ref)) (!
  (=>
    (and
      (Set_in n@129@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))
    (or
      (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12))))
  :pattern ((Set_in n@129@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12) n@129@12))
  :pattern ((Set_in n@129@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) n@129@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@129@12 $Ref)) (!
  (=>
    (and
      (Set_in n@129@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@129@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12)))
    (or
      (= ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12))))
  :pattern ((Set_in n@129@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@129@12) n@129@12))
  :pattern ((Set_in n@129@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12) n@129@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)) ($FVF.lookup_left (as sm@96@12  $FVF<left>) n@129@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@130@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 76 | n@130@12 in nodes@2@12 | live]
; [else-branch: 76 | !(n@130@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 76 | n@130@12 in nodes@2@12]
(assert (Set_in n@130@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12) n@130@12))
(push) ; 8
(assert (not (and (img@15@12 n@130@12) (Set_in (inv@14@12 n@130@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 77 | Lookup(is_marked, sm@16@12, n@130@12) | live]
; [else-branch: 77 | !(Lookup(is_marked, sm@16@12, n@130@12)) | live]
(push) ; 9
; [then-branch: 77 | Lookup(is_marked, sm@16@12, n@130@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
(pop) ; 9
(push) ; 9
; [else-branch: 77 | !(Lookup(is_marked, sm@16@12, n@130@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12) n@130@12))
(push) ; 10
(assert (not (and (img@103@12 n@130@12) (Set_in (inv@102@12 n@130@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12) n@130@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12)))
(push) ; 8
; [then-branch: 78 | !(Lookup(is_marked, sm@16@12, n@130@12)) && Lookup(is_marked, sm@104@12, n@130@12) | live]
; [else-branch: 78 | !(!(Lookup(is_marked, sm@16@12, n@130@12)) && Lookup(is_marked, sm@104@12, n@130@12)) | live]
(push) ; 9
; [then-branch: 78 | !(Lookup(is_marked, sm@16@12, n@130@12)) && Lookup(is_marked, sm@104@12, n@130@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
  ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) n@130@12))
(push) ; 10
(assert (not (and (img@99@12 n@130@12) (Set_in (inv@98@12 n@130@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 79 | Lookup(right, sm@100@12, n@130@12) == Null | live]
; [else-branch: 79 | Lookup(right, sm@100@12, n@130@12) != Null | live]
(push) ; 11
; [then-branch: 79 | Lookup(right, sm@100@12, n@130@12) == Null]
(assert (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 79 | Lookup(right, sm@100@12, n@130@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(push) ; 12
(assert (not (and (img@99@12 n@130@12) (Set_in (inv@98@12 n@130@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)))
(push) ; 12
(assert (not (and
  (img@103@12 ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12))
  (Set_in (inv@102@12 ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 78 | !(!(Lookup(is_marked, sm@16@12, n@130@12)) && Lookup(is_marked, sm@104@12, n@130@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) n@130@12)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null))
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
    ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 76 | !(n@130@12 in nodes@2@12)]
(assert (not (Set_in n@130@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (Set_in n@130@12 nodes@2@12)
  (and
    (Set_in n@130@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12) n@130@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12) n@130@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) n@130@12)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
          ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12))))))
; Joined path conditions
(assert (or (not (Set_in n@130@12 nodes@2@12)) (Set_in n@130@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@12 r) (Set_in (inv@102@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@12 r) (Set_in (inv@98@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@100@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@130@12 $Ref)) (!
  (and
    (=>
      (Set_in n@130@12 nodes@2@12)
      (and
        (Set_in n@130@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12) n@130@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12) n@130@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) n@130@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
              ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))))
    (or (not (Set_in n@130@12 nodes@2@12)) (Set_in n@130@12 nodes@2@12)))
  :pattern ((Set_in n@130@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12) n@130@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@130@12 $Ref)) (!
  (and
    (=>
      (Set_in n@130@12 nodes@2@12)
      (and
        (Set_in n@130@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12) n@130@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12) n@130@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) n@130@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
              ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
            ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))))
    (or (not (Set_in n@130@12 nodes@2@12)) (Set_in n@130@12 nodes@2@12)))
  :pattern ((Set_in n@130@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) n@130@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(push) ; 5
(assert (not (forall ((n@130@12 $Ref)) (!
  (=>
    (and
      (Set_in n@130@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))
    (or
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12))))
  :pattern ((Set_in n@130@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12) n@130@12))
  :pattern ((Set_in n@130@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) n@130@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@130@12 $Ref)) (!
  (=>
    (and
      (Set_in n@130@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@130@12))
        ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12)))
    (or
      (= ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12))))
  :pattern ((Set_in n@130@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) n@130@12) n@130@12))
  :pattern ((Set_in n@130@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12) n@130@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)) ($FVF.lookup_right (as sm@100@12  $FVF<right>) n@130@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 4
(push) ; 4
; [else-branch: 43 | !(Lookup(right, sm@66@12, node@3@12) != Null && !(Lookup(is_marked, sm@70@12, Lookup(right, sm@66@12, node@3@12))))]
(assert (not
  (and
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12))))))
(pop) ; 4
; [eval] !(node.right != null && !node.right.is_marked)
; [eval] node.right != null && !node.right.is_marked
; [eval] node.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 4
(assert (not (and (img@65@12 node@3@12) (Set_in (inv@64@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch: 80 | Lookup(right, sm@66@12, node@3@12) == Null | live]
; [else-branch: 80 | Lookup(right, sm@66@12, node@3@12) != Null | live]
(push) ; 5
; [then-branch: 80 | Lookup(right, sm@66@12, node@3@12) == Null]
(assert (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 80 | Lookup(right, sm@66@12, node@3@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null)))
; [eval] !node.right.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 6
(assert (not (and (img@65@12 node@3@12) (Set_in (inv@64@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))
(push) ; 6
(assert (not (and
  (img@69@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12))
  (Set_in (inv@68@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 81 | !(Lookup(right, sm@66@12, node@3@12) != Null && !(Lookup(is_marked, sm@70@12, Lookup(right, sm@66@12, node@3@12)))) | live]
; [else-branch: 81 | Lookup(right, sm@66@12, node@3@12) != Null && !(Lookup(is_marked, sm@70@12, Lookup(right, sm@66@12, node@3@12))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 81 | !(Lookup(right, sm@66@12, node@3@12) != Null && !(Lookup(is_marked, sm@70@12, Lookup(right, sm@66@12, node@3@12))))]
(assert (not
  (and
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12))))))
; [eval] (node in nodes)
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n$4@131@12 $Ref)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@131@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@132@12 ($Ref) $Ref)
(declare-fun img@133@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@131@12 $Ref) (n$42@131@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@131@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$41@131@12) n$41@131@12))
      (and
        (Set_in n$42@131@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$42@131@12) n$42@131@12))
      (= n$41@131@12 n$42@131@12))
    (= n$41@131@12 n$42@131@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@131@12 $Ref)) (!
  (=>
    (Set_in n$4@131@12 nodes@2@12)
    (and (= (inv@132@12 n$4@131@12) n$4@131@12) (img@133@12 n$4@131@12)))
  :pattern ((Set_in n$4@131@12 nodes@2@12))
  :pattern ((inv@132@12 n$4@131@12))
  :pattern ((img@133@12 n$4@131@12))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@133@12 r) (Set_in (inv@132@12 r) nodes@2@12))
    (= (inv@132@12 r) r))
  :pattern ((inv@132@12 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@132@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) r) r))
  :pattern ((inv@132@12 r))
  :qid |quant-u-184|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@134@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@132@12 r) nodes@2@12) (img@133@12 r) (= r (inv@132@12 r)))
    ($Perm.min
      (ite
        (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@134@12 r))
    $Perm.No)
  
  :qid |quant-u-186|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@132@12 r) nodes@2@12) (img@133@12 r) (= r (inv@132@12 r)))
    (= (- $Perm.Write (pTaken@134@12 r)) $Perm.No))
  
  :qid |quant-u-187|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$5@135@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@135@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@136@12 ($Ref) $Ref)
(declare-fun img@137@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@135@12 $Ref) (n$52@135@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@135@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$51@135@12) n$51@135@12))
      (and
        (Set_in n$52@135@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$52@135@12) n$52@135@12))
      (= n$51@135@12 n$52@135@12))
    (= n$51@135@12 n$52@135@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@135@12 $Ref)) (!
  (=>
    (Set_in n$5@135@12 nodes@2@12)
    (and (= (inv@136@12 n$5@135@12) n$5@135@12) (img@137@12 n$5@135@12)))
  :pattern ((Set_in n$5@135@12 nodes@2@12))
  :pattern ((inv@136@12 n$5@135@12))
  :pattern ((img@137@12 n$5@135@12))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@137@12 r) (Set_in (inv@136@12 r) nodes@2@12))
    (= (inv@136@12 r) r))
  :pattern ((inv@136@12 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@136@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) r) r))
  :pattern ((inv@136@12 r))
  :qid |quant-u-189|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@138@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@136@12 r) nodes@2@12) (img@137@12 r) (= r (inv@136@12 r)))
    ($Perm.min
      (ite
        (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@138@12 r))
    $Perm.No)
  
  :qid |quant-u-191|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@136@12 r) nodes@2@12) (img@137@12 r) (= r (inv@136@12 r)))
    (= (- $Perm.Write (pTaken@138@12 r)) $Perm.No))
  
  :qid |quant-u-192|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$6@139@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@139@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@140@12 ($Ref) $Ref)
(declare-fun img@141@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@139@12 $Ref) (n$62@139@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$61@139@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n$61@139@12) n$61@139@12))
      (and
        (Set_in n$62@139@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n$62@139@12) n$62@139@12))
      (= n$61@139@12 n$62@139@12))
    (= n$61@139@12 n$62@139@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@139@12 $Ref)) (!
  (=>
    (Set_in n$6@139@12 nodes@2@12)
    (and (= (inv@140@12 n$6@139@12) n$6@139@12) (img@141@12 n$6@139@12)))
  :pattern ((Set_in n$6@139@12 nodes@2@12))
  :pattern ((inv@140@12 n$6@139@12))
  :pattern ((img@141@12 n$6@139@12))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@141@12 r) (Set_in (inv@140@12 r) nodes@2@12))
    (= (inv@140@12 r) r))
  :pattern ((inv@140@12 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@140@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r) r))
  :pattern ((inv@140@12 r))
  :qid |quant-u-194|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@142@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@140@12 r) nodes@2@12) (img@141@12 r) (= r (inv@140@12 r)))
    ($Perm.min
      (ite
        (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@142@12 r))
    $Perm.No)
  
  :qid |quant-u-196|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@140@12 r) nodes@2@12) (img@141@12 r) (= r (inv@140@12 r)))
    (= (- $Perm.Write (pTaken@142@12 r)) $Perm.No))
  
  :qid |quant-u-197|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@143@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 82 | !(n$7@143@12 in nodes@2@12) | live]
; [else-branch: 82 | n$7@143@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 82 | !(n$7@143@12 in nodes@2@12)]
(assert (not (Set_in n$7@143@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 82 | n$7@143@12 in nodes@2@12]
(assert (Set_in n$7@143@12 nodes@2@12))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12))
(push) ; 8
(assert (not (and (img@61@12 n$7@143@12) (Set_in (inv@60@12 n$7@143@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n$7@143@12 nodes@2@12)
  (and
    (Set_in n$7@143@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12))))
(assert (or (Set_in n$7@143@12 nodes@2@12) (not (Set_in n$7@143@12 nodes@2@12))))
(push) ; 6
; [then-branch: 83 | n$7@143@12 in nodes@2@12 && Lookup(left, sm@62@12, n$7@143@12) != Null | live]
; [else-branch: 83 | !(n$7@143@12 in nodes@2@12 && Lookup(left, sm@62@12, n$7@143@12) != Null) | live]
(push) ; 7
; [then-branch: 83 | n$7@143@12 in nodes@2@12 && Lookup(left, sm@62@12, n$7@143@12) != Null]
(assert (and
  (Set_in n$7@143@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12))
(push) ; 8
(assert (not (and (img@61@12 n$7@143@12) (Set_in (inv@60@12 n$7@143@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 83 | !(n$7@143@12 in nodes@2@12 && Lookup(left, sm@62@12, n$7@143@12) != Null)]
(assert (not
  (and
    (Set_in n$7@143@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (and
    (Set_in n$7@143@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))
  (and
    (Set_in n$7@143@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@143@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null))))
  (and
    (Set_in n$7@143@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@143@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@143@12 nodes@2@12)
      (and
        (Set_in n$7@143@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12)))
    (or (Set_in n$7@143@12 nodes@2@12) (not (Set_in n$7@143@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@143@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))
      (and
        (Set_in n$7@143@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12)))
    (or
      (not
        (and
          (Set_in n$7@143@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null))))
      (and
        (Set_in n$7@143@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@143@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@143@12 nodes@2@12)
      (and
        (Set_in n$7@143@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12)))
    (or (Set_in n$7@143@12 nodes@2@12) (not (Set_in n$7@143@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@143@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))
      (and
        (Set_in n$7@143@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12)))
    (or
      (not
        (and
          (Set_in n$7@143@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null))))
      (and
        (Set_in n$7@143@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))))
  :pattern ((Set_in n$7@143@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$7@143@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@143@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) nodes@2@12))
  :pattern ((Set_in n$7@143@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$7@143@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@143@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) nodes@2@12))
  :pattern ((Set_in n$7@143@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n$7@143@12) n$7@143@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@144@12 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 84 | !(n$8@144@12 in nodes@2@12) | live]
; [else-branch: 84 | n$8@144@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 84 | !(n$8@144@12 in nodes@2@12)]
(assert (not (Set_in n$8@144@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 84 | n$8@144@12 in nodes@2@12]
(assert (Set_in n$8@144@12 nodes@2@12))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12))
(push) ; 8
(assert (not (and (img@65@12 n$8@144@12) (Set_in (inv@64@12 n$8@144@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n$8@144@12 nodes@2@12)
  (and
    (Set_in n$8@144@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12))))
(assert (or (Set_in n$8@144@12 nodes@2@12) (not (Set_in n$8@144@12 nodes@2@12))))
(push) ; 6
; [then-branch: 85 | n$8@144@12 in nodes@2@12 && Lookup(right, sm@66@12, n$8@144@12) != Null | live]
; [else-branch: 85 | !(n$8@144@12 in nodes@2@12 && Lookup(right, sm@66@12, n$8@144@12) != Null) | live]
(push) ; 7
; [then-branch: 85 | n$8@144@12 in nodes@2@12 && Lookup(right, sm@66@12, n$8@144@12) != Null]
(assert (and
  (Set_in n$8@144@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12))
(push) ; 8
(assert (not (and (img@65@12 n$8@144@12) (Set_in (inv@64@12 n$8@144@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 85 | !(n$8@144@12 in nodes@2@12 && Lookup(right, sm@66@12, n$8@144@12) != Null)]
(assert (not
  (and
    (Set_in n$8@144@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (and
    (Set_in n$8@144@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))
  (and
    (Set_in n$8@144@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@144@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null))))
  (and
    (Set_in n$8@144@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@144@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@144@12 nodes@2@12)
      (and
        (Set_in n$8@144@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12)))
    (or (Set_in n$8@144@12 nodes@2@12) (not (Set_in n$8@144@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@144@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))
      (and
        (Set_in n$8@144@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12)))
    (or
      (not
        (and
          (Set_in n$8@144@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12)
              $Ref.null))))
      (and
        (Set_in n$8@144@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@144@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@144@12 nodes@2@12)
      (and
        (Set_in n$8@144@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12)))
    (or (Set_in n$8@144@12 nodes@2@12) (not (Set_in n$8@144@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@144@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))
      (and
        (Set_in n$8@144@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12)))
    (or
      (not
        (and
          (Set_in n$8@144@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12)
              $Ref.null))))
      (and
        (Set_in n$8@144@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))))
  :pattern ((Set_in n$8@144@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$8@144@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@144@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) nodes@2@12))
  :pattern ((Set_in n$8@144@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$8@144@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@144@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) nodes@2@12))
  :pattern ((Set_in n$8@144@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n$8@144@12) n$8@144@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@145@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 86 | n@145@12 in nodes@2@12 | live]
; [else-branch: 86 | !(n@145@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 86 | n@145@12 in nodes@2@12]
(assert (Set_in n@145@12 nodes@2@12))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12) n@145@12))
(push) ; 8
(assert (not (and (img@15@12 n@145@12) (Set_in (inv@14@12 n@145@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 87 | Lookup(is_marked, sm@16@12, n@145@12) | live]
; [else-branch: 87 | !(Lookup(is_marked, sm@16@12, n@145@12)) | live]
(push) ; 9
; [then-branch: 87 | Lookup(is_marked, sm@16@12, n@145@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12) n@145@12))
(push) ; 10
(assert (not (and (img@69@12 n@145@12) (Set_in (inv@68@12 n@145@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 87 | !(Lookup(is_marked, sm@16@12, n@145@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)
  (and
    ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12) n@145@12))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 86 | !(n@145@12 in nodes@2@12)]
(assert (not (Set_in n@145@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (Set_in n@145@12 nodes@2@12)
  (and
    (Set_in n@145@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12) n@145@12)
    (=>
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)
      (and
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12) n@145@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)))))
; Joined path conditions
(assert (or (not (Set_in n@145@12 nodes@2@12)) (Set_in n@145@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@145@12 $Ref)) (!
  (and
    (=>
      (Set_in n@145@12 nodes@2@12)
      (and
        (Set_in n@145@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12) n@145@12)
        (=>
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)
          (and
            ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12) n@145@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12))))
    (or (not (Set_in n@145@12 nodes@2@12)) (Set_in n@145@12 nodes@2@12)))
  :pattern ((Set_in n@145@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12) n@145@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(push) ; 5
(assert (not (forall ((n@145@12 $Ref)) (!
  (=>
    (and
      (Set_in n@145@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12))
  :pattern ((Set_in n@145@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12) n@145@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@145@12 $Ref)) (!
  (=>
    (and
      (Set_in n@145@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@145@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12))
  :pattern ((Set_in n@145@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@145@12) n@145@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) node@3@12) node@3@12))
(push) ; 5
(assert (not (and (img@69@12 node@3@12) (Set_in (inv@68@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) node@3@12)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) node@3@12))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@146@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 88 | n@146@12 in nodes@2@12 | live]
; [else-branch: 88 | !(n@146@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 88 | n@146@12 in nodes@2@12]
(assert (Set_in n@146@12 nodes@2@12))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@146@12) n@146@12))
(push) ; 8
(assert (not (and (img@61@12 n@146@12) (Set_in (inv@60@12 n@146@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@146@12) n@146@12))
(push) ; 8
(assert (not (and (img@7@12 n@146@12) (Set_in (inv@6@12 n@146@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 88 | !(n@146@12 in nodes@2@12)]
(assert (not (Set_in n@146@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@146@12 nodes@2@12)
  (and
    (Set_in n@146@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@146@12) n@146@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@146@12) n@146@12))))
; Joined path conditions
(assert (or (not (Set_in n@146@12 nodes@2@12)) (Set_in n@146@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@146@12 $Ref)) (!
  (and
    (=>
      (Set_in n@146@12 nodes@2@12)
      (and
        (Set_in n@146@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@146@12) n@146@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@146@12) n@146@12)))
    (or (not (Set_in n@146@12 nodes@2@12)) (Set_in n@146@12 nodes@2@12)))
  :pattern ((Set_in n@146@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@146@12) n@146@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(push) ; 5
(assert (not (forall ((n@146@12 $Ref)) (!
  (=>
    (Set_in n@146@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@146@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@146@12)))
  :pattern ((Set_in n@146@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@146@12) n@146@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@146@12 $Ref)) (!
  (=>
    (Set_in n@146@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@146@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@146@12)))
  :pattern ((Set_in n@146@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@146@12) n@146@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@147@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 89 | n@147@12 in nodes@2@12 | live]
; [else-branch: 89 | !(n@147@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 89 | n@147@12 in nodes@2@12]
(assert (Set_in n@147@12 nodes@2@12))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@147@12) n@147@12))
(push) ; 8
(assert (not (and (img@65@12 n@147@12) (Set_in (inv@64@12 n@147@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@147@12) n@147@12))
(push) ; 8
(assert (not (and (img@11@12 n@147@12) (Set_in (inv@10@12 n@147@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 89 | !(n@147@12 in nodes@2@12)]
(assert (not (Set_in n@147@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@147@12 nodes@2@12)
  (and
    (Set_in n@147@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@147@12) n@147@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@147@12) n@147@12))))
; Joined path conditions
(assert (or (not (Set_in n@147@12 nodes@2@12)) (Set_in n@147@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@147@12 $Ref)) (!
  (and
    (=>
      (Set_in n@147@12 nodes@2@12)
      (and
        (Set_in n@147@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@147@12) n@147@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@147@12) n@147@12)))
    (or (not (Set_in n@147@12 nodes@2@12)) (Set_in n@147@12 nodes@2@12)))
  :pattern ((Set_in n@147@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@147@12) n@147@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(push) ; 5
(assert (not (forall ((n@147@12 $Ref)) (!
  (=>
    (Set_in n@147@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@147@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@147@12)))
  :pattern ((Set_in n@147@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@147@12) n@147@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@147@12 $Ref)) (!
  (=>
    (Set_in n@147@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@147@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@147@12)))
  :pattern ((Set_in n@147@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@147@12) n@147@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@148@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 90 | n@148@12 in nodes@2@12 | live]
; [else-branch: 90 | !(n@148@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 90 | n@148@12 in nodes@2@12]
(assert (Set_in n@148@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12) n@148@12))
(push) ; 8
(assert (not (and (img@15@12 n@148@12) (Set_in (inv@14@12 n@148@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 91 | Lookup(is_marked, sm@16@12, n@148@12) | live]
; [else-branch: 91 | !(Lookup(is_marked, sm@16@12, n@148@12)) | live]
(push) ; 9
; [then-branch: 91 | Lookup(is_marked, sm@16@12, n@148@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
(pop) ; 9
(push) ; 9
; [else-branch: 91 | !(Lookup(is_marked, sm@16@12, n@148@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12) n@148@12))
(push) ; 10
(assert (not (and (img@69@12 n@148@12) (Set_in (inv@68@12 n@148@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12) n@148@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12)))
(push) ; 8
; [then-branch: 92 | !(Lookup(is_marked, sm@16@12, n@148@12)) && Lookup(is_marked, sm@70@12, n@148@12) | live]
; [else-branch: 92 | !(!(Lookup(is_marked, sm@16@12, n@148@12)) && Lookup(is_marked, sm@70@12, n@148@12)) | live]
(push) ; 9
; [then-branch: 92 | !(Lookup(is_marked, sm@16@12, n@148@12)) && Lookup(is_marked, sm@70@12, n@148@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
  ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) n@148@12))
(push) ; 10
(assert (not (and (img@61@12 n@148@12) (Set_in (inv@60@12 n@148@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 93 | Lookup(left, sm@62@12, n@148@12) == Null | live]
; [else-branch: 93 | Lookup(left, sm@62@12, n@148@12) != Null | live]
(push) ; 11
; [then-branch: 93 | Lookup(left, sm@62@12, n@148@12) == Null]
(assert (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 93 | Lookup(left, sm@62@12, n@148@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(push) ; 12
(assert (not (and (img@61@12 n@148@12) (Set_in (inv@60@12 n@148@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)))
(push) ; 12
(assert (not (and
  (img@69@12 ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12))
  (Set_in (inv@68@12 ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 92 | !(!(Lookup(is_marked, sm@16@12, n@148@12)) && Lookup(is_marked, sm@70@12, n@148@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) n@148@12)
    (=>
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12))))
    (or
      (not (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
      (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 90 | !(n@148@12 in nodes@2@12)]
(assert (not (Set_in n@148@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n@148@12 nodes@2@12)
  (and
    (Set_in n@148@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12) n@148@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12) n@148@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) n@148@12)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))
          (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12))))))
; Joined path conditions
(assert (or (not (Set_in n@148@12 nodes@2@12)) (Set_in n@148@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@12 r) (Set_in (inv@60@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@62@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@148@12 $Ref)) (!
  (and
    (=>
      (Set_in n@148@12 nodes@2@12)
      (and
        (Set_in n@148@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12) n@148@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12) n@148@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) n@148@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
              ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))))
    (or (not (Set_in n@148@12 nodes@2@12)) (Set_in n@148@12 nodes@2@12)))
  :pattern ((Set_in n@148@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12) n@148@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@148@12 $Ref)) (!
  (and
    (=>
      (Set_in n@148@12 nodes@2@12)
      (and
        (Set_in n@148@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12) n@148@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12) n@148@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) n@148@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
              ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))))
    (or (not (Set_in n@148@12 nodes@2@12)) (Set_in n@148@12 nodes@2@12)))
  :pattern ((Set_in n@148@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) n@148@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(push) ; 5
(assert (not (forall ((n@148@12 $Ref)) (!
  (=>
    (and
      (Set_in n@148@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))
    (or
      (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12))))
  :pattern ((Set_in n@148@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12) n@148@12))
  :pattern ((Set_in n@148@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) n@148@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@148@12 $Ref)) (!
  (=>
    (and
      (Set_in n@148@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@148@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12)))
    (or
      (= ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12))))
  :pattern ((Set_in n@148@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@148@12) n@148@12))
  :pattern ((Set_in n@148@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12) n@148@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)) ($FVF.lookup_left (as sm@62@12  $FVF<left>) n@148@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@149@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 94 | n@149@12 in nodes@2@12 | live]
; [else-branch: 94 | !(n@149@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 94 | n@149@12 in nodes@2@12]
(assert (Set_in n@149@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12) n@149@12))
(push) ; 8
(assert (not (and (img@15@12 n@149@12) (Set_in (inv@14@12 n@149@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 95 | Lookup(is_marked, sm@16@12, n@149@12) | live]
; [else-branch: 95 | !(Lookup(is_marked, sm@16@12, n@149@12)) | live]
(push) ; 9
; [then-branch: 95 | Lookup(is_marked, sm@16@12, n@149@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
(pop) ; 9
(push) ; 9
; [else-branch: 95 | !(Lookup(is_marked, sm@16@12, n@149@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12) n@149@12))
(push) ; 10
(assert (not (and (img@69@12 n@149@12) (Set_in (inv@68@12 n@149@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12) n@149@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12)))
(push) ; 8
; [then-branch: 96 | !(Lookup(is_marked, sm@16@12, n@149@12)) && Lookup(is_marked, sm@70@12, n@149@12) | live]
; [else-branch: 96 | !(!(Lookup(is_marked, sm@16@12, n@149@12)) && Lookup(is_marked, sm@70@12, n@149@12)) | live]
(push) ; 9
; [then-branch: 96 | !(Lookup(is_marked, sm@16@12, n@149@12)) && Lookup(is_marked, sm@70@12, n@149@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
  ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) n@149@12))
(push) ; 10
(assert (not (and (img@65@12 n@149@12) (Set_in (inv@64@12 n@149@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 97 | Lookup(right, sm@66@12, n@149@12) == Null | live]
; [else-branch: 97 | Lookup(right, sm@66@12, n@149@12) != Null | live]
(push) ; 11
; [then-branch: 97 | Lookup(right, sm@66@12, n@149@12) == Null]
(assert (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 97 | Lookup(right, sm@66@12, n@149@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 12
(assert (not (and (img@65@12 n@149@12) (Set_in (inv@64@12 n@149@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)))
(push) ; 12
(assert (not (and
  (img@69@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12))
  (Set_in (inv@68@12 ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 96 | !(!(Lookup(is_marked, sm@16@12, n@149@12)) && Lookup(is_marked, sm@70@12, n@149@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) n@149@12)
    (=>
      (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12))))
    (or
      (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
      (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 94 | !(n@149@12 in nodes@2@12)]
(assert (not (Set_in n@149@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n@149@12 nodes@2@12)
  (and
    (Set_in n@149@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12) n@149@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12) n@149@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) n@149@12)
        (=>
          (not
            (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12))))
        (or
          (not
            (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))
          (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
          ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12))))))
; Joined path conditions
(assert (or (not (Set_in n@149@12 nodes@2@12)) (Set_in n@149@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@12 r) (Set_in (inv@68@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@12 r) (Set_in (inv@64@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@66@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@149@12 $Ref)) (!
  (and
    (=>
      (Set_in n@149@12 nodes@2@12)
      (and
        (Set_in n@149@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12) n@149@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12) n@149@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) n@149@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
              ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))))
    (or (not (Set_in n@149@12 nodes@2@12)) (Set_in n@149@12 nodes@2@12)))
  :pattern ((Set_in n@149@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12) n@149@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@149@12 $Ref)) (!
  (and
    (=>
      (Set_in n@149@12 nodes@2@12)
      (and
        (Set_in n@149@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12) n@149@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12) n@149@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) n@149@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
              ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
            ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))))
    (or (not (Set_in n@149@12 nodes@2@12)) (Set_in n@149@12 nodes@2@12)))
  :pattern ((Set_in n@149@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) n@149@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(push) ; 5
(assert (not (forall ((n@149@12 $Ref)) (!
  (=>
    (and
      (Set_in n@149@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))
    (or
      (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12))))
  :pattern ((Set_in n@149@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12) n@149@12))
  :pattern ((Set_in n@149@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) n@149@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@149@12 $Ref)) (!
  (=>
    (and
      (Set_in n@149@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@149@12))
        ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12)))
    (or
      (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12))))
  :pattern ((Set_in n@149@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) n@149@12) n@149@12))
  :pattern ((Set_in n@149@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12) n@149@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)) ($FVF.lookup_right (as sm@66@12  $FVF<right>) n@149@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 4
(push) ; 4
; [else-branch: 81 | Lookup(right, sm@66@12, node@3@12) != Null && !(Lookup(is_marked, sm@70@12, Lookup(right, sm@66@12, node@3@12)))]
(assert (and
  (not (= ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@70@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@12  $FVF<right>) node@3@12)))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 21 | !(Lookup(left, sm@8@12, node@3@12) != Null && !(Lookup(is_marked, sm@41@12, Lookup(left, sm@8@12, node@3@12))))]
(assert (not
  (and
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@41@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12))))))
(pop) ; 3
; [eval] !(node.left != null && !node.left.is_marked)
; [eval] node.left != null && !node.left.is_marked
; [eval] node.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 3
(assert (not (and (img@7@12 node@3@12) (Set_in (inv@6@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch: 98 | Lookup(left, sm@8@12, node@3@12) == Null | live]
; [else-branch: 98 | Lookup(left, sm@8@12, node@3@12) != Null | live]
(push) ; 4
; [then-branch: 98 | Lookup(left, sm@8@12, node@3@12) == Null]
(assert (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 98 | Lookup(left, sm@8@12, node@3@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null)))
; [eval] !node.left.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 5
(assert (not (and (img@7@12 node@3@12) (Set_in (inv@6@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@150@12 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(declare-const pm@151@12 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@151@12  $FPM) r)
    (+
      (ite (= r node@3@12) $Perm.Write $Perm.No)
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@151@12  $FPM) r))
  :qid |qp.resPrmSumDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@151@12  $FPM) r))
  :qid |qp.resTrgDef33|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))
(push) ; 5
(assert (not (<
  $Perm.No
  ($FVF.perm_is_marked (as pm@151@12  $FPM) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@151@12  $FPM) r)
    (+
      (ite (= r node@3@12) $Perm.Write $Perm.No)
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@151@12  $FPM) r))
  :qid |qp.resPrmSumDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@151@12  $FPM) r))
  :qid |qp.resTrgDef33|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))))
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | !(Lookup(left, sm@8@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(left, sm@8@12, node@3@12)))) | live]
; [else-branch: 99 | Lookup(left, sm@8@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(left, sm@8@12, node@3@12))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 99 | !(Lookup(left, sm@8@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(left, sm@8@12, node@3@12))))]
(assert (not
  (and
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12))))))
; [eval] node.right != null && !node.right.is_marked
; [eval] node.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) node@3@12))
(push) ; 4
(assert (not (and (img@11@12 node@3@12) (Set_in (inv@10@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch: 100 | Lookup(right, sm@12@12, node@3@12) == Null | live]
; [else-branch: 100 | Lookup(right, sm@12@12, node@3@12) != Null | live]
(push) ; 5
; [then-branch: 100 | Lookup(right, sm@12@12, node@3@12) == Null]
(assert (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 100 | Lookup(right, sm@12@12, node@3@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null)))
; [eval] !node.right.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 6
(assert (not (and (img@11@12 node@3@12) (Set_in (inv@10@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) node@3@12)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12))
        (Set_in (inv@14@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) nodes@2@12))
      (-
        $Perm.Write
        (pTaken@39@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | Lookup(right, sm@12@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(right, sm@12@12, node@3@12))) | live]
; [else-branch: 101 | !(Lookup(right, sm@12@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(right, sm@12@12, node@3@12)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 101 | Lookup(right, sm@12@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(right, sm@12@12, node@3@12)))]
(assert (and
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))))
; [exec]
; trav_rec(nodes, node.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 5
(assert (not (and (img@11@12 node@3@12) (Set_in (inv@10@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (node in nodes)
(push) ; 5
(assert (not (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) nodes@2@12)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) nodes@2@12))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n@152@12 $Ref)
(push) ; 5
; [eval] (n in nodes)
(assert (Set_in n@152@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@153@12 ($Ref) $Ref)
(declare-fun img@154@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@152@12 $Ref) (n2@152@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@152@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n1@152@12) n1@152@12))
      (and
        (Set_in n2@152@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n2@152@12) n2@152@12))
      (= n1@152@12 n2@152@12))
    (= n1@152@12 n2@152@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@152@12 $Ref)) (!
  (=>
    (Set_in n@152@12 nodes@2@12)
    (and (= (inv@153@12 n@152@12) n@152@12) (img@154@12 n@152@12)))
  :pattern ((Set_in n@152@12 nodes@2@12))
  :pattern ((inv@153@12 n@152@12))
  :pattern ((img@154@12 n@152@12))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@154@12 r) (Set_in (inv@153@12 r) nodes@2@12))
    (= (inv@153@12 r) r))
  :pattern ((inv@153@12 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@153@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) r) r))
  :pattern ((inv@153@12 r))
  :qid |quant-u-199|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@155@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@153@12 r) nodes@2@12) (img@154@12 r) (= r (inv@153@12 r)))
    ($Perm.min
      (ite
        (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@155@12 r))
    $Perm.No)
  
  :qid |quant-u-201|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@153@12 r) nodes@2@12) (img@154@12 r) (= r (inv@153@12 r)))
    (= (- $Perm.Write (pTaken@155@12 r)) $Perm.No))
  
  :qid |quant-u-202|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$0@156@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$0 in nodes)
(assert (Set_in n$0@156@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@157@12 ($Ref) $Ref)
(declare-fun img@158@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$01@156@12 $Ref) (n$02@156@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@156@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$01@156@12) n$01@156@12))
      (and
        (Set_in n$02@156@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$02@156@12) n$02@156@12))
      (= n$01@156@12 n$02@156@12))
    (= n$01@156@12 n$02@156@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@156@12 $Ref)) (!
  (=>
    (Set_in n$0@156@12 nodes@2@12)
    (and (= (inv@157@12 n$0@156@12) n$0@156@12) (img@158@12 n$0@156@12)))
  :pattern ((Set_in n$0@156@12 nodes@2@12))
  :pattern ((inv@157@12 n$0@156@12))
  :pattern ((img@158@12 n$0@156@12))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@158@12 r) (Set_in (inv@157@12 r) nodes@2@12))
    (= (inv@157@12 r) r))
  :pattern ((inv@157@12 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@157@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) r) r))
  :pattern ((inv@157@12 r))
  :qid |quant-u-204|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@159@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@157@12 r) nodes@2@12) (img@158@12 r) (= r (inv@157@12 r)))
    ($Perm.min
      (ite
        (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@159@12 r))
    $Perm.No)
  
  :qid |quant-u-206|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@157@12 r) nodes@2@12) (img@158@12 r) (= r (inv@157@12 r)))
    (= (- $Perm.Write (pTaken@159@12 r)) $Perm.No))
  
  :qid |quant-u-207|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$1@160@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$1 in nodes)
(assert (Set_in n$1@160@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@161@12 ($Ref) $Ref)
(declare-fun img@162@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$11@160@12 $Ref) (n$12@160@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@160@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n$11@160@12) n$11@160@12))
      (and
        (Set_in n$12@160@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n$12@160@12) n$12@160@12))
      (= n$11@160@12 n$12@160@12))
    (= n$11@160@12 n$12@160@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@160@12 $Ref)) (!
  (=>
    (Set_in n$1@160@12 nodes@2@12)
    (and (= (inv@161@12 n$1@160@12) n$1@160@12) (img@162@12 n$1@160@12)))
  :pattern ((Set_in n$1@160@12 nodes@2@12))
  :pattern ((inv@161@12 n$1@160@12))
  :pattern ((img@162@12 n$1@160@12))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@162@12 r) (Set_in (inv@161@12 r) nodes@2@12))
    (= (inv@161@12 r) r))
  :pattern ((inv@161@12 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@161@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r) r))
  :pattern ((inv@161@12 r))
  :qid |quant-u-209|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@163@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@161@12 r) nodes@2@12) (img@162@12 r) (= r (inv@161@12 r)))
    ($Perm.min
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@164@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@161@12 r) nodes@2@12) (img@162@12 r) (= r (inv@161@12 r)))
    ($Perm.min
      (ite (= r node@3@12) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@163@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)
      (pTaken@163@12 r))
    $Perm.No)
  
  :qid |quant-u-211|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@161@12 r) nodes@2@12) (img@162@12 r) (= r (inv@161@12 r)))
    (= (- $Perm.Write (pTaken@163@12 r)) $Perm.No))
  
  :qid |quant-u-212|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@164@12 node@3@12)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@161@12 r) nodes@2@12) (img@162@12 r) (= r (inv@161@12 r)))
    (= (- (- $Perm.Write (pTaken@163@12 r)) (pTaken@164@12 r)) $Perm.No))
  
  :qid |quant-u-214|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@165@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 6
; [then-branch: 102 | !(n$2@165@12 in nodes@2@12) | live]
; [else-branch: 102 | n$2@165@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 102 | !(n$2@165@12 in nodes@2@12)]
(assert (not (Set_in n$2@165@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 102 | n$2@165@12 in nodes@2@12]
(assert (Set_in n$2@165@12 nodes@2@12))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12))
(push) ; 8
(assert (not (and (img@7@12 n$2@165@12) (Set_in (inv@6@12 n$2@165@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n$2@165@12 nodes@2@12)
  (and
    (Set_in n$2@165@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12))))
(assert (or (Set_in n$2@165@12 nodes@2@12) (not (Set_in n$2@165@12 nodes@2@12))))
(push) ; 6
; [then-branch: 103 | n$2@165@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@165@12) != Null | live]
; [else-branch: 103 | !(n$2@165@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@165@12) != Null) | live]
(push) ; 7
; [then-branch: 103 | n$2@165@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@165@12) != Null]
(assert (and
  (Set_in n$2@165@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12))
(push) ; 8
(assert (not (and (img@7@12 n$2@165@12) (Set_in (inv@6@12 n$2@165@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 103 | !(n$2@165@12 in nodes@2@12 && Lookup(left, sm@8@12, n$2@165@12) != Null)]
(assert (not
  (and
    (Set_in n$2@165@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (and
    (Set_in n$2@165@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))
  (and
    (Set_in n$2@165@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@165@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null))))
  (and
    (Set_in n$2@165@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@165@12 $Ref)) (!
  (and
    (=>
      (Set_in n$2@165@12 nodes@2@12)
      (and
        (Set_in n$2@165@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12)))
    (or (Set_in n$2@165@12 nodes@2@12) (not (Set_in n$2@165@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$2@165@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))
      (and
        (Set_in n$2@165@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12)))
    (or
      (not
        (and
          (Set_in n$2@165@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null))))
      (and
        (Set_in n$2@165@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@165@12 $Ref)) (!
  (and
    (=>
      (Set_in n$2@165@12 nodes@2@12)
      (and
        (Set_in n$2@165@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12)))
    (or (Set_in n$2@165@12 nodes@2@12) (not (Set_in n$2@165@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$2@165@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))
      (and
        (Set_in n$2@165@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12)))
    (or
      (not
        (and
          (Set_in n$2@165@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null))))
      (and
        (Set_in n$2@165@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))))
  :pattern ((Set_in n$2@165@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 5
(assert (not (forall ((n$2@165@12 $Ref)) (!
  (=>
    (and
      (Set_in n$2@165@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) nodes@2@12))
  :pattern ((Set_in n$2@165@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@165@12 $Ref)) (!
  (=>
    (and
      (Set_in n$2@165@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) nodes@2@12))
  :pattern ((Set_in n$2@165@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$2@165@12) n$2@165@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@166@12 $Ref)
(push) ; 5
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 6
; [then-branch: 104 | !(n$3@166@12 in nodes@2@12) | live]
; [else-branch: 104 | n$3@166@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 104 | !(n$3@166@12 in nodes@2@12)]
(assert (not (Set_in n$3@166@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 104 | n$3@166@12 in nodes@2@12]
(assert (Set_in n$3@166@12 nodes@2@12))
; [eval] n$3.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12))
(push) ; 8
(assert (not (and (img@11@12 n$3@166@12) (Set_in (inv@10@12 n$3@166@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n$3@166@12 nodes@2@12)
  (and
    (Set_in n$3@166@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12))))
(assert (or (Set_in n$3@166@12 nodes@2@12) (not (Set_in n$3@166@12 nodes@2@12))))
(push) ; 6
; [then-branch: 105 | n$3@166@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@166@12) != Null | live]
; [else-branch: 105 | !(n$3@166@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@166@12) != Null) | live]
(push) ; 7
; [then-branch: 105 | n$3@166@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@166@12) != Null]
(assert (and
  (Set_in n$3@166@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12))
(push) ; 8
(assert (not (and (img@11@12 n$3@166@12) (Set_in (inv@10@12 n$3@166@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 105 | !(n$3@166@12 in nodes@2@12 && Lookup(right, sm@12@12, n$3@166@12) != Null)]
(assert (not
  (and
    (Set_in n$3@166@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (and
    (Set_in n$3@166@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))
  (and
    (Set_in n$3@166@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@166@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null))))
  (and
    (Set_in n$3@166@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@166@12 $Ref)) (!
  (and
    (=>
      (Set_in n$3@166@12 nodes@2@12)
      (and
        (Set_in n$3@166@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12)))
    (or (Set_in n$3@166@12 nodes@2@12) (not (Set_in n$3@166@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$3@166@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))
      (and
        (Set_in n$3@166@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12)))
    (or
      (not
        (and
          (Set_in n$3@166@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12)
              $Ref.null))))
      (and
        (Set_in n$3@166@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@166@12 $Ref)) (!
  (and
    (=>
      (Set_in n$3@166@12 nodes@2@12)
      (and
        (Set_in n$3@166@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12)))
    (or (Set_in n$3@166@12 nodes@2@12) (not (Set_in n$3@166@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$3@166@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))
      (and
        (Set_in n$3@166@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12)))
    (or
      (not
        (and
          (Set_in n$3@166@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12)
              $Ref.null))))
      (and
        (Set_in n$3@166@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))))
  :pattern ((Set_in n$3@166@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 5
(assert (not (forall ((n$3@166@12 $Ref)) (!
  (=>
    (and
      (Set_in n$3@166@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) nodes@2@12))
  :pattern ((Set_in n$3@166@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$3@166@12 $Ref)) (!
  (=>
    (and
      (Set_in n$3@166@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) nodes@2@12))
  :pattern ((Set_in n$3@166@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$3@166@12) n$3@166@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) node@3@12)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12))
        (Set_in (inv@14@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) nodes@2@12))
      (-
        $Perm.Write
        (pTaken@39@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const $t@167@12 $Snap)
(assert (= $t@167@12 ($Snap.combine ($Snap.first $t@167@12) ($Snap.second $t@167@12))))
(assert (= ($Snap.first $t@167@12) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@167@12)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@167@12))
    ($Snap.second ($Snap.second $t@167@12)))))
(assert (= ($Snap.first ($Snap.second $t@167@12)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@167@12))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@167@12)))
    ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))
(declare-const n$4@168@12 $Ref)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@168@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@169@12 ($Ref) $Ref)
(declare-fun img@170@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@168@12 $Ref) (n$42@168@12 $Ref)) (!
  (=>
    (and
      (Set_in n$41@168@12 nodes@2@12)
      (Set_in n$42@168@12 nodes@2@12)
      (= n$41@168@12 n$42@168@12))
    (= n$41@168@12 n$42@168@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@168@12 $Ref)) (!
  (=>
    (Set_in n$4@168@12 nodes@2@12)
    (and (= (inv@169@12 n$4@168@12) n$4@168@12) (img@170@12 n$4@168@12)))
  :pattern ((Set_in n$4@168@12 nodes@2@12))
  :pattern ((inv@169@12 n$4@168@12))
  :pattern ((img@170@12 n$4@168@12))
  :qid |quant-u-216|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (= (inv@169@12 r) r))
  :pattern ((inv@169@12 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@168@12 $Ref)) (!
  (=> (Set_in n$4@168@12 nodes@2@12) (not (= n$4@168@12 $Ref.null)))
  :pattern ((Set_in n$4@168@12 nodes@2@12))
  :pattern ((inv@169@12 n$4@168@12))
  :pattern ((img@170@12 n$4@168@12))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@171@12 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@169@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) r) r))
  :pattern ((inv@169@12 r))
  :qid |quant-u-217|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@167@12)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))
(declare-const n$5@172@12 $Ref)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@172@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@173@12 ($Ref) $Ref)
(declare-fun img@174@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@172@12 $Ref) (n$52@172@12 $Ref)) (!
  (=>
    (and
      (Set_in n$51@172@12 nodes@2@12)
      (Set_in n$52@172@12 nodes@2@12)
      (= n$51@172@12 n$52@172@12))
    (= n$51@172@12 n$52@172@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@172@12 $Ref)) (!
  (=>
    (Set_in n$5@172@12 nodes@2@12)
    (and (= (inv@173@12 n$5@172@12) n$5@172@12) (img@174@12 n$5@172@12)))
  :pattern ((Set_in n$5@172@12 nodes@2@12))
  :pattern ((inv@173@12 n$5@172@12))
  :pattern ((img@174@12 n$5@172@12))
  :qid |quant-u-219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (= (inv@173@12 r) r))
  :pattern ((inv@173@12 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@172@12 $Ref)) (!
  (=> (Set_in n$5@172@12 nodes@2@12) (not (= n$5@172@12 $Ref.null)))
  :pattern ((Set_in n$5@172@12 nodes@2@12))
  :pattern ((inv@173@12 n$5@172@12))
  :pattern ((img@174@12 n$5@172@12))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@175@12 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@173@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) r) r))
  :pattern ((inv@173@12 r))
  :qid |quant-u-220|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))
(declare-const n$6@176@12 $Ref)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@176@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@177@12 ($Ref) $Ref)
(declare-fun img@178@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@176@12 $Ref) (n$62@176@12 $Ref)) (!
  (=>
    (and
      (Set_in n$61@176@12 nodes@2@12)
      (Set_in n$62@176@12 nodes@2@12)
      (= n$61@176@12 n$62@176@12))
    (= n$61@176@12 n$62@176@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@176@12 $Ref)) (!
  (=>
    (Set_in n$6@176@12 nodes@2@12)
    (and (= (inv@177@12 n$6@176@12) n$6@176@12) (img@178@12 n$6@176@12)))
  :pattern ((Set_in n$6@176@12 nodes@2@12))
  :pattern ((inv@177@12 n$6@176@12))
  :pattern ((img@178@12 n$6@176@12))
  :qid |quant-u-222|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (= (inv@177@12 r) r))
  :pattern ((inv@177@12 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@176@12 $Ref)) (!
  (=> (Set_in n$6@176@12 nodes@2@12) (not (= n$6@176@12 $Ref.null)))
  :pattern ((Set_in n$6@176@12 nodes@2@12))
  :pattern ((inv@177@12 n$6@176@12))
  :pattern ((img@178@12 n$6@176@12))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@179@12 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@177@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r) r))
  :pattern ((inv@177@12 r))
  :qid |quant-u-223|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@180@12 $Ref)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 106 | !(n$7@180@12 in nodes@2@12) | live]
; [else-branch: 106 | n$7@180@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 106 | !(n$7@180@12 in nodes@2@12)]
(assert (not (Set_in n$7@180@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 106 | n$7@180@12 in nodes@2@12]
(assert (Set_in n$7@180@12 nodes@2@12))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12))
(push) ; 8
(assert (not (and (img@170@12 n$7@180@12) (Set_in (inv@169@12 n$7@180@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (Set_in n$7@180@12 nodes@2@12)
  (and
    (Set_in n$7@180@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12))))
(assert (or (Set_in n$7@180@12 nodes@2@12) (not (Set_in n$7@180@12 nodes@2@12))))
(push) ; 6
; [then-branch: 107 | n$7@180@12 in nodes@2@12 && Lookup(left, sm@171@12, n$7@180@12) != Null | live]
; [else-branch: 107 | !(n$7@180@12 in nodes@2@12 && Lookup(left, sm@171@12, n$7@180@12) != Null) | live]
(push) ; 7
; [then-branch: 107 | n$7@180@12 in nodes@2@12 && Lookup(left, sm@171@12, n$7@180@12) != Null]
(assert (and
  (Set_in n$7@180@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12))
(push) ; 8
(assert (not (and (img@170@12 n$7@180@12) (Set_in (inv@169@12 n$7@180@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 107 | !(n$7@180@12 in nodes@2@12 && Lookup(left, sm@171@12, n$7@180@12) != Null)]
(assert (not
  (and
    (Set_in n$7@180@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (and
    (Set_in n$7@180@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null)))
  (and
    (Set_in n$7@180@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@180@12 nodes@2@12)
      (not
        (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null))))
  (and
    (Set_in n$7@180@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@180@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@180@12 nodes@2@12)
      (and
        (Set_in n$7@180@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12)))
    (or (Set_in n$7@180@12 nodes@2@12) (not (Set_in n$7@180@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@180@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null)))
      (and
        (Set_in n$7@180@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12)))
    (or
      (not
        (and
          (Set_in n$7@180@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12)
              $Ref.null))))
      (and
        (Set_in n$7@180@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@180@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@180@12 nodes@2@12)
      (and
        (Set_in n$7@180@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12)))
    (or (Set_in n$7@180@12 nodes@2@12) (not (Set_in n$7@180@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@180@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null)))
      (and
        (Set_in n$7@180@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12)))
    (or
      (not
        (and
          (Set_in n$7@180@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12)
              $Ref.null))))
      (and
        (Set_in n$7@180@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null)))))
  :pattern ((Set_in n$7@180@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@180@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@180@12 nodes@2@12)
      (not
        (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) nodes@2@12))
  :pattern ((Set_in n$7@180@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@180@12) n$7@180@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@181@12 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 108 | !(n$8@181@12 in nodes@2@12) | live]
; [else-branch: 108 | n$8@181@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 108 | !(n$8@181@12 in nodes@2@12)]
(assert (not (Set_in n$8@181@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 108 | n$8@181@12 in nodes@2@12]
(assert (Set_in n$8@181@12 nodes@2@12))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12))
(push) ; 8
(assert (not (and (img@174@12 n$8@181@12) (Set_in (inv@173@12 n$8@181@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (Set_in n$8@181@12 nodes@2@12)
  (and
    (Set_in n$8@181@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12))))
(assert (or (Set_in n$8@181@12 nodes@2@12) (not (Set_in n$8@181@12 nodes@2@12))))
(push) ; 6
; [then-branch: 109 | n$8@181@12 in nodes@2@12 && Lookup(right, sm@175@12, n$8@181@12) != Null | live]
; [else-branch: 109 | !(n$8@181@12 in nodes@2@12 && Lookup(right, sm@175@12, n$8@181@12) != Null) | live]
(push) ; 7
; [then-branch: 109 | n$8@181@12 in nodes@2@12 && Lookup(right, sm@175@12, n$8@181@12) != Null]
(assert (and
  (Set_in n$8@181@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12))
(push) ; 8
(assert (not (and (img@174@12 n$8@181@12) (Set_in (inv@173@12 n$8@181@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 109 | !(n$8@181@12 in nodes@2@12 && Lookup(right, sm@175@12, n$8@181@12) != Null)]
(assert (not
  (and
    (Set_in n$8@181@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (and
    (Set_in n$8@181@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) $Ref.null)))
  (and
    (Set_in n$8@181@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@181@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) $Ref.null))))
  (and
    (Set_in n$8@181@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@181@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@181@12 nodes@2@12)
      (and
        (Set_in n$8@181@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12)))
    (or (Set_in n$8@181@12 nodes@2@12) (not (Set_in n$8@181@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@181@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12)
            $Ref.null)))
      (and
        (Set_in n$8@181@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12)))
    (or
      (not
        (and
          (Set_in n$8@181@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12)
              $Ref.null))))
      (and
        (Set_in n$8@181@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@181@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@181@12 nodes@2@12)
      (and
        (Set_in n$8@181@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12)))
    (or (Set_in n$8@181@12 nodes@2@12) (not (Set_in n$8@181@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@181@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12)
            $Ref.null)))
      (and
        (Set_in n$8@181@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12)))
    (or
      (not
        (and
          (Set_in n$8@181@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12)
              $Ref.null))))
      (and
        (Set_in n$8@181@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12)
            $Ref.null)))))
  :pattern ((Set_in n$8@181@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@181@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@181@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) nodes@2@12))
  :pattern ((Set_in n$8@181@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@181@12) n$8@181@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@182@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 110 | n@182@12 in nodes@2@12 | live]
; [else-branch: 110 | !(n@182@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 110 | n@182@12 in nodes@2@12]
(assert (Set_in n@182@12 nodes@2@12))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12) n@182@12))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite (= n@182@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@182@12) (Set_in (inv@14@12 n@182@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@182@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 111 | Lookup(is_marked, sm@150@12, n@182@12) | live]
; [else-branch: 111 | !(Lookup(is_marked, sm@150@12, n@182@12)) | live]
(push) ; 9
; [then-branch: 111 | Lookup(is_marked, sm@150@12, n@182@12)]
(assert ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@182@12) n@182@12))
(push) ; 10
(assert (not (and (img@178@12 n@182@12) (Set_in (inv@177@12 n@182@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 111 | !(Lookup(is_marked, sm@150@12, n@182@12))]
(assert (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)
  (and
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@182@12) n@182@12))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12))
  ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 110 | !(n@182@12 in nodes@2@12)]
(assert (not (Set_in n@182@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (Set_in n@182@12 nodes@2@12)
  (and
    (Set_in n@182@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12) n@182@12)
    (=>
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)
      (and
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@182@12) n@182@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12))
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)))))
; Joined path conditions
(assert (or (not (Set_in n@182@12 nodes@2@12)) (Set_in n@182@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@182@12 $Ref)) (!
  (and
    (=>
      (Set_in n@182@12 nodes@2@12)
      (and
        (Set_in n@182@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12) n@182@12)
        (=>
          ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)
          (and
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@182@12) n@182@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12))
          ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12))))
    (or (not (Set_in n@182@12 nodes@2@12)) (Set_in n@182@12 nodes@2@12)))
  :pattern ((Set_in n@182@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@182@12) n@182@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@182@12 $Ref)) (!
  (=>
    (and
      (Set_in n@182@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@182@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@182@12))
  :pattern ((Set_in n@182@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@182@12) n@182@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))
(push) ; 5
(assert (not (and
  (img@178@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12))
  (Set_in (inv@177@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@183@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 112 | n@183@12 in nodes@2@12 | live]
; [else-branch: 112 | !(n@183@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 112 | n@183@12 in nodes@2@12]
(assert (Set_in n@183@12 nodes@2@12))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@183@12) n@183@12))
(push) ; 8
(assert (not (and (img@170@12 n@183@12) (Set_in (inv@169@12 n@183@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@183@12) n@183@12))
(push) ; 8
(assert (not (and (img@7@12 n@183@12) (Set_in (inv@6@12 n@183@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 112 | !(n@183@12 in nodes@2@12)]
(assert (not (Set_in n@183@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@183@12 nodes@2@12)
  (and
    (Set_in n@183@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@183@12) n@183@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@183@12) n@183@12))))
; Joined path conditions
(assert (or (not (Set_in n@183@12 nodes@2@12)) (Set_in n@183@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@183@12 $Ref)) (!
  (and
    (=>
      (Set_in n@183@12 nodes@2@12)
      (and
        (Set_in n@183@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@183@12) n@183@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@183@12) n@183@12)))
    (or (not (Set_in n@183@12 nodes@2@12)) (Set_in n@183@12 nodes@2@12)))
  :pattern ((Set_in n@183@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@183@12) n@183@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@183@12 $Ref)) (!
  (=>
    (Set_in n@183@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@183@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@183@12)))
  :pattern ((Set_in n@183@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@183@12) n@183@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@184@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 113 | n@184@12 in nodes@2@12 | live]
; [else-branch: 113 | !(n@184@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 113 | n@184@12 in nodes@2@12]
(assert (Set_in n@184@12 nodes@2@12))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@184@12) n@184@12))
(push) ; 8
(assert (not (and (img@174@12 n@184@12) (Set_in (inv@173@12 n@184@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@184@12) n@184@12))
(push) ; 8
(assert (not (and (img@11@12 n@184@12) (Set_in (inv@10@12 n@184@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 113 | !(n@184@12 in nodes@2@12)]
(assert (not (Set_in n@184@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@184@12 nodes@2@12)
  (and
    (Set_in n@184@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@184@12) n@184@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@184@12) n@184@12))))
; Joined path conditions
(assert (or (not (Set_in n@184@12 nodes@2@12)) (Set_in n@184@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@184@12 $Ref)) (!
  (and
    (=>
      (Set_in n@184@12 nodes@2@12)
      (and
        (Set_in n@184@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@184@12) n@184@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@184@12) n@184@12)))
    (or (not (Set_in n@184@12 nodes@2@12)) (Set_in n@184@12 nodes@2@12)))
  :pattern ((Set_in n@184@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@184@12) n@184@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@184@12 $Ref)) (!
  (=>
    (Set_in n@184@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@184@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@184@12)))
  :pattern ((Set_in n@184@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@184@12) n@184@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@185@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 114 | n@185@12 in nodes@2@12 | live]
; [else-branch: 114 | !(n@185@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 114 | n@185@12 in nodes@2@12]
(assert (Set_in n@185@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12) n@185@12))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite (= n@185@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@185@12) (Set_in (inv@14@12 n@185@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@185@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 115 | Lookup(is_marked, sm@150@12, n@185@12) | live]
; [else-branch: 115 | !(Lookup(is_marked, sm@150@12, n@185@12)) | live]
(push) ; 9
; [then-branch: 115 | Lookup(is_marked, sm@150@12, n@185@12)]
(assert ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
(pop) ; 9
(push) ; 9
; [else-branch: 115 | !(Lookup(is_marked, sm@150@12, n@185@12))]
(assert (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12) n@185@12))
(push) ; 10
(assert (not (and (img@178@12 n@185@12) (Set_in (inv@177@12 n@185@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12) n@185@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
  ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12)))
(push) ; 8
; [then-branch: 116 | !(Lookup(is_marked, sm@150@12, n@185@12)) && Lookup(is_marked, sm@179@12, n@185@12) | live]
; [else-branch: 116 | !(!(Lookup(is_marked, sm@150@12, n@185@12)) && Lookup(is_marked, sm@179@12, n@185@12)) | live]
(push) ; 9
; [then-branch: 116 | !(Lookup(is_marked, sm@150@12, n@185@12)) && Lookup(is_marked, sm@179@12, n@185@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
  ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) n@185@12))
(push) ; 10
(assert (not (and (img@170@12 n@185@12) (Set_in (inv@169@12 n@185@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 117 | Lookup(left, sm@171@12, n@185@12) == Null | live]
; [else-branch: 117 | Lookup(left, sm@171@12, n@185@12) != Null | live]
(push) ; 11
; [then-branch: 117 | Lookup(left, sm@171@12, n@185@12) == Null]
(assert (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 117 | Lookup(left, sm@171@12, n@185@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(push) ; 12
(assert (not (and (img@170@12 n@185@12) (Set_in (inv@169@12 n@185@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)))
(push) ; 12
(assert (not (and
  (img@178@12 ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12))
  (Set_in (inv@177@12 ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 116 | !(!(Lookup(is_marked, sm@150@12, n@185@12)) && Lookup(is_marked, sm@179@12, n@185@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) n@185@12)
    (=>
      (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12))))
    (or
      (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
      (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 114 | !(n@185@12 in nodes@2@12)]
(assert (not (Set_in n@185@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (Set_in n@185@12 nodes@2@12)
  (and
    (Set_in n@185@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12) n@185@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12) n@185@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) n@185@12)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
          ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12))))))
; Joined path conditions
(assert (or (not (Set_in n@185@12 nodes@2@12)) (Set_in n@185@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@185@12 $Ref)) (!
  (and
    (=>
      (Set_in n@185@12 nodes@2@12)
      (and
        (Set_in n@185@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12) n@185@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12) n@185@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
          ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) n@185@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
              ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)))))
    (or (not (Set_in n@185@12 nodes@2@12)) (Set_in n@185@12 nodes@2@12)))
  :pattern ((Set_in n@185@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12) n@185@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@185@12 $Ref)) (!
  (and
    (=>
      (Set_in n@185@12 nodes@2@12)
      (and
        (Set_in n@185@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12) n@185@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12) n@185@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
          ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) n@185@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
              ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)))))
    (or (not (Set_in n@185@12 nodes@2@12)) (Set_in n@185@12 nodes@2@12)))
  :pattern ((Set_in n@185@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) n@185@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@185@12 $Ref)) (!
  (=>
    (and
      (Set_in n@185@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@185@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12)))
    (or
      (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12))))
  :pattern ((Set_in n@185@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@185@12) n@185@12))
  :pattern ((Set_in n@185@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12) n@185@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@185@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@186@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 118 | n@186@12 in nodes@2@12 | live]
; [else-branch: 118 | !(n@186@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 118 | n@186@12 in nodes@2@12]
(assert (Set_in n@186@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12) n@186@12))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite (= n@186@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@186@12) (Set_in (inv@14@12 n@186@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@186@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 119 | Lookup(is_marked, sm@150@12, n@186@12) | live]
; [else-branch: 119 | !(Lookup(is_marked, sm@150@12, n@186@12)) | live]
(push) ; 9
; [then-branch: 119 | Lookup(is_marked, sm@150@12, n@186@12)]
(assert ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
(pop) ; 9
(push) ; 9
; [else-branch: 119 | !(Lookup(is_marked, sm@150@12, n@186@12))]
(assert (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12) n@186@12))
(push) ; 10
(assert (not (and (img@178@12 n@186@12) (Set_in (inv@177@12 n@186@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12) n@186@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
  ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12)))
(push) ; 8
; [then-branch: 120 | !(Lookup(is_marked, sm@150@12, n@186@12)) && Lookup(is_marked, sm@179@12, n@186@12) | live]
; [else-branch: 120 | !(!(Lookup(is_marked, sm@150@12, n@186@12)) && Lookup(is_marked, sm@179@12, n@186@12)) | live]
(push) ; 9
; [then-branch: 120 | !(Lookup(is_marked, sm@150@12, n@186@12)) && Lookup(is_marked, sm@179@12, n@186@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
  ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) n@186@12))
(push) ; 10
(assert (not (and (img@174@12 n@186@12) (Set_in (inv@173@12 n@186@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 121 | Lookup(right, sm@175@12, n@186@12) == Null | live]
; [else-branch: 121 | Lookup(right, sm@175@12, n@186@12) != Null | live]
(push) ; 11
; [then-branch: 121 | Lookup(right, sm@175@12, n@186@12) == Null]
(assert (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 121 | Lookup(right, sm@175@12, n@186@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(push) ; 12
(assert (not (and (img@174@12 n@186@12) (Set_in (inv@173@12 n@186@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)))
(push) ; 12
(assert (not (and
  (img@178@12 ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12))
  (Set_in (inv@177@12 ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 120 | !(!(Lookup(is_marked, sm@150@12, n@186@12)) && Lookup(is_marked, sm@179@12, n@186@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) n@186@12)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null))
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 118 | !(n@186@12 in nodes@2@12)]
(assert (not (Set_in n@186@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (Set_in n@186@12 nodes@2@12)
  (and
    (Set_in n@186@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12) n@186@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12) n@186@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) n@186@12)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
          ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12))))))
; Joined path conditions
(assert (or (not (Set_in n@186@12 nodes@2@12)) (Set_in n@186@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@186@12 $Ref)) (!
  (and
    (=>
      (Set_in n@186@12 nodes@2@12)
      (and
        (Set_in n@186@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12) n@186@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12) n@186@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
          ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) n@186@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
              ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)))))
    (or (not (Set_in n@186@12 nodes@2@12)) (Set_in n@186@12 nodes@2@12)))
  :pattern ((Set_in n@186@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12) n@186@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@186@12 $Ref)) (!
  (and
    (=>
      (Set_in n@186@12 nodes@2@12)
      (and
        (Set_in n@186@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12) n@186@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12) n@186@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
          ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) n@186@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
              ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)))))
    (or (not (Set_in n@186@12 nodes@2@12)) (Set_in n@186@12 nodes@2@12)))
  :pattern ((Set_in n@186@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) n@186@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@186@12 $Ref)) (!
  (=>
    (and
      (Set_in n@186@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@186@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12)))
    (or
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12))))
  :pattern ((Set_in n@186@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@186@12) n@186@12))
  :pattern ((Set_in n@186@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12) n@186@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@186@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (node in nodes)
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n$4@187@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@187@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@188@12 ($Ref) $Ref)
(declare-fun img@189@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@187@12 $Ref) (n$42@187@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@187@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$41@187@12) n$41@187@12))
      (and
        (Set_in n$42@187@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$42@187@12) n$42@187@12))
      (= n$41@187@12 n$42@187@12))
    (= n$41@187@12 n$42@187@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@187@12 $Ref)) (!
  (=>
    (Set_in n$4@187@12 nodes@2@12)
    (and (= (inv@188@12 n$4@187@12) n$4@187@12) (img@189@12 n$4@187@12)))
  :pattern ((Set_in n$4@187@12 nodes@2@12))
  :pattern ((inv@188@12 n$4@187@12))
  :pattern ((img@189@12 n$4@187@12))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@12 r) (Set_in (inv@188@12 r) nodes@2@12))
    (= (inv@188@12 r) r))
  :pattern ((inv@188@12 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@188@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) r) r))
  :pattern ((inv@188@12 r))
  :qid |quant-u-225|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@190@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@188@12 r) nodes@2@12) (img@189@12 r) (= r (inv@188@12 r)))
    ($Perm.min
      (ite
        (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@190@12 r))
    $Perm.No)
  
  :qid |quant-u-227|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@188@12 r) nodes@2@12) (img@189@12 r) (= r (inv@188@12 r)))
    (= (- $Perm.Write (pTaken@190@12 r)) $Perm.No))
  
  :qid |quant-u-228|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$5@191@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@191@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@192@12 ($Ref) $Ref)
(declare-fun img@193@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@191@12 $Ref) (n$52@191@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@191@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$51@191@12) n$51@191@12))
      (and
        (Set_in n$52@191@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$52@191@12) n$52@191@12))
      (= n$51@191@12 n$52@191@12))
    (= n$51@191@12 n$52@191@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@191@12 $Ref)) (!
  (=>
    (Set_in n$5@191@12 nodes@2@12)
    (and (= (inv@192@12 n$5@191@12) n$5@191@12) (img@193@12 n$5@191@12)))
  :pattern ((Set_in n$5@191@12 nodes@2@12))
  :pattern ((inv@192@12 n$5@191@12))
  :pattern ((img@193@12 n$5@191@12))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@193@12 r) (Set_in (inv@192@12 r) nodes@2@12))
    (= (inv@192@12 r) r))
  :pattern ((inv@192@12 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@192@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) r) r))
  :pattern ((inv@192@12 r))
  :qid |quant-u-230|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@194@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@192@12 r) nodes@2@12) (img@193@12 r) (= r (inv@192@12 r)))
    ($Perm.min
      (ite
        (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@194@12 r))
    $Perm.No)
  
  :qid |quant-u-232|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@192@12 r) nodes@2@12) (img@193@12 r) (= r (inv@192@12 r)))
    (= (- $Perm.Write (pTaken@194@12 r)) $Perm.No))
  
  :qid |quant-u-233|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$6@195@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@195@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@196@12 ($Ref) $Ref)
(declare-fun img@197@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@195@12 $Ref) (n$62@195@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$61@195@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n$61@195@12) n$61@195@12))
      (and
        (Set_in n$62@195@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n$62@195@12) n$62@195@12))
      (= n$61@195@12 n$62@195@12))
    (= n$61@195@12 n$62@195@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@195@12 $Ref)) (!
  (=>
    (Set_in n$6@195@12 nodes@2@12)
    (and (= (inv@196@12 n$6@195@12) n$6@195@12) (img@197@12 n$6@195@12)))
  :pattern ((Set_in n$6@195@12 nodes@2@12))
  :pattern ((inv@196@12 n$6@195@12))
  :pattern ((img@197@12 n$6@195@12))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@197@12 r) (Set_in (inv@196@12 r) nodes@2@12))
    (= (inv@196@12 r) r))
  :pattern ((inv@196@12 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@196@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r) r))
  :pattern ((inv@196@12 r))
  :qid |quant-u-235|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@198@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@196@12 r) nodes@2@12) (img@197@12 r) (= r (inv@196@12 r)))
    ($Perm.min
      (ite
        (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@198@12 r))
    $Perm.No)
  
  :qid |quant-u-237|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@196@12 r) nodes@2@12) (img@197@12 r) (= r (inv@196@12 r)))
    (= (- $Perm.Write (pTaken@198@12 r)) $Perm.No))
  
  :qid |quant-u-238|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@199@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 122 | !(n$7@199@12 in nodes@2@12) | live]
; [else-branch: 122 | n$7@199@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 122 | !(n$7@199@12 in nodes@2@12)]
(assert (not (Set_in n$7@199@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 122 | n$7@199@12 in nodes@2@12]
(assert (Set_in n$7@199@12 nodes@2@12))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12))
(push) ; 8
(assert (not (and (img@170@12 n$7@199@12) (Set_in (inv@169@12 n$7@199@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (Set_in n$7@199@12 nodes@2@12)
  (and
    (Set_in n$7@199@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12))))
(assert (or (Set_in n$7@199@12 nodes@2@12) (not (Set_in n$7@199@12 nodes@2@12))))
(push) ; 6
; [then-branch: 123 | n$7@199@12 in nodes@2@12 && Lookup(left, sm@171@12, n$7@199@12) != Null | live]
; [else-branch: 123 | !(n$7@199@12 in nodes@2@12 && Lookup(left, sm@171@12, n$7@199@12) != Null) | live]
(push) ; 7
; [then-branch: 123 | n$7@199@12 in nodes@2@12 && Lookup(left, sm@171@12, n$7@199@12) != Null]
(assert (and
  (Set_in n$7@199@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12))
(push) ; 8
(assert (not (and (img@170@12 n$7@199@12) (Set_in (inv@169@12 n$7@199@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 123 | !(n$7@199@12 in nodes@2@12 && Lookup(left, sm@171@12, n$7@199@12) != Null)]
(assert (not
  (and
    (Set_in n$7@199@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (and
    (Set_in n$7@199@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))
  (and
    (Set_in n$7@199@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@199@12 nodes@2@12)
      (not
        (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null))))
  (and
    (Set_in n$7@199@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@199@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@199@12 nodes@2@12)
      (and
        (Set_in n$7@199@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12)))
    (or (Set_in n$7@199@12 nodes@2@12) (not (Set_in n$7@199@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@199@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))
      (and
        (Set_in n$7@199@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12)))
    (or
      (not
        (and
          (Set_in n$7@199@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12)
              $Ref.null))))
      (and
        (Set_in n$7@199@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@199@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@199@12 nodes@2@12)
      (and
        (Set_in n$7@199@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12)))
    (or (Set_in n$7@199@12 nodes@2@12) (not (Set_in n$7@199@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@199@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))
      (and
        (Set_in n$7@199@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12)))
    (or
      (not
        (and
          (Set_in n$7@199@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12)
              $Ref.null))))
      (and
        (Set_in n$7@199@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))))
  :pattern ((Set_in n$7@199@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$7@199@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@199@12 nodes@2@12)
      (not
        (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) nodes@2@12))
  :pattern ((Set_in n$7@199@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$7@199@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@199@12 nodes@2@12)
      (not
        (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) nodes@2@12))
  :pattern ((Set_in n$7@199@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n$7@199@12) n$7@199@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@200@12 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 124 | !(n$8@200@12 in nodes@2@12) | live]
; [else-branch: 124 | n$8@200@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 124 | !(n$8@200@12 in nodes@2@12)]
(assert (not (Set_in n$8@200@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 124 | n$8@200@12 in nodes@2@12]
(assert (Set_in n$8@200@12 nodes@2@12))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12))
(push) ; 8
(assert (not (and (img@174@12 n$8@200@12) (Set_in (inv@173@12 n$8@200@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (Set_in n$8@200@12 nodes@2@12)
  (and
    (Set_in n$8@200@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12))))
(assert (or (Set_in n$8@200@12 nodes@2@12) (not (Set_in n$8@200@12 nodes@2@12))))
(push) ; 6
; [then-branch: 125 | n$8@200@12 in nodes@2@12 && Lookup(right, sm@175@12, n$8@200@12) != Null | live]
; [else-branch: 125 | !(n$8@200@12 in nodes@2@12 && Lookup(right, sm@175@12, n$8@200@12) != Null) | live]
(push) ; 7
; [then-branch: 125 | n$8@200@12 in nodes@2@12 && Lookup(right, sm@175@12, n$8@200@12) != Null]
(assert (and
  (Set_in n$8@200@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12))
(push) ; 8
(assert (not (and (img@174@12 n$8@200@12) (Set_in (inv@173@12 n$8@200@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 125 | !(n$8@200@12 in nodes@2@12 && Lookup(right, sm@175@12, n$8@200@12) != Null)]
(assert (not
  (and
    (Set_in n$8@200@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (and
    (Set_in n$8@200@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) $Ref.null)))
  (and
    (Set_in n$8@200@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@200@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) $Ref.null))))
  (and
    (Set_in n$8@200@12 nodes@2@12)
    (not
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@200@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@200@12 nodes@2@12)
      (and
        (Set_in n$8@200@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12)))
    (or (Set_in n$8@200@12 nodes@2@12) (not (Set_in n$8@200@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@200@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12)
            $Ref.null)))
      (and
        (Set_in n$8@200@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12)))
    (or
      (not
        (and
          (Set_in n$8@200@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12)
              $Ref.null))))
      (and
        (Set_in n$8@200@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@200@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@200@12 nodes@2@12)
      (and
        (Set_in n$8@200@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12)))
    (or (Set_in n$8@200@12 nodes@2@12) (not (Set_in n$8@200@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@200@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12)
            $Ref.null)))
      (and
        (Set_in n$8@200@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12)))
    (or
      (not
        (and
          (Set_in n$8@200@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12)
              $Ref.null))))
      (and
        (Set_in n$8@200@12 nodes@2@12)
        (not
          (=
            ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12)
            $Ref.null)))))
  :pattern ((Set_in n$8@200@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$8@200@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@200@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) nodes@2@12))
  :pattern ((Set_in n$8@200@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$8@200@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@200@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) nodes@2@12))
  :pattern ((Set_in n$8@200@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n$8@200@12) n$8@200@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@201@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 126 | n@201@12 in nodes@2@12 | live]
; [else-branch: 126 | !(n@201@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 126 | n@201@12 in nodes@2@12]
(assert (Set_in n@201@12 nodes@2@12))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12) n@201@12))
(push) ; 8
(assert (not (and (img@15@12 n@201@12) (Set_in (inv@14@12 n@201@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 127 | Lookup(is_marked, sm@16@12, n@201@12) | live]
; [else-branch: 127 | !(Lookup(is_marked, sm@16@12, n@201@12)) | live]
(push) ; 9
; [then-branch: 127 | Lookup(is_marked, sm@16@12, n@201@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12) n@201@12))
(push) ; 10
(assert (not (and (img@178@12 n@201@12) (Set_in (inv@177@12 n@201@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 127 | !(Lookup(is_marked, sm@16@12, n@201@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)
  (and
    ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12) n@201@12))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 126 | !(n@201@12 in nodes@2@12)]
(assert (not (Set_in n@201@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (Set_in n@201@12 nodes@2@12)
  (and
    (Set_in n@201@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12) n@201@12)
    (=>
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)
      (and
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12) n@201@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)))))
; Joined path conditions
(assert (or (not (Set_in n@201@12 nodes@2@12)) (Set_in n@201@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@201@12 $Ref)) (!
  (and
    (=>
      (Set_in n@201@12 nodes@2@12)
      (and
        (Set_in n@201@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12) n@201@12)
        (=>
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)
          (and
            ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12) n@201@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12))))
    (or (not (Set_in n@201@12 nodes@2@12)) (Set_in n@201@12 nodes@2@12)))
  :pattern ((Set_in n@201@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12) n@201@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(push) ; 5
(assert (not (forall ((n@201@12 $Ref)) (!
  (=>
    (and
      (Set_in n@201@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12))
  :pattern ((Set_in n@201@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12) n@201@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@201@12 $Ref)) (!
  (=>
    (and
      (Set_in n@201@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@201@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12))
  :pattern ((Set_in n@201@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@201@12) n@201@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) node@3@12) node@3@12))
(push) ; 5
(assert (not (and (img@178@12 node@3@12) (Set_in (inv@177@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) node@3@12)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) node@3@12))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@202@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 128 | n@202@12 in nodes@2@12 | live]
; [else-branch: 128 | !(n@202@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 128 | n@202@12 in nodes@2@12]
(assert (Set_in n@202@12 nodes@2@12))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@202@12) n@202@12))
(push) ; 8
(assert (not (and (img@170@12 n@202@12) (Set_in (inv@169@12 n@202@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@202@12) n@202@12))
(push) ; 8
(assert (not (and (img@7@12 n@202@12) (Set_in (inv@6@12 n@202@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 128 | !(n@202@12 in nodes@2@12)]
(assert (not (Set_in n@202@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@202@12 nodes@2@12)
  (and
    (Set_in n@202@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@202@12) n@202@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@202@12) n@202@12))))
; Joined path conditions
(assert (or (not (Set_in n@202@12 nodes@2@12)) (Set_in n@202@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@202@12 $Ref)) (!
  (and
    (=>
      (Set_in n@202@12 nodes@2@12)
      (and
        (Set_in n@202@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@202@12) n@202@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@202@12) n@202@12)))
    (or (not (Set_in n@202@12 nodes@2@12)) (Set_in n@202@12 nodes@2@12)))
  :pattern ((Set_in n@202@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@202@12) n@202@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(push) ; 5
(assert (not (forall ((n@202@12 $Ref)) (!
  (=>
    (Set_in n@202@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@202@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@202@12)))
  :pattern ((Set_in n@202@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@202@12) n@202@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@202@12 $Ref)) (!
  (=>
    (Set_in n@202@12 nodes@2@12)
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@202@12)
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@202@12)))
  :pattern ((Set_in n@202@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@202@12) n@202@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@203@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 129 | n@203@12 in nodes@2@12 | live]
; [else-branch: 129 | !(n@203@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 129 | n@203@12 in nodes@2@12]
(assert (Set_in n@203@12 nodes@2@12))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@203@12) n@203@12))
(push) ; 8
(assert (not (and (img@174@12 n@203@12) (Set_in (inv@173@12 n@203@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@203@12) n@203@12))
(push) ; 8
(assert (not (and (img@11@12 n@203@12) (Set_in (inv@10@12 n@203@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 129 | !(n@203@12 in nodes@2@12)]
(assert (not (Set_in n@203@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@203@12 nodes@2@12)
  (and
    (Set_in n@203@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@203@12) n@203@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@203@12) n@203@12))))
; Joined path conditions
(assert (or (not (Set_in n@203@12 nodes@2@12)) (Set_in n@203@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@203@12 $Ref)) (!
  (and
    (=>
      (Set_in n@203@12 nodes@2@12)
      (and
        (Set_in n@203@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@203@12) n@203@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@203@12) n@203@12)))
    (or (not (Set_in n@203@12 nodes@2@12)) (Set_in n@203@12 nodes@2@12)))
  :pattern ((Set_in n@203@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@203@12) n@203@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(push) ; 5
(assert (not (forall ((n@203@12 $Ref)) (!
  (=>
    (Set_in n@203@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@203@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@203@12)))
  :pattern ((Set_in n@203@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@203@12) n@203@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@203@12 $Ref)) (!
  (=>
    (Set_in n@203@12 nodes@2@12)
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@203@12)
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@203@12)))
  :pattern ((Set_in n@203@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@203@12) n@203@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@204@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 130 | n@204@12 in nodes@2@12 | live]
; [else-branch: 130 | !(n@204@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 130 | n@204@12 in nodes@2@12]
(assert (Set_in n@204@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12) n@204@12))
(push) ; 8
(assert (not (and (img@15@12 n@204@12) (Set_in (inv@14@12 n@204@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 131 | Lookup(is_marked, sm@16@12, n@204@12) | live]
; [else-branch: 131 | !(Lookup(is_marked, sm@16@12, n@204@12)) | live]
(push) ; 9
; [then-branch: 131 | Lookup(is_marked, sm@16@12, n@204@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
(pop) ; 9
(push) ; 9
; [else-branch: 131 | !(Lookup(is_marked, sm@16@12, n@204@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12) n@204@12))
(push) ; 10
(assert (not (and (img@178@12 n@204@12) (Set_in (inv@177@12 n@204@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12) n@204@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12)))
(push) ; 8
; [then-branch: 132 | !(Lookup(is_marked, sm@16@12, n@204@12)) && Lookup(is_marked, sm@179@12, n@204@12) | live]
; [else-branch: 132 | !(!(Lookup(is_marked, sm@16@12, n@204@12)) && Lookup(is_marked, sm@179@12, n@204@12)) | live]
(push) ; 9
; [then-branch: 132 | !(Lookup(is_marked, sm@16@12, n@204@12)) && Lookup(is_marked, sm@179@12, n@204@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
  ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) n@204@12))
(push) ; 10
(assert (not (and (img@170@12 n@204@12) (Set_in (inv@169@12 n@204@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 133 | Lookup(left, sm@171@12, n@204@12) == Null | live]
; [else-branch: 133 | Lookup(left, sm@171@12, n@204@12) != Null | live]
(push) ; 11
; [then-branch: 133 | Lookup(left, sm@171@12, n@204@12) == Null]
(assert (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 133 | Lookup(left, sm@171@12, n@204@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(push) ; 12
(assert (not (and (img@170@12 n@204@12) (Set_in (inv@169@12 n@204@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)))
(push) ; 12
(assert (not (and
  (img@178@12 ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12))
  (Set_in (inv@177@12 ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 132 | !(!(Lookup(is_marked, sm@16@12, n@204@12)) && Lookup(is_marked, sm@179@12, n@204@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) n@204@12)
    (=>
      (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12))))
    (or
      (not (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
      (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 130 | !(n@204@12 in nodes@2@12)]
(assert (not (Set_in n@204@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (Set_in n@204@12 nodes@2@12)
  (and
    (Set_in n@204@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12) n@204@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12) n@204@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) n@204@12)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))
          (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
          ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12))))))
; Joined path conditions
(assert (or (not (Set_in n@204@12 nodes@2@12)) (Set_in n@204@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@12 r) (Set_in (inv@169@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@171@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@204@12 $Ref)) (!
  (and
    (=>
      (Set_in n@204@12 nodes@2@12)
      (and
        (Set_in n@204@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12) n@204@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12) n@204@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) n@204@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
              ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))))
    (or (not (Set_in n@204@12 nodes@2@12)) (Set_in n@204@12 nodes@2@12)))
  :pattern ((Set_in n@204@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12) n@204@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@204@12 $Ref)) (!
  (and
    (=>
      (Set_in n@204@12 nodes@2@12)
      (and
        (Set_in n@204@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12) n@204@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12) n@204@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) n@204@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
              ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))))
    (or (not (Set_in n@204@12 nodes@2@12)) (Set_in n@204@12 nodes@2@12)))
  :pattern ((Set_in n@204@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) n@204@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(push) ; 5
(assert (not (forall ((n@204@12 $Ref)) (!
  (=>
    (and
      (Set_in n@204@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))
    (or
      (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12))))
  :pattern ((Set_in n@204@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12) n@204@12))
  :pattern ((Set_in n@204@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) n@204@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@204@12 $Ref)) (!
  (=>
    (and
      (Set_in n@204@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@204@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12)))
    (or
      (= ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12))))
  :pattern ((Set_in n@204@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@204@12) n@204@12))
  :pattern ((Set_in n@204@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12) n@204@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)) ($FVF.lookup_left (as sm@171@12  $FVF<left>) n@204@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@205@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 134 | n@205@12 in nodes@2@12 | live]
; [else-branch: 134 | !(n@205@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 134 | n@205@12 in nodes@2@12]
(assert (Set_in n@205@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12) n@205@12))
(push) ; 8
(assert (not (and (img@15@12 n@205@12) (Set_in (inv@14@12 n@205@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 135 | Lookup(is_marked, sm@16@12, n@205@12) | live]
; [else-branch: 135 | !(Lookup(is_marked, sm@16@12, n@205@12)) | live]
(push) ; 9
; [then-branch: 135 | Lookup(is_marked, sm@16@12, n@205@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
(pop) ; 9
(push) ; 9
; [else-branch: 135 | !(Lookup(is_marked, sm@16@12, n@205@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12) n@205@12))
(push) ; 10
(assert (not (and (img@178@12 n@205@12) (Set_in (inv@177@12 n@205@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12) n@205@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12)))
(push) ; 8
; [then-branch: 136 | !(Lookup(is_marked, sm@16@12, n@205@12)) && Lookup(is_marked, sm@179@12, n@205@12) | live]
; [else-branch: 136 | !(!(Lookup(is_marked, sm@16@12, n@205@12)) && Lookup(is_marked, sm@179@12, n@205@12)) | live]
(push) ; 9
; [then-branch: 136 | !(Lookup(is_marked, sm@16@12, n@205@12)) && Lookup(is_marked, sm@179@12, n@205@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
  ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) n@205@12))
(push) ; 10
(assert (not (and (img@174@12 n@205@12) (Set_in (inv@173@12 n@205@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 137 | Lookup(right, sm@175@12, n@205@12) == Null | live]
; [else-branch: 137 | Lookup(right, sm@175@12, n@205@12) != Null | live]
(push) ; 11
; [then-branch: 137 | Lookup(right, sm@175@12, n@205@12) == Null]
(assert (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 137 | Lookup(right, sm@175@12, n@205@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(push) ; 12
(assert (not (and (img@174@12 n@205@12) (Set_in (inv@173@12 n@205@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)))
(push) ; 12
(assert (not (and
  (img@178@12 ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12))
  (Set_in (inv@177@12 ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 136 | !(!(Lookup(is_marked, sm@16@12, n@205@12)) && Lookup(is_marked, sm@179@12, n@205@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) n@205@12)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null))
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
    ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 134 | !(n@205@12 in nodes@2@12)]
(assert (not (Set_in n@205@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (Set_in n@205@12 nodes@2@12)
  (and
    (Set_in n@205@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12) n@205@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12) n@205@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) n@205@12)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
          ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12))))))
; Joined path conditions
(assert (or (not (Set_in n@205@12 nodes@2@12)) (Set_in n@205@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@12 r) (Set_in (inv@177@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@12 r) (Set_in (inv@173@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@175@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@205@12 $Ref)) (!
  (and
    (=>
      (Set_in n@205@12 nodes@2@12)
      (and
        (Set_in n@205@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12) n@205@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12) n@205@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) n@205@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
              ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))))
    (or (not (Set_in n@205@12 nodes@2@12)) (Set_in n@205@12 nodes@2@12)))
  :pattern ((Set_in n@205@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12) n@205@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@205@12 $Ref)) (!
  (and
    (=>
      (Set_in n@205@12 nodes@2@12)
      (and
        (Set_in n@205@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12) n@205@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12) n@205@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) n@205@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
              ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
            ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))))
    (or (not (Set_in n@205@12 nodes@2@12)) (Set_in n@205@12 nodes@2@12)))
  :pattern ((Set_in n@205@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) n@205@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(push) ; 5
(assert (not (forall ((n@205@12 $Ref)) (!
  (=>
    (and
      (Set_in n@205@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))
    (or
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12))))
  :pattern ((Set_in n@205@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12) n@205@12))
  :pattern ((Set_in n@205@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) n@205@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@205@12 $Ref)) (!
  (=>
    (and
      (Set_in n@205@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@205@12))
        ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12)))
    (or
      (= ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12))))
  :pattern ((Set_in n@205@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) n@205@12) n@205@12))
  :pattern ((Set_in n@205@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12) n@205@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)) ($FVF.lookup_right (as sm@175@12  $FVF<right>) n@205@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 4
(push) ; 4
; [else-branch: 101 | !(Lookup(right, sm@12@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(right, sm@12@12, node@3@12))))]
(assert (not
  (and
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12))))))
(pop) ; 4
; [eval] !(node.right != null && !node.right.is_marked)
; [eval] node.right != null && !node.right.is_marked
; [eval] node.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 4
(assert (not (and (img@11@12 node@3@12) (Set_in (inv@10@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch: 138 | Lookup(right, sm@12@12, node@3@12) == Null | live]
; [else-branch: 138 | Lookup(right, sm@12@12, node@3@12) != Null | live]
(push) ; 5
; [then-branch: 138 | Lookup(right, sm@12@12, node@3@12) == Null]
(assert (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 138 | Lookup(right, sm@12@12, node@3@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null)))
; [eval] !node.right.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 6
(assert (not (and (img@11@12 node@3@12) (Set_in (inv@10@12 node@3@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) node@3@12)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12))
        (Set_in (inv@14@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)) nodes@2@12))
      (-
        $Perm.Write
        (pTaken@39@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 139 | !(Lookup(right, sm@12@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(right, sm@12@12, node@3@12)))) | live]
; [else-branch: 139 | Lookup(right, sm@12@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(right, sm@12@12, node@3@12))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 139 | !(Lookup(right, sm@12@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(right, sm@12@12, node@3@12))))]
(assert (not
  (and
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12))))))
; [eval] (node in nodes)
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n$4@206@12 $Ref)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@206@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@207@12 ($Ref) $Ref)
(declare-fun img@208@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@206@12 $Ref) (n$42@206@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@206@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$41@206@12) n$41@206@12))
      (and
        (Set_in n$42@206@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$42@206@12) n$42@206@12))
      (= n$41@206@12 n$42@206@12))
    (= n$41@206@12 n$42@206@12))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@206@12 $Ref)) (!
  (=>
    (Set_in n$4@206@12 nodes@2@12)
    (and (= (inv@207@12 n$4@206@12) n$4@206@12) (img@208@12 n$4@206@12)))
  :pattern ((Set_in n$4@206@12 nodes@2@12))
  :pattern ((inv@207@12 n$4@206@12))
  :pattern ((img@208@12 n$4@206@12))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@208@12 r) (Set_in (inv@207@12 r) nodes@2@12))
    (= (inv@207@12 r) r))
  :pattern ((inv@207@12 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@207@12 r) nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) r) r))
  :pattern ((inv@207@12 r))
  :qid |quant-u-240|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@209@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@207@12 r) nodes@2@12) (img@208@12 r) (= r (inv@207@12 r)))
    ($Perm.min
      (ite
        (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@209@12 r))
    $Perm.No)
  
  :qid |quant-u-242|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@207@12 r) nodes@2@12) (img@208@12 r) (= r (inv@207@12 r)))
    (= (- $Perm.Write (pTaken@209@12 r)) $Perm.No))
  
  :qid |quant-u-243|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$5@210@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@210@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@211@12 ($Ref) $Ref)
(declare-fun img@212@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@210@12 $Ref) (n$52@210@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@210@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$51@210@12) n$51@210@12))
      (and
        (Set_in n$52@210@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$52@210@12) n$52@210@12))
      (= n$51@210@12 n$52@210@12))
    (= n$51@210@12 n$52@210@12))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@210@12 $Ref)) (!
  (=>
    (Set_in n$5@210@12 nodes@2@12)
    (and (= (inv@211@12 n$5@210@12) n$5@210@12) (img@212@12 n$5@210@12)))
  :pattern ((Set_in n$5@210@12 nodes@2@12))
  :pattern ((inv@211@12 n$5@210@12))
  :pattern ((img@212@12 n$5@210@12))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@12 r) (Set_in (inv@211@12 r) nodes@2@12))
    (= (inv@211@12 r) r))
  :pattern ((inv@211@12 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@211@12 r) nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) r) r))
  :pattern ((inv@211@12 r))
  :qid |quant-u-245|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@213@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@211@12 r) nodes@2@12) (img@212@12 r) (= r (inv@211@12 r)))
    ($Perm.min
      (ite
        (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
        $Perm.Write
        $Perm.No)
      (pTaken@213@12 r))
    $Perm.No)
  
  :qid |quant-u-247|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@211@12 r) nodes@2@12) (img@212@12 r) (= r (inv@211@12 r)))
    (= (- $Perm.Write (pTaken@213@12 r)) $Perm.No))
  
  :qid |quant-u-248|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$6@214@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@214@12 nodes@2@12))
(pop) ; 5
(declare-fun inv@215@12 ($Ref) $Ref)
(declare-fun img@216@12 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@214@12 $Ref) (n$62@214@12 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$61@214@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n$61@214@12) n$61@214@12))
      (and
        (Set_in n$62@214@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n$62@214@12) n$62@214@12))
      (= n$61@214@12 n$62@214@12))
    (= n$61@214@12 n$62@214@12))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@214@12 $Ref)) (!
  (=>
    (Set_in n$6@214@12 nodes@2@12)
    (and (= (inv@215@12 n$6@214@12) n$6@214@12) (img@216@12 n$6@214@12)))
  :pattern ((Set_in n$6@214@12 nodes@2@12))
  :pattern ((inv@215@12 n$6@214@12))
  :pattern ((img@216@12 n$6@214@12))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@216@12 r) (Set_in (inv@215@12 r) nodes@2@12))
    (= (inv@215@12 r) r))
  :pattern ((inv@215@12 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@215@12 r) nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r) r))
  :pattern ((inv@215@12 r))
  :qid |quant-u-250|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@217@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@215@12 r) nodes@2@12) (img@216@12 r) (= r (inv@215@12 r)))
    ($Perm.min
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@218@12 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@215@12 r) nodes@2@12) (img@216@12 r) (= r (inv@215@12 r)))
    ($Perm.min
      (ite (= r node@3@12) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@217@12 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (- $Perm.Write (pTaken@39@12 r))
        $Perm.No)
      (pTaken@217@12 r))
    $Perm.No)
  
  :qid |quant-u-252|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@215@12 r) nodes@2@12) (img@216@12 r) (= r (inv@215@12 r)))
    (= (- $Perm.Write (pTaken@217@12 r)) $Perm.No))
  
  :qid |quant-u-253|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@218@12 node@3@12)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@215@12 r) nodes@2@12) (img@216@12 r) (= r (inv@215@12 r)))
    (= (- (- $Perm.Write (pTaken@217@12 r)) (pTaken@218@12 r)) $Perm.No))
  
  :qid |quant-u-255|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@219@12 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 140 | !(n$7@219@12 in nodes@2@12) | live]
; [else-branch: 140 | n$7@219@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 140 | !(n$7@219@12 in nodes@2@12)]
(assert (not (Set_in n$7@219@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 140 | n$7@219@12 in nodes@2@12]
(assert (Set_in n$7@219@12 nodes@2@12))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12))
(push) ; 8
(assert (not (and (img@7@12 n$7@219@12) (Set_in (inv@6@12 n$7@219@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n$7@219@12 nodes@2@12)
  (and
    (Set_in n$7@219@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12))))
(assert (or (Set_in n$7@219@12 nodes@2@12) (not (Set_in n$7@219@12 nodes@2@12))))
(push) ; 6
; [then-branch: 141 | n$7@219@12 in nodes@2@12 && Lookup(left, sm@8@12, n$7@219@12) != Null | live]
; [else-branch: 141 | !(n$7@219@12 in nodes@2@12 && Lookup(left, sm@8@12, n$7@219@12) != Null) | live]
(push) ; 7
; [then-branch: 141 | n$7@219@12 in nodes@2@12 && Lookup(left, sm@8@12, n$7@219@12) != Null]
(assert (and
  (Set_in n$7@219@12 nodes@2@12)
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12))
(push) ; 8
(assert (not (and (img@7@12 n$7@219@12) (Set_in (inv@6@12 n$7@219@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 141 | !(n$7@219@12 in nodes@2@12 && Lookup(left, sm@8@12, n$7@219@12) != Null)]
(assert (not
  (and
    (Set_in n$7@219@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (and
    (Set_in n$7@219@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))
  (and
    (Set_in n$7@219@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@219@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null))))
  (and
    (Set_in n$7@219@12 nodes@2@12)
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@219@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@219@12 nodes@2@12)
      (and
        (Set_in n$7@219@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12)))
    (or (Set_in n$7@219@12 nodes@2@12) (not (Set_in n$7@219@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@219@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))
      (and
        (Set_in n$7@219@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12)))
    (or
      (not
        (and
          (Set_in n$7@219@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null))))
      (and
        (Set_in n$7@219@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@219@12 $Ref)) (!
  (and
    (=>
      (Set_in n$7@219@12 nodes@2@12)
      (and
        (Set_in n$7@219@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12)))
    (or (Set_in n$7@219@12 nodes@2@12) (not (Set_in n$7@219@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$7@219@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))
      (and
        (Set_in n$7@219@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12)))
    (or
      (not
        (and
          (Set_in n$7@219@12 nodes@2@12)
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null))))
      (and
        (Set_in n$7@219@12 nodes@2@12)
        (not
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))))
  :pattern ((Set_in n$7@219@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$7@219@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@219@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) nodes@2@12))
  :pattern ((Set_in n$7@219@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$7@219@12 $Ref)) (!
  (=>
    (and
      (Set_in n$7@219@12 nodes@2@12)
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) nodes@2@12))
  :pattern ((Set_in n$7@219@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n$7@219@12) n$7@219@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@220@12 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 142 | !(n$8@220@12 in nodes@2@12) | live]
; [else-branch: 142 | n$8@220@12 in nodes@2@12 | live]
(push) ; 7
; [then-branch: 142 | !(n$8@220@12 in nodes@2@12)]
(assert (not (Set_in n$8@220@12 nodes@2@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 142 | n$8@220@12 in nodes@2@12]
(assert (Set_in n$8@220@12 nodes@2@12))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12))
(push) ; 8
(assert (not (and (img@11@12 n$8@220@12) (Set_in (inv@10@12 n$8@220@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n$8@220@12 nodes@2@12)
  (and
    (Set_in n$8@220@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12))))
(assert (or (Set_in n$8@220@12 nodes@2@12) (not (Set_in n$8@220@12 nodes@2@12))))
(push) ; 6
; [then-branch: 143 | n$8@220@12 in nodes@2@12 && Lookup(right, sm@12@12, n$8@220@12) != Null | live]
; [else-branch: 143 | !(n$8@220@12 in nodes@2@12 && Lookup(right, sm@12@12, n$8@220@12) != Null) | live]
(push) ; 7
; [then-branch: 143 | n$8@220@12 in nodes@2@12 && Lookup(right, sm@12@12, n$8@220@12) != Null]
(assert (and
  (Set_in n$8@220@12 nodes@2@12)
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12))
(push) ; 8
(assert (not (and (img@11@12 n$8@220@12) (Set_in (inv@10@12 n$8@220@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 143 | !(n$8@220@12 in nodes@2@12 && Lookup(right, sm@12@12, n$8@220@12) != Null)]
(assert (not
  (and
    (Set_in n$8@220@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (and
    (Set_in n$8@220@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))
  (and
    (Set_in n$8@220@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@220@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null))))
  (and
    (Set_in n$8@220@12 nodes@2@12)
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@220@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@220@12 nodes@2@12)
      (and
        (Set_in n$8@220@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12)))
    (or (Set_in n$8@220@12 nodes@2@12) (not (Set_in n$8@220@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@220@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))
      (and
        (Set_in n$8@220@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12)))
    (or
      (not
        (and
          (Set_in n$8@220@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12)
              $Ref.null))))
      (and
        (Set_in n$8@220@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) nodes@2@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@220@12 $Ref)) (!
  (and
    (=>
      (Set_in n$8@220@12 nodes@2@12)
      (and
        (Set_in n$8@220@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12)))
    (or (Set_in n$8@220@12 nodes@2@12) (not (Set_in n$8@220@12 nodes@2@12)))
    (=>
      (and
        (Set_in n$8@220@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))
      (and
        (Set_in n$8@220@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12)))
    (or
      (not
        (and
          (Set_in n$8@220@12 nodes@2@12)
          (not
            (=
              ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12)
              $Ref.null))))
      (and
        (Set_in n$8@220@12 nodes@2@12)
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))))
  :pattern ((Set_in n$8@220@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$8@220@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@220@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) nodes@2@12))
  :pattern ((Set_in n$8@220@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$8@220@12 $Ref)) (!
  (=>
    (and
      (Set_in n$8@220@12 nodes@2@12)
      (not
        (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) nodes@2@12))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) nodes@2@12))
  :pattern ((Set_in n$8@220@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n$8@220@12) n$8@220@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@221@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 144 | n@221@12 in nodes@2@12 | live]
; [else-branch: 144 | !(n@221@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 144 | n@221@12 in nodes@2@12]
(assert (Set_in n@221@12 nodes@2@12))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12) n@221@12))
(push) ; 8
(assert (not (and (img@15@12 n@221@12) (Set_in (inv@14@12 n@221@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 145 | Lookup(is_marked, sm@16@12, n@221@12) | live]
; [else-branch: 145 | !(Lookup(is_marked, sm@16@12, n@221@12)) | live]
(push) ; 9
; [then-branch: 145 | Lookup(is_marked, sm@16@12, n@221@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12) n@221@12))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= n@221@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@221@12) (Set_in (inv@14@12 n@221@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@221@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 145 | !(Lookup(is_marked, sm@16@12, n@221@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)
  (and
    ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12) n@221@12))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)))
(pop) ; 7
(push) ; 7
; [else-branch: 144 | !(n@221@12 in nodes@2@12)]
(assert (not (Set_in n@221@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (Set_in n@221@12 nodes@2@12)
  (and
    (Set_in n@221@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12) n@221@12)
    (=>
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)
      (and
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12) n@221@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)))))
; Joined path conditions
(assert (or (not (Set_in n@221@12 nodes@2@12)) (Set_in n@221@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@221@12 $Ref)) (!
  (and
    (=>
      (Set_in n@221@12 nodes@2@12)
      (and
        (Set_in n@221@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12) n@221@12)
        (=>
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)
          (and
            ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12) n@221@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12))))
    (or (not (Set_in n@221@12 nodes@2@12)) (Set_in n@221@12 nodes@2@12)))
  :pattern ((Set_in n@221@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12) n@221@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(push) ; 5
(assert (not (forall ((n@221@12 $Ref)) (!
  (=>
    (and
      (Set_in n@221@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12))
  :pattern ((Set_in n@221@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12) n@221@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@221@12 $Ref)) (!
  (=>
    (and
      (Set_in n@221@12 nodes@2@12)
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@221@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12))
  :pattern ((Set_in n@221@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@221@12) n@221@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) node@3@12) node@3@12))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and (img@15@12 node@3@12) (Set_in (inv@14@12 node@3@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 node@3@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) node@3@12)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) node@3@12))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@222@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 146 | n@222@12 in nodes@2@12 | live]
; [else-branch: 146 | !(n@222@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 146 | n@222@12 in nodes@2@12]
(assert (Set_in n@222@12 nodes@2@12))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@222@12) n@222@12))
(push) ; 8
(assert (not (and (img@7@12 n@222@12) (Set_in (inv@6@12 n@222@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 8
(assert (not (and (img@7@12 n@222@12) (Set_in (inv@6@12 n@222@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 146 | !(n@222@12 in nodes@2@12)]
(assert (not (Set_in n@222@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@222@12 nodes@2@12)
  (and
    (Set_in n@222@12 nodes@2@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@222@12) n@222@12))))
; Joined path conditions
(assert (or (not (Set_in n@222@12 nodes@2@12)) (Set_in n@222@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@222@12 $Ref)) (!
  (and
    (=>
      (Set_in n@222@12 nodes@2@12)
      (and
        (Set_in n@222@12 nodes@2@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@222@12) n@222@12)))
    (or (not (Set_in n@222@12 nodes@2@12)) (Set_in n@222@12 nodes@2@12)))
  :pattern ((Set_in n@222@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@222@12) n@222@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@223@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 147 | n@223@12 in nodes@2@12 | live]
; [else-branch: 147 | !(n@223@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 147 | n@223@12 in nodes@2@12]
(assert (Set_in n@223@12 nodes@2@12))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@223@12) n@223@12))
(push) ; 8
(assert (not (and (img@11@12 n@223@12) (Set_in (inv@10@12 n@223@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 8
(assert (not (and (img@11@12 n@223@12) (Set_in (inv@10@12 n@223@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 147 | !(n@223@12 in nodes@2@12)]
(assert (not (Set_in n@223@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@223@12 nodes@2@12)
  (and
    (Set_in n@223@12 nodes@2@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@223@12) n@223@12))))
; Joined path conditions
(assert (or (not (Set_in n@223@12 nodes@2@12)) (Set_in n@223@12 nodes@2@12)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@223@12 $Ref)) (!
  (and
    (=>
      (Set_in n@223@12 nodes@2@12)
      (and
        (Set_in n@223@12 nodes@2@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@223@12) n@223@12)))
    (or (not (Set_in n@223@12 nodes@2@12)) (Set_in n@223@12 nodes@2@12)))
  :pattern ((Set_in n@223@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@223@12) n@223@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@224@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 148 | n@224@12 in nodes@2@12 | live]
; [else-branch: 148 | !(n@224@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 148 | n@224@12 in nodes@2@12]
(assert (Set_in n@224@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12) n@224@12))
(push) ; 8
(assert (not (and (img@15@12 n@224@12) (Set_in (inv@14@12 n@224@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 149 | Lookup(is_marked, sm@16@12, n@224@12) | live]
; [else-branch: 149 | !(Lookup(is_marked, sm@16@12, n@224@12)) | live]
(push) ; 9
; [then-branch: 149 | Lookup(is_marked, sm@16@12, n@224@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
(pop) ; 9
(push) ; 9
; [else-branch: 149 | !(Lookup(is_marked, sm@16@12, n@224@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12) n@224@12))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= n@224@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@224@12) (Set_in (inv@14@12 n@224@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@224@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12) n@224@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12)))
(push) ; 8
; [then-branch: 150 | !(Lookup(is_marked, sm@16@12, n@224@12)) && Lookup(is_marked, sm@150@12, n@224@12) | live]
; [else-branch: 150 | !(!(Lookup(is_marked, sm@16@12, n@224@12)) && Lookup(is_marked, sm@150@12, n@224@12)) | live]
(push) ; 9
; [then-branch: 150 | !(Lookup(is_marked, sm@16@12, n@224@12)) && Lookup(is_marked, sm@150@12, n@224@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
  ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) n@224@12))
(push) ; 10
(assert (not (and (img@7@12 n@224@12) (Set_in (inv@6@12 n@224@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 151 | Lookup(left, sm@8@12, n@224@12) == Null | live]
; [else-branch: 151 | Lookup(left, sm@8@12, n@224@12) != Null | live]
(push) ; 11
; [then-branch: 151 | Lookup(left, sm@8@12, n@224@12) == Null]
(assert (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 151 | Lookup(left, sm@8@12, n@224@12) != Null]
(assert (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
      (=
        ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 12
(assert (not (and (img@7@12 n@224@12) (Set_in (inv@6@12 n@224@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) node@3@12)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@12 ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12))
        (Set_in (inv@14@12 ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) nodes@2@12))
      (-
        $Perm.Write
        (pTaken@39@12 ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
  (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 150 | !(!(Lookup(is_marked, sm@16@12, n@224@12)) && Lookup(is_marked, sm@150@12, n@224@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) n@224@12)
    (=>
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12))))
    (or
      (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
      (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 148 | !(n@224@12 in nodes@2@12)]
(assert (not (Set_in n@224@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@224@12 nodes@2@12)
  (and
    (Set_in n@224@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12) n@224@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12) n@224@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) n@224@12)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))
          (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
          ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12))))))
; Joined path conditions
(assert (or (not (Set_in n@224@12 nodes@2@12)) (Set_in n@224@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@12 r) (Set_in (inv@6@12 r) nodes@2@12))
    (=
      ($FVF.lookup_left (as sm@8@12  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@12)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@12  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@224@12 $Ref)) (!
  (and
    (=>
      (Set_in n@224@12 nodes@2@12)
      (and
        (Set_in n@224@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12) n@224@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12) n@224@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) n@224@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))))
    (or (not (Set_in n@224@12 nodes@2@12)) (Set_in n@224@12 nodes@2@12)))
  :pattern ((Set_in n@224@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12) n@224@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@224@12 $Ref)) (!
  (and
    (=>
      (Set_in n@224@12 nodes@2@12)
      (and
        (Set_in n@224@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12) n@224@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12) n@224@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)
            ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) n@224@12)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))))
    (or (not (Set_in n@224@12 nodes@2@12)) (Set_in n@224@12 nodes@2@12)))
  :pattern ((Set_in n@224@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) n@224@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(push) ; 5
(assert (not (forall ((n@224@12 $Ref)) (!
  (=>
    (and
      (Set_in n@224@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))
    (or
      (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12))))
  :pattern ((Set_in n@224@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12) n@224@12))
  :pattern ((Set_in n@224@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) n@224@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@224@12 $Ref)) (!
  (=>
    (and
      (Set_in n@224@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@224@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12)))
    (or
      (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12))))
  :pattern ((Set_in n@224@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@224@12) n@224@12))
  :pattern ((Set_in n@224@12 nodes@2@12) ($FVF.loc_left ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12) n@224@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)) ($FVF.lookup_left (as sm@8@12  $FVF<left>) n@224@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@225@12 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 152 | n@225@12 in nodes@2@12 | live]
; [else-branch: 152 | !(n@225@12 in nodes@2@12) | live]
(push) ; 7
; [then-branch: 152 | n@225@12 in nodes@2@12]
(assert (Set_in n@225@12 nodes@2@12))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (=
        ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12) n@225@12))
(push) ; 8
(assert (not (and (img@15@12 n@225@12) (Set_in (inv@14@12 n@225@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 153 | Lookup(is_marked, sm@16@12, n@225@12) | live]
; [else-branch: 153 | !(Lookup(is_marked, sm@16@12, n@225@12)) | live]
(push) ; 9
; [then-branch: 153 | Lookup(is_marked, sm@16@12, n@225@12)]
(assert ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
(pop) ; 9
(push) ; 9
; [else-branch: 153 | !(Lookup(is_marked, sm@16@12, n@225@12))]
(assert (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12) n@225@12))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= n@225@12 node@3@12) $Perm.Write $Perm.No)
    (ite
      (and (img@15@12 n@225@12) (Set_in (inv@14@12 n@225@12) nodes@2@12))
      (- $Perm.Write (pTaken@39@12 n@225@12))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12) n@225@12))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
  ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12)))
(push) ; 8
; [then-branch: 154 | !(Lookup(is_marked, sm@16@12, n@225@12)) && Lookup(is_marked, sm@150@12, n@225@12) | live]
; [else-branch: 154 | !(!(Lookup(is_marked, sm@16@12, n@225@12)) && Lookup(is_marked, sm@150@12, n@225@12)) | live]
(push) ; 9
; [then-branch: 154 | !(Lookup(is_marked, sm@16@12, n@225@12)) && Lookup(is_marked, sm@150@12, n@225@12)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
  ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) n@225@12))
(push) ; 10
(assert (not (and (img@11@12 n@225@12) (Set_in (inv@10@12 n@225@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 155 | Lookup(right, sm@12@12, n@225@12) == Null | live]
; [else-branch: 155 | Lookup(right, sm@12@12, n@225@12) != Null | live]
(push) ; 11
; [then-branch: 155 | Lookup(right, sm@12@12, n@225@12) == Null]
(assert (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 155 | Lookup(right, sm@12@12, n@225@12) != Null]
(assert (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
      (=
        ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 12
(assert (not (and (img@11@12 n@225@12) (Set_in (inv@10@12 n@225@12) nodes@2@12))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@12)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
        (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) node@3@12)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12))
        (Set_in (inv@14@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) nodes@2@12))
      (-
        $Perm.Write
        (pTaken@39@12 ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
  (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 154 | !(!(Lookup(is_marked, sm@16@12, n@225@12)) && Lookup(is_marked, sm@150@12, n@225@12))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) n@225@12)
    (=>
      (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12))))
    (or
      (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
      (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12))))
(pop) ; 7
(push) ; 7
; [else-branch: 152 | !(n@225@12 in nodes@2@12)]
(assert (not (Set_in n@225@12 nodes@2@12)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@225@12 nodes@2@12)
  (and
    (Set_in n@225@12 nodes@2@12)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12) n@225@12)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12) n@225@12)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) n@225@12)
        (=>
          (not
            (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12))))
        (or
          (not
            (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))
          (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
          ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12))))))
; Joined path conditions
(assert (or (not (Set_in n@225@12 nodes@2@12)) (Set_in n@225@12 nodes@2@12)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
    (=
      ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@12)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@12 r) (Set_in (inv@14@12 r) nodes@2@12))
      (< $Perm.No (- $Perm.Write (pTaken@39@12 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@12  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@12)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@12 r) (Set_in (inv@10@12 r) nodes@2@12))
    (=
      ($FVF.lookup_right (as sm@12@12  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@12))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@12  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@225@12 $Ref)) (!
  (and
    (=>
      (Set_in n@225@12 nodes@2@12)
      (and
        (Set_in n@225@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12) n@225@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12) n@225@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) n@225@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))))
    (or (not (Set_in n@225@12 nodes@2@12)) (Set_in n@225@12 nodes@2@12)))
  :pattern ((Set_in n@225@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12) n@225@12))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@225@12 $Ref)) (!
  (and
    (=>
      (Set_in n@225@12 nodes@2@12)
      (and
        (Set_in n@225@12 nodes@2@12)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12) n@225@12)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12) n@225@12)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
          ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)
            ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) n@225@12)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
              ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
            ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))))
    (or (not (Set_in n@225@12 nodes@2@12)) (Set_in n@225@12 nodes@2@12)))
  :pattern ((Set_in n@225@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) n@225@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(push) ; 5
(assert (not (forall ((n@225@12 $Ref)) (!
  (=>
    (and
      (Set_in n@225@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))
    (or
      (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12))))
  :pattern ((Set_in n@225@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12) n@225@12))
  :pattern ((Set_in n@225@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) n@225@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n@225@12 $Ref)) (!
  (=>
    (and
      (Set_in n@225@12 nodes@2@12)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@12  $FVF<is_marked>) n@225@12))
        ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12)))
    (or
      (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) $Ref.null)
      ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12))))
  :pattern ((Set_in n@225@12 nodes@2@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) n@225@12) n@225@12))
  :pattern ((Set_in n@225@12 nodes@2@12) ($FVF.loc_right ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12) n@225@12) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)) ($FVF.lookup_right (as sm@12@12  $FVF<right>) n@225@12)))
  :qid |prog./Users/raoulvandoren/Desktop/Master/Master_Semester_3/silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 4
(push) ; 4
; [else-branch: 139 | Lookup(right, sm@12@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(right, sm@12@12, node@3@12)))]
(assert (and
  (not (= ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@12  $FVF<right>) node@3@12)))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 99 | Lookup(left, sm@8@12, node@3@12) != Null && !(Lookup(is_marked, sm@150@12, Lookup(left, sm@8@12, node@3@12)))]
(assert (and
  (not (= ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@12  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@12  $FVF<left>) node@3@12)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
